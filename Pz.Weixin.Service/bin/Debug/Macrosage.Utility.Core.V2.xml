<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Macrosage.Utility.Core.V2</name>
    </assembly>
    <members>
        <member name="T:Macrosage.Utility.Cache.MemcachedHelper">
            <summary>
            Memcached 操作类
            <para>服务器 memcached 版本: 1.4.4 及以上</para>
            </summary>
            <summary>
            Memcached 操作类
            <para>服务器 memcached 版本: 1.4.4 及以上</para>
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Cache.MemcachedHelper.GetData``1(System.String)">
            <summary>
            获取
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Cache.MemcachedHelper.AppendPlatform(System.String,System.Int32)">
            <summary>
            中转页/不同浏览器登陆使用此方法追加平台id
            </summary>
            <param name="cacheKey"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Cache.MemcachedHelper.ResetPlatformData(System.String)">
            <summary>
            重置登陆平台集合
            </summary>
            <param name="cacheKey"></param>
        </member>
        <member name="M:Macrosage.Utility.Cache.MemcachedHelper.Set(System.String,System.Object)">
            <summary>
            添加一个对象到缓存中，如果已经存在则覆写，不存在则自动创建，默认时间30天
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Cache.MemcachedHelper.Set(System.String,System.Object,System.Int32)">
            <summary>
            添加一个对象到缓存中，如果已经存在则覆写，不存在则自动创建
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
            <param name="expiry">过期时间（分钟）</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Cache.MemcachedHelper.Add(System.String,System.Object)">
            <summary>
            添加一个对象到缓存中，如果已经存在则返回false并不改变值，不存在则创建，默认时间30天
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Cache.MemcachedHelper.Add(System.String,System.Object,System.Int32)">
            <summary>
            添加一个对象到缓存中，如果已经存在则返回false并不改变值，不存在则创建
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
            <param name="expiry">过期时间（分钟）</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Cache.MemcachedHelper.Replace(System.String,System.Object)">
            <summary>
            替换一个已经存在的缓存对象，不存在则返回false，存在则替换，默认时间30天
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Cache.MemcachedHelper.Replace(System.String,System.Object,System.Int32)">
            <summary>
            替换一个已经存在的缓存对象，不存在则返回false，存在则替换
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
            <param name="expiry">过期时间（分钟）</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Cache.MemcachedHelper.Delete(System.String)">
            <summary>
            删除一个缓存的key与value
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Cache.MemcachedHelper.Clear">
            <summary>
            清除所有缓存的数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Cache.MemcachedHelper.Get(System.String)">
            <summary>
            获取指定key值的对象
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Cache.MemcachedHelper.Get``1(System.String)">
            <summary>
            获取指定key值的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Macrosage.Utility.Cache.MsCacheHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Cache.MsCacheHelper.Insert(System.String,System.Object)">
            <summary>
            添加新缓存
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Macrosage.Utility.Cache.MsCacheHelper.Insert(System.String,System.Object,System.Int32)">
            <summary>
            添加新缓存
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="absoluteExpiration">该绝对过期时间（分钟），默认值：1440分钟</param>
        </member>
        <member name="M:Macrosage.Utility.Cache.MsCacheHelper.Remove(System.String)">
            <summary>
            清楚缓存
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Macrosage.Utility.Cache.MsCacheHelper.RemoveAll">
            <summary>
            清楚全部缓存
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Cache.MsCacheHelper.InsertAndGetCache(System.String,System.Object)">
            <summary>
            添加缓存并返回缓存的数据
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Cache.MsCacheHelper.InsertAndGetCache(System.String,System.Object,System.Int32)">
            <summary>
            添加缓存并返回缓存的数据
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="absoluteExpiration">该绝对过期时间（分钟），小于1时为默认值：1440分钟</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Cache.MsCacheHelper.InsertAndGetCache``1(System.String,System.Object)">
            <summary>
            添加缓存并返回缓存的数据
            </summary>
            <typeparam name="T">返回数据类型</typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Cache.MsCacheHelper.InsertAndGetCache``1(System.String,System.Object,System.Int32)">
            <summary>
            添加缓存并返回缓存的数据
            </summary>
            <typeparam name="T">返回数据类型</typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="absoluteExpiration">该绝对过期时间（分钟），小于1时为默认值：1440分钟</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Cache.MsCacheHelper.GetCache(System.String)">
            <summary>
            获取缓存数据
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Cache.MsCacheHelper.GetCache``1(System.String)">
            <summary>
            获取缓存数据
            </summary>
            <typeparam name="T">指定返回类型</typeparam>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="T:Macrosage.Utility.CodeTimer">
            <summary>
            
            </summary>
        </member>
        <member name="T:Macrosage.Utility.AppSettings">
            <summary>
            
            </summary>
        </member>
        <member name="M:Macrosage.Utility.AppSettings.ReadAppSettings(System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object},System.String,System.Boolean)">
            <summary>
            读取分布 AppSettings 文件
            </summary>
            <param name="keyValues">储存集合对象</param>
            <param name="path">物理路径</param>
            <param name="isKeyToLower">是否将key转成小写</param>
        </member>
        <member name="M:Macrosage.Utility.AppSettings.SetDefualtValue(System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object},System.String,System.Object)">
            <summary>
            向集合中赋值
            </summary>
        </member>
        <member name="M:Macrosage.Utility.AppSettings.GetValue``1(System.String)">
            <summary>
            获取配置appSettings[name="<paramref name="key"/>"]的值。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.AppSettings.GetValue(System.String)">
            <summary>
            获取指定的Config文件的AppSetting里面的指定键值对应的value值
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:Macrosage.Utility.EncryptHelper">
            <summary>
            
            </summary>
        </member>
        <member name="F:Macrosage.Utility.EncryptHelper.StrDesKey">
            <summary>
            DES 加密所需8位密匙
            </summary>
        </member>
        <member name="M:Macrosage.Utility.EncryptHelper.GetApiKey(System.String,System.String,System.String,System.String)">
            <summary>
            生成 api 调用 key
            </summary>
        </member>
        <member name="M:Macrosage.Utility.EncryptHelper.ToMD5(System.String,System.Boolean)">
            <summary>
            MD5加密，默认大写
            </summary>
            <param name="value"></param>
            <param name="isToUpper"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.EncryptHelper.ToSHA1(System.String,System.Boolean)">
            <summary>
            SHA1加密，默认小写
            </summary>
            <param name="value"></param>
            <param name="isToUpper"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.EncryptHelper.Base64Encode(System.Byte[])">
            <summary>
            对字符串进行Base64编码
            </summary>
            <param name="inArray">一个 8 位无符号整数数组</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.EncryptHelper.Base64Encode(System.String)">
            <summary>
            对字符串进行Base64编码
            </summary>
            <param name="value">要处理的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.EncryptHelper.Base64Encode(System.String,System.Text.Encoding)">
            <summary>
            对字符串进行Base64编码
            </summary>
            <param name="value">要处理的字符串</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.EncryptHelper.Base64Decode(System.String)">
            <summary>
            对Base64编码进行解码
            </summary>
            <param name="value">要处理的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.EncryptHelper.Base64Decode(System.String,System.Text.Encoding)">
            <summary>
            对字符串进行Base64解码
            </summary>
            <param name="value">要处理的字符串</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.EncryptHelper.IsBase64(System.String)">
            <summary>
              是否是Base64字符串
            </summary>
            <param name = "value"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.EncryptHelper.DESEncrypt(System.String,System.String)">
            <summary>
            DES加密
            </summary>
            <param name="value"></param>
            <param name="key">自定义秘钥</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.EncryptHelper.DESDecrypt(System.String,System.String)">
            <summary>
            DES解密
            </summary>
            <returns>返回解密后字符串</returns>
        </member>
        <member name="M:Macrosage.Utility.EncryptHelper.GenerateKey">
            <summary>
            自定义随机密钥时使用
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.EncryptHelper.XxteaEncrypt(System.String,System.String)">
            <summary>
            
            <para>测试方式: var s = EncryptHelper.XxteaEncrypt("hello~! 我在", "1234567890abcdef");</para>
            </summary>
            <param name="value"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.EncryptHelper.XxteaDecrypt(System.String,System.String)">
            <summary>
            
            <para>测试方式: var s = EncryptHelper.XxteaDecrypt(s, "1234567890abcdef");</para>
            </summary>
            <param name="value"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Macrosage.Utility.FtpHelper">
            <summary>
            FTP 上传类
            </summary>
        </member>
        <member name="M:Macrosage.Utility.FtpHelper.UploadFileBase_v1(System.IO.Stream,System.String)">
            <summary>
            兼容百度编辑器及项目 V1 部分功能
            </summary>
            <param name="fileStream"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.FtpHelper.UploadFile(System.IO.Stream,System.String,System.String,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="fileStream">需要上传的文件流</param>
            <param name="upFileName">客户端上传文件名</param>
            <param name="newFileName">生成与服务器新文件名</param>
            <param name="clientId">客户端唯一标识</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.FtpHelper.UploadFile(System.Web.HttpPostedFileBase,System.String,System.String,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="file">客户端已上载的单独文件的访问</param>
            <param name="upFileName">客户端上传文件名</param>
            <param name="newFileName">生成与服务器新文件名</param>
            <param name="clientId">客户端唯一标识</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.FtpHelper.UploadFile(System.Web.HttpPostedFile,System.String,System.String,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="file">客户端已上载的单独文件的访问</param>
            <param name="upFileName">客户端上传文件名</param>
            <param name="newFileName">生成与服务器新文件名</param>
            <param name="clientId">客户端唯一标识</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.FtpHelper.UploadFile(System.IO.Stream,System.String,System.String,System.String,Macrosage.Utility.Models.Ftp.UploadFileModel@)">
            <summary>
            上传文件，同名会覆盖
            </summary>
            <param name="fileStream">需要上传的文件流</param>
            <param name="upFileName">客户端上传文件名</param>
            <param name="newFileName">生成与服务器新文件名</param>
            <param name="clientId">客户端唯一标识</param>
            <param name="o">上传</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.FtpHelper.GetFileStream(System.String)">
            <summary>
            读取文件流【调用处注意关闭流】
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.FtpHelper.UploadFile(System.IO.Stream,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="fileStream">需要上传的文件流</param>
            <param name="path">保存路径</param>
        </member>
        <member name="M:Macrosage.Utility.FtpHelper.CreateDirectory(System.String)">
            <summary>
            创建文件夹
            </summary>
            <param name="path">文件夹路径</param>
        </member>
        <member name="M:Macrosage.Utility.FtpHelper.DeleteDirectory(System.String)">
            <summary>
            删除文件夹及文件夹下的文件
            </summary>
            <param name="path">文件夹路径</param>
        </member>
        <member name="M:Macrosage.Utility.FtpHelper.DeleteFile(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="M:Macrosage.Utility.FtpHelper.DirectoryExists(System.String)">
            <summary>
            检测文件夹是否存在
            </summary>
            <param name="path">文件夹路径</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.FtpHelper.FileExists(System.String)">
            <summary>
            检测文件是否存在
            </summary>
            <param name="path">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.FtpHelper.Rename(System.String,System.String)">
            <summary>
            重命名文件夹或文件
            </summary>
            <param name="sourcePath">原文件夹或文件名</param>
            <param name="destPath">新文件夹或文件名</param>
        </member>
        <member name="T:Macrosage.Utility.HttpHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Macrosage.Utility.HttpHelper.SendPost(System.String,System.String,Macrosage.Utility.HttpContentType)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="tpye"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.HttpHelper.SendGet(System.String,System.String,Macrosage.Utility.HttpContentType)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="tpye"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.HttpHelper.GetHttpContentType(Macrosage.Utility.HttpContentType)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Macrosage.Utility.HttpResponseMessageHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Macrosage.Utility.HttpResponseMessageHelper.Result(System.Net.HttpStatusCode,Macrosage.Utility.Models.ResultJsonModel)">
            <summary>
            HTTP 响应消息
            </summary>
            <param name="code">HTTP 定义的状态代码的值</param>
            <param name="model">ResultJsonModel 用于返回 json 对象</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.HttpResponseMessageHelper.Result(System.Net.HttpStatusCode)">
            <summary>
            HTTP 响应消息
            </summary>
            <param name="code">HTTP 定义的状态代码的值</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.HttpResponseMessageHelper.Result(System.Net.HttpStatusCode,System.String)">
            <summary>
            HTTP 响应消息
            </summary>
            <param name="code">HTTP 定义的状态代码的值</param>
            <param name="content">用于初始化 System.Net.Http.StringContent 的内容</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.HttpResponseMessageHelper.Result(System.Net.HttpStatusCode,System.String,System.Text.Encoding)">
            <summary>
            HTTP 响应消息
            </summary>
            <param name="code">HTTP 定义的状态代码的值</param>
            <param name="content">用于初始化 System.Net.Http.StringContent 的内容</param>
            <param name="encoding">要用于该内容的媒体，默认Json</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.HttpResponseMessageHelper.Result(System.Net.HttpStatusCode,System.String,System.Text.Encoding,Macrosage.Utility.MediaType)">
            <summary>
            HTTP 响应消息
            </summary>
            <param name="code">HTTP 定义的状态代码的值</param>
            <param name="content">用于初始化 System.Net.Http.StringContent 的内容</param>
            <param name="encoding">响应消息编码，默认UTF-8</param>
            <param name="mediaType">要用于该内容的媒体，默认Json</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.HttpResponseMessageHelper.Result(System.Net.HttpStatusCode,System.Object)">
            <summary>
            HTTP 响应消息
            </summary>
            <param name="code">HTTP 定义的状态代码的值</param>
            <param name="data">参数会自动 ToJson，可传 dataset/datatable/model/IEnumerable/new { ... }</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.HttpResponseMessageHelper.ResultBase(System.Net.HttpStatusCode,System.String,System.Text.Encoding,System.String)">
            <summary>
            HTTP 响应消息
            </summary>
            <param name="code">HTTP 定义的状态代码的值</param>
            <param name="content">用于初始化 System.Net.Http.StringContent 的内容</param>
            <param name="encoding">响应消息编码，默认UTF-8</param>
            <param name="mediaType">要用于该内容的媒体，默认Json</param>
            <returns></returns>
        </member>
        <member name="T:Macrosage.Utility.ImageHelper">
            <summary>
            图片操作类
            </summary>
        </member>
        <member name="M:Macrosage.Utility.ImageHelper.Thumbnail">
            <summary>
            创建缩略图
            </summary>
            <returns></returns>
        </member>
        <member name="T:Macrosage.Utility.JsonHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Macrosage.Utility.JsonHelper.ToDictionaryByJson(System.String)">
            <summary>
            Json字符串转字典
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.JsonHelper.ToDataTableByJson(System.String)">
            <summary>
            Json字符串转DataTable
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.JsonHelper.ToOrgChartJson(System.Data.DataTable)">
            <summary>
            将 DataTable 转换成组织机构图使用的 json 格式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.JsonHelper.ToDataTable(System.String)">
            <summary>
            [Json.Net] 将 标准Json 字符串转成 DataTable
            <para>Json 格式为：</para>
            <para>{</para>
            <para>　"TableName": [</para>
            <para>　　{"Column0": "Value0", "Column1": "Value1"},</para>
            <para>　　{"Column0": "Value0", "Column1": "Value1"},</para>
            <para>　　{"Column0": "Value0", "Column1": "Value1"}</para>
            <para>　]</para>
            <para>}</para>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Macrosage.Utility.JsonHelper.ToDataTableBySimple(System.String)">
            <summary>
            [Json.Net] 将 简单Json 字符串转成 DataTable
            <para>Json 格式为：</para>
            <para>[</para>
            <para>　　{"Column0": "Value0", "Column1": "Value1"},</para>
            <para>　　{"Column0": "Value0", "Column1": "Value1"},</para>
            <para>　　{"Column0": "Value0", "Column1": "Value1"}</para>
            <para>]</para>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.JsonHelper.ToDataTableByArray(System.String)">
            <summary>
            [Json.Net] 将 数组Json 字符串转成 DataTable
            <para>Json 格式为：</para>
            <para>{"Column0": "Value0", "Column1": "Value1"},</para>
            <para>{"Column0": "Value0", "Column1": "Value1"}</para>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Macrosage.Utility.JsonHelper.ToDataSet(System.String)">
            <summary>
            [Json.Net] 将 Json 字符串转成 DataSet
            <para>Json 格式为：</para>
            <para>{</para>
            <para>　"TableName1": [</para>
            <para>　　{"Column0": "Value0", "Column1": "Value1"},</para>
            <para>　　{"Column0": "Value0", "Column1": "Value1"},</para>
            <para>　　{"Column0": "Value0", "Column1": "Value1"}</para>
            <para>　],</para>
            <para>　"TableName2": [</para>
            <para>　　{"Column0": "Value0", "Column1": "Value1"},</para>
            <para>　　{"Column0": "Value0", "Column1": "Value1"},</para>
            <para>　　{"Column0": "Value0", "Column1": "Value1"}</para>
            <para>　]</para>
            <para>}</para>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.JsonHelper.ToJson(System.Object,System.String)">
            <summary>
            [Json.Net] 将集合转成 Json 字符串
            <para>返回格式：[{...},{...},{...}]</para>
            </summary>
            <param name="value"></param>
            <param name="defValue"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.JsonHelper.ToJsonArray(System.Object,System.String)">
            <summary>
            [Json.Net] 将集合转成 Json 数组形式
            <para>返回格式：{...},{...},{...}</para>
            </summary>
            <param name="value"></param>
            <param name="defValue"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.JsonHelper.ToDeserializeObject``1(System.String)">
            <summary>
            [Json.Net] 将 Json 转成泛型对象
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.JsonHelper.ResultJson(System.Int32)">
            <summary>
            新标准 json 格式，建议优先使用枚举方式
            </summary>
            <param name="code">系统消息编码</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.JsonHelper.ResultJson(System.Int32,System.String)">
            <summary>
            新标准 json 格式，建议优先使用枚举方式
            </summary>
            <param name="code">系统消息编码</param>
            <param name="message">自定义消息</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.JsonHelper.ResultJson(System.Int32,System.Object)">
            <summary>
            新标准 json 格式，建议优先使用枚举方式
            </summary>
            <param name="code">系统消息编码</param>
            <param name="data">返回数据集</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.JsonHelper.ResultJson(System.Int32,System.String,System.Object)">
            <summary>
            新标准 json 格式，建议优先使用枚举方式
            </summary>
            <param name="code">系统消息编码</param>
            <param name="message">自定义消息</param>
            <param name="data">返回数据集</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.JsonHelper.ResultJson(System.Enum)">
            <summary>
            新标准 json 格式
            </summary>
            <param name="enumType">系统消息枚举</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.JsonHelper.ResultJson(System.Enum,System.String)">
            <summary>
            新标准 json 格式
            </summary>
            <param name="enumType">系统消息枚举</param>
            <param name="message">自定义消息</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.JsonHelper.ResultJson(System.Enum,System.Object)">
            <summary>
            新标准 json 格式
            </summary>
            <param name="enumType">系统消息枚举</param>
            <param name="data">返回数据集</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.JsonHelper.ResultJson(System.Enum,System.String,System.Object)">
            <summary>
            新标准 json 格式
            </summary>
            <param name="enumType">系统消息枚举</param>
            <param name="message">自定义消息</param>
            <param name="data">返回数据集</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.JsonHelper.CreateResultJson(System.Int32,System.String,System.String)">
            <summary>
            新旧标准混合 json 格式
            <para>建议使用新标准</para>
            </summary>
        </member>
        <member name="M:Macrosage.Utility.JsonHelper.CreateResultJson(System.Int32,System.String)">
            <summary>
            新旧标准混合 json 格式
            <para>建议使用新标准</para>
            </summary>
        </member>
        <member name="M:Macrosage.Utility.JsonHelper.CreateResultJson(System.Int32)">
            <summary>
            新旧标准混合 json 格式
            <para>建议使用新标准</para>
            </summary>
        </member>
        <member name="M:Macrosage.Utility.JsonHelper.CreateResultJson(System.Enum,System.String,System.String)">
            <summary>
            新旧标准混合 json 格式
            <para>建议使用新标准</para>
            </summary>
        </member>
        <member name="M:Macrosage.Utility.JsonHelper.CreateResultJson(System.Enum,System.String)">
            <summary>
            新旧标准混合 json 格式
            <para>建议使用新标准</para>
            </summary>
        </member>
        <member name="M:Macrosage.Utility.JsonHelper.CreateResultJson(System.Enum)">
            <summary>
            新旧标准混合 json 格式
            <para>建议使用新标准</para>
            </summary>
        </member>
        <member name="M:Macrosage.Utility.JsonHelper.ResultUploadJson(System.Enum,System.String,System.String,System.Object)">
            <summary>
            上传返回 json
            </summary>
        </member>
        <member name="M:Macrosage.Utility.JsonHelper.ToTitleCase(System.String)">
            <summary>
            将指定的字符串转换为词首字母大写
            <para>codec_long_name --> Codec_Long_Name</para>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.JsonHelper.JsonToClassFile(System.String)">
            <summary>
            根据json字符串生成实体cs文件
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="T:Macrosage.Utility.LogHelper">
            <summary>
            
            </summary>
        </member>
        <member name="T:Macrosage.Utility.MapHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Macrosage.Utility.MapHelper.ToList``1(System.Object)">
            <summary>
            映射数据源中的数据到目标对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.MapHelper.ToSingle``1(System.Object)">
            <summary>
            映射数据源中的一行数据到目标对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Macrosage.Utility.MsCookie">
            <summary>
            Cookies操作
            </summary>
        </member>
        <member name="M:Macrosage.Utility.MsCookie.IsExists(System.String)">
            <summary>
            判断cookie是否存在
            </summary>
            <param name="strName">cookie名称</param>
        </member>
        <member name="M:Macrosage.Utility.MsCookie.IsExists(System.String,System.String)">
            <summary>
            判断cookie是否存在
            </summary>
            <param name="strName">cookie名称</param>
            <param name="strKey">键</param>
        </member>
        <member name="M:Macrosage.Utility.MsCookie.BaseWriteCookie(System.String,System.String,System.Boolean,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="cookieName">cookie名称</param>
            <param name="writeValue">写入值</param>
            <param name="writeValueIsBase64">是否Base64加密</param>
            <param name="writeValueIsIndex">是否以索引方式追加</param>
            <param name="writeValueKey">索引 key</param>
            <param name="isDomain">是否关联域</param>
            <param name="domain">关联域名称</param>
            <param name="isPath">是否传输虚拟路径</param>
            <param name="path">传输虚拟路径</param>
            <param name="expires">过期时间</param>
        </member>
        <member name="M:Macrosage.Utility.MsCookie.WriteCookie(System.String,System.String)">
            <summary>
            写入cookie[更改过-进程内]
            </summary>
            <param name="strName">cookie名称</param>
            <param name="strValue">值</param>
        </member>
        <member name="M:Macrosage.Utility.MsCookie.WriteCookie(System.String,System.String,System.String,System.String)">
            <summary>
            写入cookie[更改过-进程内]
            </summary>
            <param name="strName">cookie名称</param>
            <param name="strValue">值</param>
            <param name="path"></param>
            <param name="domain"></param>
        </member>
        <member name="M:Macrosage.Utility.MsCookie.WriteCookie(System.String,System.String,System.String)">
            <summary>
            写入cookie
            </summary>
            <param name="strName">cookie名称</param>
            <param name="strKey">键</param>
            <param name="strValue">值</param>
        </member>
        <member name="M:Macrosage.Utility.MsCookie.WriteCookie(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            写入cookie[更改过-进程内]
            </summary>
            <param name="strName">cookie名称</param>
            <param name="strKey">键</param>
            <param name="strValue">值</param>
            <param name="domain"></param>
            <param name="path"></param>
        </member>
        <member name="M:Macrosage.Utility.MsCookie.WriteCookie(System.String,System.String,System.String,System.Int32)">
            <summary>
            写入cookie
            </summary>
            <param name="strName">cookie名称</param>
            <param name="strKey">键</param>
            <param name="strValue">值</param>
            <param name="expires">cookie到期时间（分钟）</param>
        </member>
        <member name="M:Macrosage.Utility.MsCookie.WriteCookieNE(System.String,System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="strName"></param>
            <param name="strKey"></param>
            <param name="strValue"></param>
            <param name="expires"></param>
        </member>
        <member name="M:Macrosage.Utility.MsCookie.WriteCookie(System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            写入cookie[更改过-进程内]
            </summary>
            <param name="strName">cookie名称</param>
            <param name="strKey">键</param>
            <param name="strValue">值</param>
            <param name="expires">cookie到期时间（分钟）</param>
            <param name="domain"></param>
            <param name="path"></param>
        </member>
        <member name="M:Macrosage.Utility.MsCookie.WriteCookieNE(System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="strName"></param>
            <param name="strKey"></param>
            <param name="strValue"></param>
            <param name="expires"></param>
            <param name="domain"></param>
            <param name="path"></param>
        </member>
        <member name="M:Macrosage.Utility.MsCookie.WriteCookie(System.String,System.String,System.Int32)">
            <summary>
            写入cookie
            </summary>
            <param name="strName">cookie名称</param>
            <param name="strValue">值</param>
            <param name="expires">cookie到期时间（分钟）</param>
        </member>
        <member name="M:Macrosage.Utility.MsCookie.WriteCookieNE(System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="strName"></param>
            <param name="strValue"></param>
            <param name="expires"></param>
        </member>
        <member name="M:Macrosage.Utility.MsCookie.WriteCookie(System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            写入cookie[更改过-进程内]
            </summary>
            <param name="strName">cookie名称</param>
            <param name="strValue">值</param>
            <param name="expires">cookie到期时间（分钟）</param>
            <param name="domain"></param>
            <param name="path"></param>
        </member>
        <member name="M:Macrosage.Utility.MsCookie.WriteCookieNE(System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="strName"></param>
            <param name="strValue"></param>
            <param name="expires"></param>
            <param name="domain"></param>
            <param name="path"></param>
        </member>
        <member name="M:Macrosage.Utility.MsCookie.GetCookie(System.String)">
            <summary>
            获取cookie值[更改过]
            </summary>
            <param name="strName">cookie名称</param>
        </member>
        <member name="M:Macrosage.Utility.MsCookie.GetCookies(System.String)">
            <summary>
            获取cookie值
            </summary>
            <param name="strName">cookie名称</param>
        </member>
        <member name="M:Macrosage.Utility.MsCookie.GetCookie(System.String,System.String)">
            <summary>
            获取cookie值
            </summary>
            <param name="strName">cookie名称</param>
            <param name="strKey">键</param>
        </member>
        <member name="M:Macrosage.Utility.MsCookie.ClearCookie(System.String[])">
            <summary>
            清空cookie
            </summary>
            <param name="strName">cookie名称</param>
        </member>
        <member name="M:Macrosage.Utility.MsCookie.ClearCookieAll">
            <summary>
            清除所有Cookie
            </summary>
        </member>
        <member name="M:Macrosage.Utility.MsRegex.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.MsRegex.IsMatch(System.String,System.String)">
            <summary>
            正则验证基础方法
            </summary>
            <param name="input">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.MsRegex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            正则验证基础方法
            </summary>
            <param name="input">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项。</param>
            <returns></returns>
        </member>
        <member name="T:Macrosage.Utility.ResourceHelperBase">
            <summary>
            
            </summary>
        </member>
        <member name="F:Macrosage.Utility.ResourceHelperBase.AccountLayerDomain">
            <summary>
            客户端调用层服务域名
            </summary>
        </member>
        <member name="P:Macrosage.Utility.ResourceHelperBase.PublicJs">
            <summary>
            公共Js脚本、及插件地址
            </summary>
        </member>
        <member name="P:Macrosage.Utility.ResourceHelperBase.Img1Server">
            <summary>
            文件服务器地址
            </summary>
        </member>
        <member name="P:Macrosage.Utility.ResourceHelperBase.Img2Server">
            <summary>
            二维码图片服务器
            </summary>
        </member>
        <member name="P:Macrosage.Utility.ResourceHelperBase.WebApiServiceDomain">
            <summary>
            WebApi服务域名
            </summary>
        </member>
        <member name="P:Macrosage.Utility.ResourceHelperBase.CuctvPlayerDomain">
            <summary>
            视友网播放地址
            </summary>
        </member>
        <member name="P:Macrosage.Utility.ResourceHelperBase.PushServerDomain">
            <summary>
            消息推送服务域名
            </summary>
        </member>
        <member name="P:Macrosage.Utility.ResourceHelperBase.ImDomain">
            <summary>
            组织端聊天域名
            </summary>
        </member>
        <member name="P:Macrosage.Utility.ResourceHelperBase.GuruCVDomain">
            <summary>
            天才详历域名
            </summary>
        </member>
        <member name="P:Macrosage.Utility.ResourceHelperBase.GuruCVShowDomain">
            <summary>
            详历展示域名
            </summary>
        </member>
        <member name="P:Macrosage.Utility.ResourceHelperBase.RegWizardDomain">
            <summary>
            向导域名
            </summary>
        </member>
        <member name="P:Macrosage.Utility.ResourceHelperBase.ZparkDomain">
            <summary>
            中关村软件园人才服务平台域名
            </summary>
        </member>
        <member name="P:Macrosage.Utility.ResourceHelperBase.PortalDomain">
            <summary>
            门户顶级域名
            </summary>
        </member>
        <member name="P:Macrosage.Utility.ResourceHelperBase.CDN1Domain">
            <summary>
            CDN1静态资源域名
            </summary>
        </member>
        <member name="P:Macrosage.Utility.ResourceHelperBase.CDNDomain">
            <summary>
            CDN静态资源域名
            </summary>
        </member>
        <member name="P:Macrosage.Utility.ResourceHelperBase.ShortUrlDomain">
            <summary>
            短网址服务域名
            </summary>
        </member>
        <member name="P:Macrosage.Utility.ResourceHelperBase.GuruCVTopDomain">
            <summary>
            GuRuCv顶级域名
            </summary>
        </member>
        <member name="P:Macrosage.Utility.ResourceHelperBase.RmsDomain">
            <summary>
            RMS招聘系统域名
            </summary>
        </member>
        <member name="P:Macrosage.Utility.ResourceHelperBase.CePingDomain">
            <summary>
            测评系统域名
            </summary>
        </member>
        <member name="P:Macrosage.Utility.ResourceHelperBase.UEditorConfigJson">
            <summary>
            百度编辑器 config.json 配置路径
            </summary>
        </member>
        <member name="P:Macrosage.Utility.ResourceHelperBase.CookieTimeout">
            <summary>
            cookie 过期时间，单位分钟
            </summary>
        </member>
        <member name="P:Macrosage.Utility.ResourceHelperBase.CacheTime">
            <summary>
            cache 过期时间，单位分钟
            </summary>
        </member>
        <member name="P:Macrosage.Utility.ResourceHelperBase.ProjectId">
            <summary>
            平台标识Id
            </summary>
        </member>
        <member name="P:Macrosage.Utility.ResourceHelperBase.Copyright">
            <summary>
            网站备案信息
            </summary>
        </member>
        <member name="T:Macrosage.Utility.ValidateCode">
            <summary>   
            
            </summary>
        </member>
        <member name="M:Macrosage.Utility.ValidateCode.TwistImage(System.Drawing.Bitmap,System.Boolean,System.Double,System.Double)">
            <summary>
            正弦曲线Wave扭曲图片（Edit By 51aspx.com）
            </summary>
            <param name="srcBmp">图片路径</param>
            <param name="bXDir">如果扭曲则选择为True</param>
            <param name="nMultValue">波形的幅度倍数，越大扭曲的程度越高，一般为3</param>
            <param name="dPhase">波形的起始相位，取值区间[0-2*PI)</param>
            <returns></returns>
        </member>
        <member name="T:Macrosage.Utility.XmlHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Macrosage.Utility.XmlHelper.GetElementsFirstOrDefault(System.String)">
            <summary>
            默认返回第一个
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.XmlHelper.GetElements(System.String)">
            <summary>
            查询指定的
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.XmlHelper.CreateXmlDocument(System.String,System.String)">
            <summary>
            创建XML文档
            </summary>
            <param name="name">根节点名称</param>
            <param name="type">根节点的一个属性值</param>
            <returns></returns>
            moss中调用方法：创建的文件如果要存到moss的文档库中,则：
                     XmlDocument doc = XmlOperate.CreateXmlDocument("project", "T");
                       在此可嵌入增加子节点方法,如AddTaskNode(taskObj, ref doc); ..
                     byte[] fileContent = Encoding.UTF8.GetBytes(doc.OuterXml);
                     folder.Files.Add("name.xml", fileContent, true);
                     web.Update();
            .net中调用方法：写入文件中,则：
                     document = XmlOperate.CreateXmlDocument("sex", "sexy");
                     document.Save("c:/bookstore.xml");         
        </member>
        <member name="M:Macrosage.Utility.XmlHelper.AddNewNode1(System.Xml.XmlDocument@,System.String,System.String)">
            <summary>
            在根节点下增加子元素
            </summary>
            <param name="document"></param>
            <param name="nodeName"></param>
            <param name="type"></param>
            调用方法：
                 document = xmloper.CreateXmlDocument("animal", "carnivore");
                 XmlOperate.AddNewNode1(ref document, "carnivore", "high");
        </member>
        <member name="M:Macrosage.Utility.XmlHelper.AddNewNode2(System.Xml.XmlElement@,System.String,System.String)">
             <summary>
             在元素下增加子元素
             </summary>
             <param name="element"></param>
             <param name="nodeName"></param>
             <param name="type"></param>
             调用方法：
                   XmlDocument document = new XmlDocument();
                   先取到相应的元素,然后调用该方法在该元素下增加子元素
                   XmlElement root = (XmlElement)document.SelectSingleNode("//animal/third");
                   XmlOperate.AddNewNode2(ref root,"thaw","boost investor confidence");
            注意上面的"//animal/third"也可换成"workflow[@type='T' and @isSpecial='1']"这种形式用来获取带有相应属性的元素
        </member>
        <member name="M:Macrosage.Utility.XmlHelper.GetDesiredNode(System.String)">
            <summary>
            获取类型为制定值的一组节点
            </summary>
            <param name="type">类型值。E.G.workflow[@type='T' and @isSpecial='1']</param>
            <returns></returns>
            注意：返回的 XmlNodeList 类型是个类似于arraylist的类型,所以要得到它的值只能遍历
        </member>
        <member name="M:Macrosage.Utility.XmlHelper.GetXMLDocumentFromWebPage(System.String)">
            <summary>
            抓取网页上的xml文档赋值给XmlDocument对象
            </summary>
            <param name="url">网页的url（网页的内容必须是xml格式的）</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.XmlHelper.GetXMLFile(System.String)">
            <summary>
            获取服务器上指定文件的xml文件内容
            </summary>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.XmlHelper.GetDataSetByXml(System.String)">
            <summary>
            读取xml直接返回DataSet 
            </summary>
            <param name="strXmlPath">xml文件相对路径</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.XmlHelper.GetDataViewByXml(System.String,System.String,System.String)">
            <summary>
            读取Xml返回一个经排序或筛选后的DataView 
            </summary>
            <param name="strXmlPath">xml文件相对路径</param>
            <param name="strWhere">筛选条件,如："name = ＇kgdiwss＇"</param>
            <param name="strSort">排序条件,如："Id desc"</param>
            <returns></returns>        
        </member>
        <member name="M:Macrosage.Utility.XmlHelper.GetDataViewByXml(System.String,System.Int32,System.String,System.String)">
            <summary>
            读取Xml返回一个经排序或筛选后的DataView 
            </summary>
            <param name="strXmlPath">xml文件相对路径</param>
            <param name="i">查询是第几个表中的数据</param>
            <param name="strWhere">筛选条件,如："name = ＇kgdiwss＇"</param>
            <param name="strSort">排序条件,如："Id desc"</param>
            <returns></returns>        
        </member>
        <member name="M:Macrosage.Utility.XmlHelper.WriteXmlByDataSet(System.String,System.String[],System.String[])">
            
            向Xml文件插入一行数据 
            
            xml文件相对路径 
            要插入行的列名数组,如：string[] Columns = {"name","IsMarried"}; 
            要插入行每列的值数组,如：string[] ColumnValue={"明天去要饭","false"}; 
            成功返回true,否则返回false 
        </member>
        <member name="M:Macrosage.Utility.XmlHelper.UpdateXmlRow(System.String,System.String[],System.String[],System.String,System.String)">
            
            更行符合条件的一条Xml记录 
            
            XML文件路径 
            列名数组 
            列值数组 
            条件列名 
            条件列值 
            
        </member>
        <member name="M:Macrosage.Utility.XmlHelper.DeleteXmlRowByIndex(System.String,System.Int32)">
            
            通过删除DataSet中iDeleteRow这一行,然后重写Xml以实现删除指定行 
            
            
            要删除的行在DataSet中的Index值 
        </member>
        <member name="M:Macrosage.Utility.XmlHelper.DeleteXmlRows(System.String,System.String,System.String[])">
            
            删除strColumn列中值为ColumnValue的行 
            
            xml相对路径 
            列名 
            strColumn列中值为ColumnValue的行均会被删除 
            
        </member>
        <member name="M:Macrosage.Utility.XmlHelper.DeleteXmlAllRows(System.String)">
            
            删除所有行 
            
            XML路径 
            
        </member>
        <member name="P:Macrosage.Utility.XmlHelper.PrintTemplatePath">
            <summary>
            
            </summary>
        </member>
        <member name="P:Macrosage.Utility.XmlHelper.Root">
            <summary>
            
            </summary>
        </member>
        <member name="T:Macrosage.Utility.DbHelper.MacrosageSqlHelper">
            <summary>
            
            </summary>
        </member>
        <member name="F:Macrosage.Utility.DbHelper.MacrosageSqlHelper.ConnectionStringsCacheKey">
            <summary>
            连接字符串缓存集合
            </summary>
        </member>
        <member name="F:Macrosage.Utility.DbHelper.MacrosageSqlHelper.DefaultCommandTimeout">
            <summary>
            修改默认 DbCommand Timeout 的值，默认为30s，目前设置为20s
            </summary>
        </member>
        <member name="F:Macrosage.Utility.DbHelper.MacrosageSqlHelper.CacheNamePrdfixKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:Macrosage.Utility.DbHelper.MacrosageSqlHelper.CacheNameMakeKey">
            <summary>
            
            </summary>
        </member>
        <member name="M:Macrosage.Utility.DbHelper.MacrosageSqlHelper.GetConnectionString(System.String)">
            <summary>
            获取连接字符串
            </summary>
        </member>
        <member name="M:Macrosage.Utility.DbHelper.MacrosageSqlHelper.GetCacheName(System.String)">
            <summary>
            
            </summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.DbHelper.MacrosageSqlHelper.MakeParameter(System.String,System.Data.SqlDbType,System.Object,System.Nullable{System.Int32})">
            <summary>
            单个创建参数
            </summary>
            <param name="parameterName"></param>
            <param name="type"></param>
            <param name="value"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.DbHelper.MacrosageSqlHelper.MakeParameters``1(System.Data.SqlDbType,``0[])">
            <summary>
            批量创建同类型参数并自动缓存参数
            <para>Int BigInt --> @int{N} 如:@int0 @int1...</para>
            <para>NChar Char NVarChar VarChar NText Text --> @string{N} 如:@string0 @string1...</para>
            <para>UniqueIdentifier --> @guid{N} 如:@guid0 @guid1...</para>
            <para>DateTime Date Time DateTime2 DateTimeOffset --> @time{N} 如:@time0 @time1...</para>
            <para>Bit --> @bool{N} 如:@bool0 @bool1...</para>
            <para>Float Decimal Money SmallMoney --> @float{N} 如:@float0 @float1...</para>
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.DbHelper.MacrosageSqlHelper.MakeParameters``1(System.String,System.Data.SqlDbType,``0[])">
            <summary>
            批量创建同类型参数并自动缓存参数
            <para>Int BigInt --> @int{N} 如:@int0 @int1...</para>
            <para>NChar Char NVarChar VarChar NText Text --> @string{N} 如:@string0 @string1...</para>
            <para>UniqueIdentifier --> @guid{N} 如:@guid0 @guid1...</para>
            <para>DateTime Date Time DateTime2 DateTimeOffset --> @time{N} 如:@time0 @time1...</para>
            <para>Bit --> @bool{N} 如:@bool0 @bool1...</para>
            <para>Float Decimal Money SmallMoney --> @float{N} 如:@float0 @float1...</para>
            </summary>
            <param name="cacheName"></param>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.DbHelper.MacrosageSqlHelper.MakeParameters(System.String,System.Data.SqlDbType,System.Object,System.Nullable{System.Int32})">
            <summary>
            单个创建参数
            </summary>
            <param name="parameterName"></param>
            <param name="type"></param>
            <param name="value"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.DbHelper.MacrosageSqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.SqlClient.SqlTransaction)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="commandParameters"></param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.DbHelper.MacrosageSqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.SqlClient.SqlTransaction)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="commandParameters"></param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.DbHelper.MacrosageSqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.SqlClient.SqlTransaction)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="commandParameters"></param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.DbHelper.MacrosageSqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Object@,System.Int32,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.SqlClient.SqlTransaction)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="outputValue"></param>
            <param name="parametersOutputIndex"></param>
            <param name="commandParameters"></param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.DbHelper.MacrosageSqlHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.SqlClient.SqlTransaction)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="commandParameters"></param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.DbHelper.MacrosageSqlHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.String,System.Object@,System.Int32,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.SqlClient.SqlTransaction)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="outputValue"></param>
            <param name="parametersOutputIndex"></param>
            <param name="commandParameters"></param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.DbHelper.MacrosageSqlHelper.ExecuteDataTable(System.String,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.SqlClient.SqlTransaction)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="commandParameters"></param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.DbHelper.MacrosageSqlHelper.CacheParameters(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            
            </summary>
            <param name="cacheKey"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:Macrosage.Utility.DbHelper.MacrosageSqlHelper.GetCachedParameters(System.String)">
            <summary>
            
            </summary>
            <param name="cacheKey"></param>
            <returns></returns>
        </member>
        <member name="T:Macrosage.Utility.DbHelper.ParameterModel">
            <summary>
            
            </summary>
        </member>
        <member name="M:Macrosage.Utility.DbHelper.ParameterModel.#ctor(System.String,System.Data.SqlDbType,System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="parameterName"></param>
            <param name="parameterDbType"></param>
            <param name="size"></param>
            <param name="value"></param>
        </member>
        <member name="P:Macrosage.Utility.DbHelper.ParameterModel.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:Macrosage.Utility.DbHelper.ParameterModel.ParameterName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Macrosage.Utility.DbHelper.ParameterModel.DbType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Macrosage.Utility.DbHelper.ParameterModel.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EditorUpload.Config">
            <summary>
            
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EditorUpload.Handler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EditorUpload.HandlerExtension.ConfigHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EditorUpload.HandlerExtension.Crawler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EditorUpload.HandlerExtension.CrawlerHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EditorUpload.HandlerExtension.ListFileManager">
            <summary>
            
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EditorUpload.HandlerExtension.NotSupportedHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EditorUpload.HandlerExtension.UploadHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Macrosage.Utility.EditorUpload.HandlerExtension.UploadHandler.UploadifyCrop(System.Collections.Generic.List{System.String})">
            <summary>
            FLASH上传
            </summary>
        </member>
        <member name="M:Macrosage.Utility.EditorUpload.HandlerExtension.UploadHandler.UEditorController(Macrosage.Utility.Models.EditorUpload.UploadResultModel,System.Collections.Generic.List{System.String})">
            <summary>
            编辑器或通用上传
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EditorUpload.PathFormatter">
            <summary>
            
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EditorUpload.UEditorController">
            <summary>
            
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Enums.Push.MailBusiness">
            <summary>
            
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Enums.Push.SmsBusiness">
            <summary>
            
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Enums.Push.SendStatus">
            <summary>
            
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Enums.Push.ConcurrentDictionaryKey">
            <summary>
            
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Enums.Push.ApiStatus">
            <summary>
            
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Enums.Push.SmsTemplate">
            <summary>
            短信模板
            <para>短信内容小于65个字符，中、英文均计算为一个字符。</para>
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.Push.SmsTemplate.T1">
            <summary>
            【人物志】验证码：{0}。如非本人操作请忽略。
            <para>索引 0: 六位数字</para>
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.Push.SmsTemplate.T2">
            <summary>
            【人物志】{0}，您的{1}为您创建人物志，您可登录 {2} 修改。
            <para>索引 0: 小于20个字符</para>
            <para>索引 1: 小于20个字符</para>
            <para>索引 2: 小于40个字符</para>
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.Push.SmsTemplate.T3">
            <summary>
            【人物志】{0}，您的{1}邀请您加入{2}，点击 {3} 加入。
            <para>索引 0: 小于20个字符</para>
            <para>索引 1: 小于20个字符</para>
            <para>索引 2: 小于40个字符</para>
            <para>索引 3: 小于40个字符</para>
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.Push.SmsTemplate.T4">
            <summary>
            【人物志】{0}，您的{1}邀请您对Ta{2}
            <para>索引 0: 小于20个字符</para>
            <para>索引 1: 小于20个字符</para>
            <para>索引 2: 小于40个字符</para>
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.Push.SmsTemplate.T5">
            <summary>
            【人物志】注册成功，账号：{0}，密码：{1}，登录地址： {2}
            <para>索引 0: 小于20个字符</para>
            <para>索引 1: 小于20个字符</para>
            <para>索引 2: 小于40个字符</para>
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.Push.SmsTemplate.T6">
            <summary>
            【人物志】尊敬的管理员，{0}提交了{1}申请，请尽快处理。
            <para>索引 0: 小于40个字符</para>
            <para>索引 1: 小于20个字符</para>
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.Push.SmsTemplate.T7">
            <summary>
            【人物志】{0}给您发送了一个重要通知：{1}，请查阅： {2}
            <para>索引 0: 显示发送者名字（小于5个字符）</para>
            <para>索引 1: 显示通知的标题（70 - 22 - 索引0 - 索引2）</para>
            <para>索引 2: 短网址链接（小于20个字）</para>
            <para>固定文字长度22个字</para>
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Enums.Push.MailTemplate">
            <summary>
            邮件模板
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.Push.MailTemplate.T1">
            <summary>
            详历用户注册时使用的邮件模版
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.Push.MailTemplate.T2">
            <summary>
            详历用户找回密码时使用的邮件模版
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.Push.MailTemplate.T3">
            <summary>
            邮箱激活码
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.Push.MailTemplate.T4">
            <summary>
            圈子邀请邮件
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.Push.MailTemplate.T5">
            <summary>
            评论邀请邮件
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.Push.MailTemplate.T6">
            <summary>
            爆料邀请邮件
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Enums.Month">
            <summary>
            月份
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.Month.Jan">
            <summary>
            一月 January
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.Month.Feb">
            <summary>
            二月 February
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.Month.Mar">
            <summary>
            三月 March
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.Month.Apr">
            <summary>
            四月 April
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.Month.May">
            <summary>
            五月 May
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.Month.Jun">
            <summary>
            六月 June
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.Month.Jul">
            <summary>
            七月 July
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.Month.Aug">
            <summary>
            八月 August
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.Month.Sep">
            <summary>
            九月September
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.Month.Oct">
            <summary>
            十月 October
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.Month.Nov">
            <summary>
            十一月November
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.Month.Dec">
            <summary>
            十二月December
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Enums.TimeFormat">
            <summary>
            日期与时间格式
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.TimeFormat.精简短日期">
            <summary>
            yy/M/d
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.TimeFormat.标准短日期">
            <summary>
            yyyy/MM/dd
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.TimeFormat.标准短日期旧版">
            <summary>
            yyyy-MM-dd
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.TimeFormat.精简长日期">
            <summary>
            yy年M月d日
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.TimeFormat.标准长日期">
            <summary>
            yyyy年MM月dd日
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.TimeFormat.精简短日期时间">
            <summary>
            yy-M-d H:mm
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.TimeFormat.标准短日期时间">
            <summary>
            yyyy-MM-dd HH:mm
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.TimeFormat.精简长日期时间">
            <summary>
            yy年M月d日 H时m分
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.TimeFormat.标准长日期时间">
            <summary>
            yyyy年MM月dd日 HH时mm分
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.TimeFormat.详细时间">
            <summary>
            yyyy-MM-dd HH:mm:ss
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Enums.UploadFileFormat">
            <summary>
            上传文件格式类型
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.UploadFileFormat.FileExtensionType">
            <summary>
            上传文件后缀名
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Enums.UploadFileFormat.FileContentType">
            <summary>
            上传文件 ContentType 格式
            </summary>
        </member>
        <member name="T:Macrosage.Utility.ConvertMethod">
            <summary>
            
            </summary>
        </member>
        <member name="M:Macrosage.Utility.ConvertMethod.ToBool(System.Object)">
            <summary>
            转换为bool
            </summary>
            <param name="value">要转换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertMethod.ToBool(System.String)">
            <summary>
            转换为bool
            </summary>
            <param name="value">要转换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertMethod.ToByte(System.Object,System.Byte)">
            <summary>
            转换为byte
            </summary>
            <param name="value">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertMethod.ToByte(System.String,System.Byte)">
            <summary>
            转换为byte
            </summary>
            <param name="value">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertMethod.ToDateTime(System.Object,System.String)">
            <summary>
            日期转制定格式
            </summary>
            <param name="value"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertMethod.ToDateTime(System.Object)">
            <summary>
            转换DateTime
            <para>失败时返回1900-01-01</para>
            </summary>
            <param name="value">被转换string</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertMethod.ToDateTime(System.String)">
            <summary>
            转换DateTime
            <para>失败时返回1900-01-01</para>
            </summary>
            <param name="value">被转换string</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertMethod.ToDateTime(System.String,System.DateTime)">
            <summary>
            转换DateTime
            </summary>
            <param name="value">要转换的字符串</param>
            <param name="defValue">请自定义转换失败的值</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertMethod.ToUnixTimestamp(System.DateTime)">
            <summary>
            DateTime时间格式转换为Unix时间戳格式
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertMethod.ToDateTimeByUnix(System.Int64)">
            <summary>
            将Unix时间戳转换为DateTime类型时间
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertMethod.ToDateTimeByGMT(System.String,System.String)">
            <summary>
            有时区的GMT时间转换为DateTime
            <para>如：新浪微博等</para>
            </summary>
            <param name="value">包含要转换的日期和时间的字符串</param>
            <param name="format">用于定义所需的 s 格式的格式说明符</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertMethod.ToDecimal(System.Object,System.Decimal)">
            <summary>
            转换为decimal
            </summary>
            <param name="value">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertMethod.ToDecimal(System.String,System.Decimal)">
            <summary>
            转换为decimal
            </summary>
            <param name="value">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertMethod.ToDouble(System.Object,System.Double)">
            <summary>
            转换为Double
            </summary>
            <param name="value">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertMethod.ToDouble(System.String,System.Double)">
            <summary>
            转换为Double
            </summary>
            <param name="value">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertMethod.ToGuid(System.Object)">
            <summary>
            转换Guid
            <para>失败是返回Guid.Empty</para>
            </summary>
            <param name="value">要转换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertMethod.ToGuid(System.String)">
            <summary>
            转换Guid
            <para>失败是返回Guid.Empty</para>
            </summary>
            <param name="value">要转换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertMethod.ToInt16(System.Object,System.Int16)">
            <summary>
            转换为Int16
            </summary>
            <param name="value">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertMethod.ToInt16(System.String,System.Int16)">
            <summary>
            转换为Int16
            </summary>
            <param name="value">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertMethod.ToInt32(System.Object,System.Int32)">
            <summary>
            转换为int
            </summary>
            <param name="value">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertMethod.ToInt32(System.String,System.Int32)">
            <summary>
            转换为int
            </summary>
            <param name="value">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertMethod.ToInt64(System.Object,System.Int64)">
            <summary>
            转换为long
            </summary>
            <param name="value">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertMethod.ToInt64(System.String,System.Int64)">
            <summary>
            转换为long
            </summary>
            <param name="value">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertMethod.ToFloat(System.Object,System.Single)">
            <summary>
            转换为folat
            </summary>
            <param name="value">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertMethod.ToFloat(System.String,System.Single)">
            <summary>
            转换为folat
            </summary>
            <param name="value">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertMethod.ToType``1(System.Object)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertMethod.ToEnumItem``1(System.Int32)">
            <summary>
            根据枚举值获得枚举对应项
            <para>注意：若不属于枚举项则返回 0</para>
            </summary>
            <typeparam name="T">枚举</typeparam>
            <param name="value">枚举值</param>
            <returns></returns>
        </member>
        <member name="T:Macrosage.Utility.ConvertReaderMethod">
            <summary>
            DataReader转换到类型
            </summary>
        </member>
        <member name="M:Macrosage.Utility.ConvertReaderMethod.ToDataReaderInt64(System.Int32,System.Data.Common.DbDataReader)">
            <summary>
            DataReader转long
            </summary>
            <param name="ordinal"></param>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertReaderMethod.ToDataReaderInt32(System.Int32,System.Data.Common.DbDataReader)">
            <summary>
            DataReader转int
            </summary>
            <param name="ordinal">DataReader索引位置</param>
            <param name="dr">DataReader</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertReaderMethod.ToDataReaderInt16(System.Int32,System.Data.Common.DbDataReader)">
            <summary>
            DataReader转Int16
            </summary>
            <param name="ordinal">DataReader索引位置</param>
            <param name="dr">DataReader</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertReaderMethod.ToDataReaderString(System.Int32,System.Data.Common.DbDataReader)">
            <summary>
            DataReader转string
            </summary>
            <param name="ordinal">DataReader索引位置</param>
            <param name="dr">DataReader</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertReaderMethod.ToDataReaderBoolean(System.Int32,System.Data.Common.DbDataReader)">
            <summary>
            DataReader转bool
            </summary>
            <param name="ordinal">DataReader索引位置</param>
            <param name="dr">DataReader</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertReaderMethod.ToDataReaderGuid(System.Int32,System.Data.Common.DbDataReader)">
            <summary>
            DataReader转Guid
            </summary>
            <param name="ordinal">DataReader索引位置</param>
            <param name="dr">DataReader</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertReaderMethod.ToDataReaderDateTime(System.Int32,System.Data.Common.DbDataReader)">
            <summary>
            DataReader转DataTime
            </summary>
            <param name="ordinal">DataReader索引位置</param>
            <param name="dr">DataReader</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertReaderMethod.ToDataReaderDecimal(System.Int32,System.Data.Common.DbDataReader)">
            <summary>
            DataReader转decimal
            </summary>
            <param name="ordinal"></param>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertReaderMethod.ToDataReaderByte(System.Int32,System.Data.Common.DbDataReader)">
            <summary>
            DataReader转byte
            </summary>
            <param name="ordinal"></param>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertReaderMethod.ToDataReaderSingle(System.Int32,System.Data.Common.DbDataReader)">
            <summary>
            DataReader转Float
            </summary>
            <param name="ordinal"></param>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ConvertReaderMethod.ToDataReaderDouble(System.Int32,System.Data.Common.DbDataReader)">
            <summary>
            DataReader转Double
            </summary>
            <param name="ordinal"></param>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="T:Macrosage.Utility.HttpMethod">
            <summary>
            获取 HTTP 请求对象值 （待优化）
            </summary>
        </member>
        <member name="M:Macrosage.Utility.HttpMethod.ConvertJavaScriptEncodeURI(System.String,System.Text.Encoding)">
            <summary>
            将JS的encodeURI解码
            <para>value 为空时则返回 null</para>
            </summary>
            <param name="value"></param>
            <param name="encoding">默认为UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.HttpMethod.Forms(System.Web.HttpContext,System.String,System.Boolean)">
            <summary>
            获取 POST 提交方式值
            <para>value 为空时则返回 null</para>
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="isEditor">是否需要将 js encodeURI 进行解码</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.HttpMethod.Forms(System.String,System.Boolean)">
            <summary>
            获取 POST 提交方式值
            <para>value 为空时则返回 null</para>
            </summary>
            <param name="value"></param>
            <param name="isEditor">是否需要将 js encodeURI 进行解码</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.HttpMethod.QueryStrings(System.Web.HttpContext,System.String,System.Boolean)">
            <summary>
            获取 GET 提交方式值
            <para>value 为空时则返回 null</para>
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="isEditor">是否需要将 js encodeURI 进行解码</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.HttpMethod.QueryStrings(System.String,System.Boolean)">
            <summary>
            获取 GET 提交方式值
            <para>value 为空时则返回 null</para>
            </summary>
            <param name="value"></param>
            <param name="isEditor">是否需要将 js encodeURI 进行解码</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.HttpMethod.HtmlEncode(System.String)">
            <summary>
            将字符串转换为 HTML 编码的字符串。
            <para>value 为空时则返回 null</para>
            </summary>
            <param name="values">要编码的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.HttpMethod.HtmlDecode(System.String)">
            <summary>
            将已经为 HTTP 传输进行过 HTML 编码的字符串转换为已解码的字符串。
            <para>value 为空时则返回 null</para>
            </summary>
            <param name="values">要解码的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.HttpMethod.UrlEncode(System.String)">
            <summary>
            对 URL 字符串进行编码。
            <para>value 为空时则返回 null</para>
            </summary>
            <param name="values">要编码的文本</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.HttpMethod.UrlDecode(System.String)">
            <summary>
            将已经为在 URL 中传输而编码的字符串转换为解码的字符串。
            <para>value 为空时则返回 null</para>
            </summary>
            <param name="values">要解码的字符串</param>
            <returns></returns>
        </member>
        <member name="T:Macrosage.Utility.ImageFormatMethod">
            <summary>
            
            </summary>
        </member>
        <member name="T:Macrosage.Utility.InitializeDefaultValue">
            <summary>
            默认值初始化设置
            </summary>
        </member>
        <member name="F:Macrosage.Utility.InitializeDefaultValue.DefaultJson">
            <summary>
            空json 返回 ""
            </summary>
        </member>
        <member name="F:Macrosage.Utility.InitializeDefaultValue.DefaultString">
            <summary>
            空字符串定义，默认值 string.Empty
            </summary>
        </member>
        <member name="F:Macrosage.Utility.InitializeDefaultValue.DefaultInt32">
            <summary>
            int32 类型，默认值 0
            </summary>
        </member>
        <member name="F:Macrosage.Utility.InitializeDefaultValue.DefaultInt16">
            <summary>
            int16 类型，默认值 0
            </summary>
        </member>
        <member name="F:Macrosage.Utility.InitializeDefaultValue.DefaultInt64">
            <summary>
            int64 类型，默认值 0
            </summary>
        </member>
        <member name="F:Macrosage.Utility.InitializeDefaultValue.DefaultByte">
            <summary>
            Byte类型，默认值 0
            </summary>
        </member>
        <member name="F:Macrosage.Utility.InitializeDefaultValue.DefaultFloat">
            <summary>
            单精度浮点，默认值 0
            </summary>
        </member>
        <member name="F:Macrosage.Utility.InitializeDefaultValue.DefaultDouble">
            <summary>
            双精度浮点，默认值 0
            </summary>
        </member>
        <member name="F:Macrosage.Utility.InitializeDefaultValue.DefaultDecimal">
            <summary>
            十进制数，默认值 0
            </summary>
        </member>
        <member name="F:Macrosage.Utility.InitializeDefaultValue.DefaultGuid">
            <summary>
            Guid类型默认值 Guid.Empty
            </summary>
        </member>
        <member name="F:Macrosage.Utility.InitializeDefaultValue.DefaultBoolean">
            <summary>
            bool类型默认值 false
            </summary>
        </member>
        <member name="F:Macrosage.Utility.InitializeDefaultValue.DefaultTime">
            <summary>
            DateTime类型默认值 1900-01-01
            </summary>
        </member>
        <member name="T:Macrosage.Utility.SystemExtensionMethod">
            <summary>
            系统方法扩展
            </summary>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.ToStrings(System.Object,System.String)">
            <summary>
            与ToString一样区别在于
            <para>为空或DBNull.Value，则返回 string.Empty</para>
            <para>不为空进行.ToString().Trim()操作</para>
            </summary>
            <param name="value"></param>
            <param name="defValue"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.ToStrings(System.Data.DataTable,System.Int32,System.Int32,System.String)">
            <summary>
            与ToString一样区别在于【用于 DataTable】
            <para>为空或DBNull.Value，则返回 string.Empty</para>
            <para>不为空进行.ToString().Trim()操作</para>
            </summary>
            <param name="dt"> </param>
            <param name="rowIndex"> </param>
            <param name="columnIndex"> </param>
            <param name="defValue"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.ToStrings(System.Data.DataTable,System.Int32,System.String,System.String)">
            <summary>
            与ToString一样区别在于【用于 DataTable】
            <para>为空或DBNull.Value，则返回 string.Empty</para>
            <para>不为空进行.ToString().Trim()操作</para>
            </summary>
            <param name="dt"></param>
            <param name="rowIndex"></param>
            <param name="columnName"></param>
            <param name="defValue"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.ToStrings(System.Data.DataRow[],System.Int32,System.Int32,System.String)">
            <summary>
            与ToString一样区别在于【用于 DataRow[]】
            <para>为空或DBNull.Value，则返回 string.Empty</para>
            <para>不为空进行.ToString().Trim()操作</para>
            </summary>
            <param name="dr"></param>
            <param name="rowIndex"></param>
            <param name="columnIndex"></param>
            <param name="defValue"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.ToStrings(System.Data.DataRow[],System.Int32,System.String,System.String)">
            <summary>
            与ToString一样区别在于【用于 DataRow[]】
            <para>为空或DBNull.Value，则返回 string.Empty</para>
            <para>不为空进行.ToString().Trim()操作</para>
            </summary>
            <param name="dr"></param>
            <param name="rowIndex"></param>
            <param name="columnName"></param>
            <param name="defValue"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.ToStrings(System.Data.DataRow,System.Int32,System.String)">
            <summary>
            与ToString一样区别在于【用于 DataRow】
            <para>为空或DBNull.Value，则返回 string.Empty</para>
            <para>不为空进行.ToString().Trim()操作</para>
            </summary>
            <param name="dr"></param>
            <param name="columnIndex"></param>
            <param name="defValue"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.ToStrings(System.Data.DataRow,System.String,System.String)">
            <summary>
            与ToString一样区别在于【用于 DataRow】
            <para>为空或DBNull.Value，则返回 string.Empty</para>
            <para>不为空进行.ToString().Trim()操作</para>
            </summary>
            <param name="dr"></param>
            <param name="column"></param>
            <param name="defValue"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.Append(System.Object,System.Object)">
            <summary>
            字符串拼接对象
            </summary>
            <param name="value0">当前字符串</param>
            <param name="value1">要拼接的对象</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.Append(System.Object,System.Object[])">
            <summary>
            字符串拼接对象
            </summary>
            <param name="value0">当前字符串</param>
            <param name="values">要拼接的多个对象</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.ReplaceToNull(System.String,System.String[])">
            <summary>
            将多个指定字符替换成空字符串
            <para>value 为空时则返回 null</para>
            </summary>
            <param name="value">当前字符串</param>
            <param name="oldValue">要被替换的字符串数组。</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.Replace(System.String,System.String[],System.String)">
            <summary>
            将多个指定字符替换成指定字符
            <para>value 为空时则返回 null</para>
            </summary>
            <param name="value">当前字符串</param>
            <param name="oldValue">要被替换的字符串数组。</param>
            <param name="newValue">要替换出现的所有 oldValue 的字符串。</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.Trims(System.String)">
            <summary>
            移除所有前导空白字符和尾部空白字符。
            <para>value 为空时则返回 null</para>
            </summary>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.SplitByIndex(System.String,System.String,System.Int32)">
            <summary>
            根据指定拆分符拆分字符串（不移除空项），并返回指定索引位置的内容
            <para>value 为空或截取索引出错时则返回 null</para>
            </summary>
            <param name="value">字符串</param>
            <param name="separator">拆分符</param>
            <param name="index">数组中的索引位置</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.Substrings(System.String,System.Int32,System.String)">
            <summary>
            截取字符串
            <para>区分中英文字符长度，中文按1:2，英文按1:1 计算长度</para>
            <para>value 为空时则返回 null</para>
            </summary>
            <param name="value">字符串</param>
            <param name="length">截取长度（区分中、英）</param>
            <param name="appendWord">附加内容</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.ToSBC(System.String)">
            <summary>
            转全角的函数(SBC case)
            <para>value 为空时则返回 null</para>
            </summary>
            <param name="value"></param>
            <returns>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </returns>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.ToDBC(System.String)">
            <summary>
            转半角的函数(DBC case)
            <para>value 为空时则返回 null</para>
            </summary>
            <param name="value"></param>
            <returns>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </returns>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.ToDbValue(System.Object)">
            <summary>
            判断对象是否为null
            <para>是：返回 DBNull.Value</para>
            <para>否：返回当前对象</para>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.ToTitleCase(System.String)">
            <summary>
            将指定的字符串转换为词首字母大写
            <para>codec_long_name --> Codec_Long_Name</para>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.Split(System.String,System.String)">
            <summary>
            根据指定拆分符拆分字符串（并去除空项）
            <para>value 为空时则返回 null</para>
            </summary>
            <param name="value">字符串</param>
            <param name="separator">拆分符</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.Split(System.String,System.String[])">
            <summary>
            根据指定拆分符拆分字符串（并去除空项）
            <para>value 为空时则返回 null</para>
            </summary>
            <param name="value">字符串</param>
            <param name="separator">拆分符</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.SplitByRegex(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            正则表达式：根据指定拆分符拆分字符串（并去除空项）
            <para>value 为空时则返回 null</para>
            </summary>
            <param name="value">字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项，默认：忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.SplitByLength(System.String,System.Int32)">
            <summary>
            按指定字符长度进行拆分字符串
            </summary>
            <param name="value">字符串</param>
            <param name="segmentLength">指定长度，如：按每3个字符串进行拆分数组</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.ToStringArray(System.String,System.String,System.String[])">
            <summary>
            转换string[]
            </summary>
            <param name="value">要转换的字符串</param>
            <param name="separator">拆分标识</param>
            <param name="defValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.ToIntArray(System.String,System.String,System.Int32[])">
            <summary>
            转换int[]
            </summary>
            <param name="value">要转换的字符串</param>
            <param name="separator">拆分标识</param>
            <param name="defValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.ToDictionary(System.Enum)">
            <summary>
            枚举转字典集合
            </summary>
            <param name="em"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.ToDictionary(System.Data.DataTable)">
            <summary>
            DataTable 转字典集合（DataTable 的第一列为 KEY，第二列为 Value）
            <para>value 为空时则返回 null</para>
            <para>如果table 只有1列，key为索引，value为第一列</para>
            </summary>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.ToDictionary(System.Data.DataTable,System.String,System.String)">
            <summary>
            DataTable 转字典集合（可自定义列）
            <para>value 为空时则返回 null</para>
            </summary>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.ToDictionaryBySql(System.String)">
            <summary>
            转换为字典集合
            <para>分割符为逗号</para>
            </summary>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.ToListByRegex(System.String,System.String)">
            <summary>
            根据正则表达式将字符串拆分成集合
            </summary>
            <param name="value">要匹配的字符串</param>
            <param name="pattern">匹配规则</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.Arrange``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            整理返回集合
            <para>如果参数 list 数量大于 length，按 length 返回 list 内容</para>
            <para>如果参数 list 数量小与 length，按 length 返回 list 内容，不足部分按 T 默认值进行返回</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.GetNowTime(Macrosage.Utility.Enums.TimeFormat)">
            <summary>
            得到程序当前时间
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.GetNowTime(System.String)">
            <summary>
            得到程序当前时间
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.SystemExtensionMethod.GetValue``1(System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object},System.String,``0)">
            <summary>
            获取配置appSettings[name="<paramref name="key"/>"]的值。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyValues"></param>
            <param name="key"></param>
            <param name="defValue"></param>
            <returns></returns>
        </member>
        <member name="T:Macrosage.Utility.ValidationMethod">
            <summary>
            类型是否为空判断
            </summary>
        </member>
        <member name="M:Macrosage.Utility.ValidationMethod.IsNull(System.String)">
            <summary>
            判断字符是否为空
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ValidationMethod.IsNull(System.Object)">
            <summary>
            判断 object 是否为 null 或 DBNull
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ValidationMethod.IsNull(System.Data.DataTable)">
            <summary>
            判断 DataTable 是否为空
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ValidationMethod.IsNull(System.Data.DataRowCollection)">
            <summary>
            判断 DataRowCollection 是否为空
            </summary>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ValidationMethod.IsNull(System.Data.DataRow[])">
            <summary>
            判断 DataRow[] 是否为空
            </summary>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ValidationMethod.IsNull(System.Data.DataRow)">
            <summary>
            判断 DataRow 是否为空
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ValidationMethod.IsNull(System.Data.DataSet)">
            <summary>
            判断DataSet是否为空
            </summary>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ValidationMethod.IsNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            判断 List&lt;T&gt; 是否为空
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ValidationMethod.IsNull``1(``0)">
            <summary>
            判断泛型是否为null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ValidationMethod.IsNotNull(System.String)">
            <summary>
            判断字符是否为空
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ValidationMethod.IsNotNull(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ValidationMethod.IsNotNull(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ValidationMethod.IsNotNull(System.Data.DataRow[])">
            <summary>
            
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ValidationMethod.IsNotNull(System.Data.DataSet)">
            <summary>
            
            </summary>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ValidationMethod.IsNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.ValidationMethod.IsNotNull``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:Macrosage.Utility.SystemError">
            <summary>
            
            </summary>
        </member>
        <member name="T:Macrosage.Utility.SystemError.StaticCode">
            <summary>
            系统消息编码 [待完善]
            </summary>
        </member>
        <member name="F:Macrosage.Utility.SystemError.StaticCode.DefaultMessage">
            <summary>
            默认值
            <para>code: 0</para>
            </summary>
        </member>
        <member name="F:Macrosage.Utility.SystemError.StaticCode.Success">
            <summary>
            所有成功
            <para>code: 10000</para>
            </summary>
        </member>
        <member name="F:Macrosage.Utility.SystemError.StaticCode.ServerBusy">
            <summary>
            服务器压力山大, 暂时无法为您提供服务, 请稍后再试！
            <para>code: 11001</para>
            </summary>
        </member>
        <member name="F:Macrosage.Utility.SystemError.StaticCode.ProgramException">
            <summary>
            程序发生异常
            <para>code: 13001</para>
            </summary>
        </member>
        <member name="F:Macrosage.Utility.SystemError.StaticCode.DataException">
            <summary>
            数据操作异常
            <para>code: 13002</para>
            </summary>
        </member>
        <member name="F:Macrosage.Utility.SystemError.StaticCode.Failure">
            <summary>
            该操作执行失败
            <para>code: 14002</para>
            </summary>
        </member>
        <member name="F:Macrosage.Utility.SystemError.StaticCode.LoginFailure">
            <summary>
            登录失败
            <para>code: 14007</para>
            </summary>
        </member>
        <member name="T:Macrosage.Utility.SystemError.DbMessage">
            <summary>
            [11xxx] 数据库异常信息
            </summary>
        </member>
        <member name="F:Macrosage.Utility.SystemError.DbMessage.ServerBusy">
            <summary>
            服务器压力山大, 暂时无法为您提供服务, 请稍后再试！
            <para>code: 11001</para>
            </summary>
        </member>
        <member name="F:Macrosage.Utility.SystemError.DbMessage.DbException">
            <summary>
            今天数据库有点吃不消了，请稍后再试试！
            <para>code: 11002</para>
            </summary>
        </member>
        <member name="T:Macrosage.Utility.SystemError.ApplicationExceptionMessage">
            <summary>
            [13xxx] 程序集错误消息
            </summary>
        </member>
        <member name="F:Macrosage.Utility.SystemError.ApplicationExceptionMessage.程序发生异常">
            <summary>
            code: 13001
            </summary>
        </member>
        <member name="F:Macrosage.Utility.SystemError.ApplicationExceptionMessage.数据操作异常">
            <summary>
            code: 13002
            </summary>
        </member>
        <member name="F:Macrosage.Utility.SystemError.ApplicationExceptionMessage.填写内容长度过长">
            <summary>
            code: 13003
            </summary>
        </member>
        <member name="T:Macrosage.Utility.SystemError.ApplicationFailureMessage">
            <summary>
            [14xxx] 程序内失败/错误 [如：影响行数为0 或 违背指定逻辑]
            </summary>
        </member>
        <member name="T:Macrosage.Utility.SystemError.SmsMessageCode">
            <summary>
            [900xx] 短信错误消息信息
            </summary>
        </member>
        <member name="T:Macrosage.Utility.SystemError.MailMessageCode">
            <summary>
            [901xx] 邮件错误消息信息
            </summary>
        </member>
        <member name="T:Macrosage.Utility.SystemError.CacheMessage">
            <summary>
            [909xx] 缓存错误消息
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Imaging.AnchorLocation">
            <summary>
            矩形选区停靠位置
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.AnchorLocation.LeftTop">
            <summary>
            左上
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.AnchorLocation.MiddleTop">
            <summary>
            中上
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.AnchorLocation.RightTop">
            <summary>
            右上
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.AnchorLocation.LeftMiddle">
            <summary>
            左中部
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.AnchorLocation.Middle">
            <summary>
            居中
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.AnchorLocation.RightMiddle">
            <summary>
            右中部
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.AnchorLocation.LeftBottom">
            <summary>
            左下部
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.AnchorLocation.MiddleBottom">
            <summary>
            中下部
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.AnchorLocation.RightBottom">
            <summary>
            右下
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Imaging.CropFilter">
            <summary>
            用于裁剪的图片处理过滤器
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Imaging.IImageFilter">
            <summary>
            图像处理过滤器接口
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Imaging.IImageFilter.Process(System.Drawing.Image,System.Boolean@)">
            <summary>
            对传入的inputImage进行处理
            </summary>
            <param name="inputImage">待处理的图像文件</param>
            <param name="isProcessed">是否被处理，否则返回原图</param>
            <returns>返回处理后的图像文件</returns>
        </member>
        <member name="M:Macrosage.Utility.Imaging.CropFilter.#ctor(System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="cropArea">原图待裁剪的矩形选区</param>
            <param name="descWidth">裁剪后图像的宽度</param>
            <param name="descHeight">裁剪后图像的高度</param>
        </member>
        <member name="M:Macrosage.Utility.Imaging.CropFilter.Process(System.Drawing.Image,System.Boolean@)">
            <summary>
            对传入的inputImage进行裁剪
            </summary>
            <param name="inputImage">待处理的图像文件</param>
            <param name="isProcessed">是否被处理，否则返回原图</param>
            <returns>返回处理后的图像文件</returns>
        </member>
        <member name="P:Macrosage.Utility.Imaging.CropFilter.TargetSize">
            <summary>
            期望图像尺寸
            </summary>
            <value>The size of the target.</value>
        </member>
        <member name="P:Macrosage.Utility.Imaging.CropFilter.CropArea">
            <summary>
            原图待裁剪的矩形选区
            </summary>
            <value>The crop area.</value>
        </member>
        <member name="P:Macrosage.Utility.Imaging.CropFilter.InterpoliationMode">
            <summary>
            缩放或旋转图像时使用的算法
            </summary>
            <value>The interpoliation mode.</value>
        </member>
        <member name="P:Macrosage.Utility.Imaging.CropFilter.SmoothingMode">
            <summary>
            缩放或旋转图像时使用的算法
            </summary>
            <value>The smoothing mode.</value>
        </member>
        <member name="T:Macrosage.Utility.Imaging.EXIFMetaDataService">
            <summary>
            照片信息处理
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.EXIFMetaDataService.EnabledEXIFIds">
            <summary>
            The enabled EXIF ids
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Imaging.EXIFMetaDataService.Read(System.IO.Stream)">
            <summary>
            读取图像的EXIF信息
            </summary>
            <param name="imageStream">图像文件流</param>
            <returns>返回读取的EXIF信息字典（key=PropertyItem.Id）</returns>
            <exception cref="T:System.ArgumentException">imageStream isn't validate;imageStream</exception>
        </member>
        <member name="M:Macrosage.Utility.Imaging.EXIFMetaDataService.Read(System.IO.Stream,System.Int32)">
            <summary>
            读取图像的EXIF信息
            </summary>
            <param name="imageStream">图像文件流</param>
            <param name="propId">16进制元数据Id</param>
            <returns>返回根据propId读取的EXIF信息</returns>
            <exception cref="T:System.ArgumentException">imageStream isn't validate;imageStream</exception>
        </member>
        <member name="M:Macrosage.Utility.Imaging.EXIFMetaDataService.GetValueOfType(System.Drawing.Imaging.PropertyItem)">
            <summary>
            以元数据值的对应类型来获取值
            </summary>
            <param name="propItem">要获取信息的图像文件元数据属性</param>
            <returns>System.string.</returns>
        </member>
        <member name="M:Macrosage.Utility.Imaging.EXIFMetaDataService.GetValueOfType1(System.Byte[])">
            <summary>
            获取字节值
            </summary>
            <param name="value">元数据的值</param>
            <returns>System.string.</returns>
        </member>
        <member name="M:Macrosage.Utility.Imaging.EXIFMetaDataService.GetValueOfType2(System.Byte[])">
            <summary>
            获取空终止 ASCII 字符串值
            </summary>
            <param name="value">元数据的值</param>
            <returns>System.string.</returns>
        </member>
        <member name="M:Macrosage.Utility.Imaging.EXIFMetaDataService.GetValueOfType3(System.Byte[])">
            <summary>
            获取无符号的16 位整型值
            </summary>
            <param name="value">元数据的值</param>
            <returns>System.string.</returns>
        </member>
        <member name="M:Macrosage.Utility.Imaging.EXIFMetaDataService.GetValueOfType4(System.Byte[])">
            <summary>
            获取无符号的32 位整型值
            </summary>
            <param name="value">元数据的值</param>
            <returns>System.string.</returns>
        </member>
        <member name="M:Macrosage.Utility.Imaging.EXIFMetaDataService.GetValueOfType5(System.Byte[])">
            <summary>
            获取无符号的32位整型对数值
            </summary>
            <param name="value">元数据的值</param>
            <returns>System.string.</returns>
            <remarks>每一对都表示一个分数；第一个整数是分子，第二个整数是分母</remarks>
        </member>
        <member name="M:Macrosage.Utility.Imaging.EXIFMetaDataService.GetValueOfType7(System.Byte[],System.Int32)">
            <summary>
            获取有符号的32 位整型数值
            </summary>
            <param name="value">元数据的值</param>
            <param name="propId">元数据Id</param>
            <returns>System.string.</returns>
        </member>
        <member name="T:Macrosage.Utility.Imaging.ImageMetadata">
            <summary>
            图像元数据
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.ImageMetadata.FormatGif">
            <summary>
            GIF图片类型
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.ImageMetadata.FormatPng">
            <summary>
            PNG图片格式
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.ImageMetadata.FormatBmp">
            <summary>
            BMP图片格式
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.ImageMetadata.ColorTypeUnknown">
            <summary>
            颜色类型 未知
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.ImageMetadata.stream">
            <summary>
            The stream
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.ImageMetadata._width">
            <summary>
            The width
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.ImageMetadata._height">
            <summary>
            The height
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.ImageMetadata._bitsPerPixel">
            <summary>
            The bits per pixel
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.ImageMetadata.colorType">
            <summary>
            The color type
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.ImageMetadata.progressive">
            <summary>
            The progressive
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.ImageMetadata.format">
            <summary>
            The format
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.ImageMetadata.determineNumberOfImages">
            <summary>
            The determine number of images
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.ImageMetadata.numberOfImageFrames">
            <summary>
            The number of image frames
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.ImageMetadata.physicalHeightDpi">
            <summary>
            The physical height dpi
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.ImageMetadata.physicalWidthDpi">
            <summary>
            The physical width dpi
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.ImageMetadata.FORMAT_JPEG">
            <summary>
            JPEG图片格式
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.ImageMetadata.FormatNames">
            <summary>
            图像格式名称
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.ImageMetadata.MimeTypeStrings">
            <summary>
            图像MIME
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Imaging.ImageMetadata.#ctor(System.IO.Stream)">
            <summary>
            构造函数
            </summary>
            <param name="stream">图像流</param>
        </member>
        <member name="M:Macrosage.Utility.Imaging.ImageMetadata.Check(System.IO.Stream,System.String@,System.Int32@,System.Int32@)">
            <summary>
            获取图像信息
            </summary>
            <param name="inputStream">图像文件流</param>
            <param name="contentType">图像MIME类型</param>
            <param name="width">图像宽度</param>
            <param name="height">图像高度</param>
            <returns>正常获取数据返回true，否则返回false</returns>
        </member>
        <member name="M:Macrosage.Utility.Imaging.ImageMetadata.Check">
            <summary>
            检查传入的流是否为图片类型
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Macrosage.Utility.Imaging.ImageMetadata.CheckBmp">
            <summary>
            Checks the BMP.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Macrosage.Utility.Imaging.ImageMetadata.CheckGif">
            <summary>
            Checks the GIF.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Macrosage.Utility.Imaging.ImageMetadata.CheckJpeg">
            <summary>
            Checks the JPEG.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Macrosage.Utility.Imaging.ImageMetadata.CheckPng">
            <summary>
            Checks the PNG.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Macrosage.Utility.Imaging.ImageMetadata.equals(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Equalses the specified a1.
            </summary>
            <param name="a1">The a1.</param>
            <param name="offs1">The offs1.</param>
            <param name="a2">The a2.</param>
            <param name="offs2">The offs2.</param>
            <param name="num">The num.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Macrosage.Utility.Imaging.ImageMetadata.getIntBigEndian(System.Byte[],System.Int32)">
            <summary>
            Gets the int big endian.
            </summary>
            <param name="a">A.</param>
            <param name="offs">The offs.</param>
            <returns>System.int.</returns>
        </member>
        <member name="M:Macrosage.Utility.Imaging.ImageMetadata.getIntLittleEndian(System.Byte[],System.Int32)">
            <summary>
            Gets the int little endian.
            </summary>
            <param name="a">A.</param>
            <param name="offs">The offs.</param>
            <returns>System.int.</returns>
        </member>
        <member name="M:Macrosage.Utility.Imaging.ImageMetadata.getShortBigEndian(System.Byte[],System.Int32)">
            <summary>
            Gets the short big endian.
            </summary>
            <param name="a">A.</param>
            <param name="offs">The offs.</param>
            <returns>System.int.</returns>
        </member>
        <member name="M:Macrosage.Utility.Imaging.ImageMetadata.getShortLittleEndian(System.Byte[],System.Int32)">
            <summary>
            Gets the short little endian.
            </summary>
            <param name="a">A.</param>
            <param name="offs">The offs.</param>
            <returns>System.int.</returns>
        </member>
        <member name="P:Macrosage.Utility.Imaging.ImageMetadata.Stream">
            <summary>
            图片数据流
            </summary>
            <value>The stream.</value>
        </member>
        <member name="P:Macrosage.Utility.Imaging.ImageMetadata.Width">
            <summary>
            图片宽度
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Macrosage.Utility.Imaging.ImageMetadata.Height">
            <summary>
            图片高度
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Macrosage.Utility.Imaging.ImageMetadata.BitsPerPixel">
            <summary>
            每像素的位点数
            </summary>
            <value>The bits per pixel.</value>
        </member>
        <member name="P:Macrosage.Utility.Imaging.ImageMetadata.Format">
            <summary>
            图片格式
            </summary>
            <value>The format.</value>
        </member>
        <member name="P:Macrosage.Utility.Imaging.ImageMetadata.ColorType">
            <summary>
            颜色类型
            </summary>
            <value>The type of the color.</value>
        </member>
        <member name="P:Macrosage.Utility.Imaging.ImageMetadata.NumberOfImageFrames">
            <summary>
            图像帧数
            </summary>
            <value>The number of image frames.</value>
        </member>
        <member name="P:Macrosage.Utility.Imaging.ImageMetadata.FormatName">
            <summary>
            图片格式的名称
            </summary>
            <value>The name of the format.</value>
        </member>
        <member name="P:Macrosage.Utility.Imaging.ImageMetadata.MimeType">
            <summary>
            MIME类型
            </summary>
            <value>The type of the MIME.</value>
        </member>
        <member name="T:Macrosage.Utility.ImageProcessor">
            <summary>
            图像处理器
            </summary>
        </member>
        <member name="F:Macrosage.Utility.ImageProcessor._filters">
            <summary>
            The _filters
            </summary>
        </member>
        <member name="F:Macrosage.Utility.ImageProcessor.jpegQuality">
            <summary>
            The JPEG quality
            </summary>
        </member>
        <member name="M:Macrosage.Utility.ImageProcessor.Process(System.IO.Stream)">
            <summary>
            根据ImageSettings对图片进行 缩放/剪切/水印 等操作
            </summary>
            <param name="inputStream">图像文件流</param>
            <returns>System.IO.Stream.</returns>
            <exception cref="T:System.ArgumentException">inputStream isn't validate;inputStream</exception>
        </member>
        <member name="M:Macrosage.Utility.ImageProcessor.Resize(System.IO.Stream,System.Int32,System.Int32,Macrosage.Utility.Imaging.ResizeMethod)">
            <summary>
            缩放图像
            </summary>
            <param name="inputStream">图像文件流</param>
            <param name="width">缩放后的宽度</param>
            <param name="height">缩放后的高度</param>
            <param name="resizeMethod">缩放方式</param>
            <returns>返回缩放后的图像文件流</returns>
        </member>
        <member name="M:Macrosage.Utility.ImageProcessor.Crop(System.IO.Stream,System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            裁剪图像
            </summary>
            <param name="inputStream">图像文件流</param>
            <param name="cropArea">原图待裁剪的矩形选区</param>
            <param name="descWidth">裁剪后图像的宽度</param>
            <param name="descHeight">裁剪后图像的高度</param>
            <returns>返回裁剪后的图像文件流</returns>
        </member>
        <member name="M:Macrosage.Utility.ImageProcessor.GetImageCodecInfo(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Gets ImageCodecInfo for the specified ImageFormat
            </summary>
            <param name="imageFormat">The ImageFormat of the picture.</param>
            <returns>System.Drawing.Imaging.ImageCodecInfo</returns>
        </member>
        <member name="M:Macrosage.Utility.ImageProcessor.IsGIFAnimation(System.Drawing.Image)">
            <summary>
            图像是否GIF动画
            </summary>
            <param name="image">待检测的图像</param>
            <returns>是GIF动画返回true，否则返回false</returns>
        </member>
        <member name="P:Macrosage.Utility.ImageProcessor.Filters">
            <summary>
            图像处理过滤器列表
            </summary>
            <value>The filters.</value>
        </member>
        <member name="P:Macrosage.Utility.ImageProcessor.JpegQuality">
            <summary>
            Jpeg压缩质量
            </summary>
            <value>The JPEG quality.</value>
            <remarks>取值区间0到100</remarks>
        </member>
        <member name="T:Macrosage.Utility.Imaging.ImageWatermarkFilter">
            <summary>
            图像水印过滤器
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Imaging.WatermarkFilterBase">
            <summary>
            水印过滤器基类
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.WatermarkFilterBase._opacity">
            <summary>
            The _opacity
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Imaging.WatermarkFilterBase.Process(System.Drawing.Image,System.Boolean@)">
            <summary>
            对传入的inputImage进行处理
            </summary>
            <param name="inputImage">待处理的图像文件</param>
            <param name="isProcessed">是否被处理，否则返回原图</param>
            <returns>返回处理后的图像文件</returns>
        </member>
        <member name="M:Macrosage.Utility.Imaging.WatermarkFilterBase.IsPixelFormatIndexed(System.Drawing.Imaging.PixelFormat)">
            <summary>
            判断图片是否带有索引像素格式
            </summary>
            <param name="imgPixelFormat">原图片的PixelFormat</param>
            <returns><c>true</c> if [is pixel format indexed] [the specified img pixel format]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Macrosage.Utility.Imaging.WatermarkFilterBase.AnchorLocation">
            <summary>
            水印所在位置
            </summary>
            <value>The anchor location.</value>
        </member>
        <member name="P:Macrosage.Utility.Imaging.WatermarkFilterBase.Opacity">
            <summary>
            不透明度
            </summary>
            <value>The opacity.</value>
        </member>
        <member name="M:Macrosage.Utility.Imaging.ImageWatermarkFilter.#ctor(System.String,Macrosage.Utility.Imaging.AnchorLocation)">
            <summary>
            构造函数
            </summary>
            <param name="watermarkImagePhysicalPath">作为水印的图像文件物理路径</param>
            <param name="anchorLocation">水印在图像上的停靠位置</param>
        </member>
        <member name="M:Macrosage.Utility.Imaging.ImageWatermarkFilter.#ctor(System.Drawing.Image,Macrosage.Utility.Imaging.AnchorLocation)">
            <summary>
            构造函数
            </summary>
            <param name="watermarkImage">作为水印的图像文件</param>
            <param name="anchorLocation">水印在图像上的停靠位置</param>
        </member>
        <member name="M:Macrosage.Utility.Imaging.ImageWatermarkFilter.#ctor(System.String,Macrosage.Utility.Imaging.AnchorLocation,System.Single)">
            <summary>
            构造函数
            </summary>
            <param name="watermarkImagePhysicalPath">作为水印的图像文件物理路径</param>
            <param name="anchorLocation">水印在图像上的停靠位置</param>
            <param name="opacity">不透明度</param>
        </member>
        <member name="M:Macrosage.Utility.Imaging.ImageWatermarkFilter.#ctor(System.Drawing.Image,Macrosage.Utility.Imaging.AnchorLocation,System.Single)">
            <summary>
            构造函数
            </summary>
            <param name="watermarkImage">作为水印的图像文件</param>
            <param name="anchorLocation">水印在图像上的停靠位置</param>
            <param name="opacity">不透明度</param>
        </member>
        <member name="M:Macrosage.Utility.Imaging.ImageWatermarkFilter.Process(System.Drawing.Image,System.Boolean@)">
            <summary>
            在传入的inputImage添加图像水印
            </summary>
            <param name="inputImage">待处理的图像文件</param>
            <param name="isProcessed">是否被处理，否则返回原图</param>
            <returns>返回处理后的图像文件</returns>
        </member>
        <member name="M:Macrosage.Utility.Imaging.ImageWatermarkFilter.GetWatermarkArea(System.Drawing.Image,System.Drawing.Image)">
            <summary>
            获取水印区域
            </summary>
            <param name="inputImage">待加水印的图像</param>
            <param name="watermarkImage">用为水印的图像</param>
            <returns>返回水印矩形区域</returns>
        </member>
        <member name="M:Macrosage.Utility.Imaging.ImageWatermarkFilter.BuildImageAttributes">
            <summary>
            Builds the image attributes.
            </summary>
            <returns>ImageAttributes.</returns>
        </member>
        <member name="P:Macrosage.Utility.Imaging.ImageWatermarkFilter.WatermarkImage">
            <summary>
            作为水印的图像文件
            </summary>
            <value>The watermark image.</value>
        </member>
        <member name="P:Macrosage.Utility.Imaging.ImageWatermarkFilter.WatermarkImagePhysicalPath">
            <summary>
            作为水印的图像文件物理路径
            </summary>
            <value>The watermark image physical path.</value>
        </member>
        <member name="T:Macrosage.Utility.Imaging.RectangleUtil">
            <summary>
            矩形工具类
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Imaging.RectangleUtil.PositionRectangle(Macrosage.Utility.Imaging.AnchorLocation,System.Drawing.Rectangle,System.Drawing.Rectangle@)">
            <summary>
            按照停靠位置定位矩形选区（destRect）在矩形容器（sourceRect）中的位置
            </summary>
            <param name="anchorLocation">矩形选区停靠位置</param>
            <param name="sourceRect">矩形容器</param>
            <param name="destRect">矩形选区</param>
        </member>
        <member name="T:Macrosage.Utility.Imaging.ResizeFilter">
            <summary>
            用于缩放的图像处理过滤器
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Imaging.ResizeFilter.#ctor(System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="width">缩放后的宽度</param>
            <param name="height">缩放后的高度</param>
        </member>
        <member name="M:Macrosage.Utility.Imaging.ResizeFilter.#ctor(System.Int32,System.Int32,Macrosage.Utility.Imaging.ResizeMethod)">
            <summary>
            构造函数
            </summary>
            <param name="width">缩放后的宽度</param>
            <param name="height">缩放后的高度</param>
            <param name="resizeMethod">缩放方式</param>
        </member>
        <member name="M:Macrosage.Utility.Imaging.ResizeFilter.#ctor(System.Int32,System.Int32,Macrosage.Utility.Imaging.ResizeMethod,Macrosage.Utility.Imaging.AnchorLocation)">
            <summary>
            构造函数
            </summary>
            <param name="width">缩放后的宽度</param>
            <param name="height">缩放后的高度</param>
            <param name="resizeMethod">缩放方式</param>
            <param name="anchorLocation">如需裁剪时，矩形选区停靠位置</param>
        </member>
        <member name="M:Macrosage.Utility.Imaging.ResizeFilter.Process(System.Drawing.Image,System.Boolean@)">
            <summary>
            对传入的inputImage进行缩放
            </summary>
            <param name="inputImage">待处理的图像文件</param>
            <param name="isProcessed">是否被处理，否则返回原图</param>
            <returns>返回处理后的图像文件</returns>
        </member>
        <member name="M:Macrosage.Utility.Imaging.ResizeFilter.GetNewSize(System.Drawing.Image,System.Drawing.Size,Macrosage.Utility.Imaging.ResizeMethod,System.Drawing.Size@)">
            <summary>
            计算实际缩放后的图像尺寸
            </summary>
            <param name="img">The image to resize</param>
            <param name="requestedSize">请求缩放的图像尺寸</param>
            <param name="resizeMethod">图像缩放方式</param>
            <param name="bitmapSize">推荐输出的bitmap尺寸</param>
            <returns>返回实际缩放后的图像尺寸</returns>
        </member>
        <member name="M:Macrosage.Utility.Imaging.ResizeFilter.GetLargestInset(System.Drawing.Rectangle,System.Single,Macrosage.Utility.Imaging.AnchorLocation)">
            <summary>
            按照期望的宽高比获取sourceRect中最大矩形区域
            </summary>
            <param name="sourceRect">源矩形区域</param>
            <param name="desiredAspect">期望的宽高比</param>
            <param name="anchorLocation">矩形选区停靠位置</param>
            <returns>返回在sourceRect内满足desiredAspect的最大矩形区域</returns>
        </member>
        <member name="P:Macrosage.Utility.Imaging.ResizeFilter.TargetSize">
            <summary>
            期望图像尺寸
            </summary>
            <value>The size of the target.</value>
        </member>
        <member name="P:Macrosage.Utility.Imaging.ResizeFilter.ResizeMethod">
            <summary>
            图像缩放方式
            </summary>
            <value>The resize method.</value>
        </member>
        <member name="P:Macrosage.Utility.Imaging.ResizeFilter.AnchorLocation">
            <summary>
            矩形选区停靠位置
            </summary>
            <value>The anchor location.</value>
        </member>
        <member name="P:Macrosage.Utility.Imaging.ResizeFilter.InterpoliationMode">
            <summary>
            缩放或旋转图像时使用的算法
            </summary>
            <value>The interpoliation mode.</value>
        </member>
        <member name="P:Macrosage.Utility.Imaging.ResizeFilter.SmoothingMode">
            <summary>
            缩放或旋转图像时使用的算法
            </summary>
            <value>The smoothing mode.</value>
        </member>
        <member name="T:Macrosage.Utility.Imaging.ResizeMethod">
            <summary>
            图像缩放方式
            </summary>
            <remarks>不执行放大操作</remarks>
        </member>
        <member name="F:Macrosage.Utility.Imaging.ResizeMethod.Absolute">
            <summary>
            按绝对尺寸缩放
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.ResizeMethod.KeepAspectRatio">
            <summary>
            保持原图像宽高比缩放
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Imaging.ResizeMethod.AbsoluteCrop">
            <summary>
            裁剪图像
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Imaging.TextWatermarkFilter">
            <summary>
            文字水印过滤器
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Imaging.TextWatermarkFilter.#ctor(System.String,Macrosage.Utility.Imaging.AnchorLocation)">
            <summary>
            构造函数
            </summary>
            <param name="text">水印文字</param>
            <param name="anchorLocation">水印在图像上的停靠位置</param>
        </member>
        <member name="M:Macrosage.Utility.Imaging.TextWatermarkFilter.#ctor(System.String,Macrosage.Utility.Imaging.AnchorLocation,System.Single)">
            <summary>
            构造函数
            </summary>
            <param name="text">水印文字</param>
            <param name="anchorLocation">水印在图像上的停靠位置</param>
            <param name="opacity">不透明度</param>
        </member>
        <member name="M:Macrosage.Utility.Imaging.TextWatermarkFilter.Process(System.Drawing.Image,System.Boolean@)">
            <summary>
            在传入的inputImage添加文字水印
            </summary>
            <param name="inputImage">待处理的图像文件</param>
            <param name="isProcessed">是否被处理，否则返回原图</param>
            <returns>返回处理后的图像文件</returns>
        </member>
        <member name="M:Macrosage.Utility.Imaging.TextWatermarkFilter.GetWatermarkArea(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Font@)">
            <summary>
            获取水印区域
            </summary>
            <param name="graphics">画布</param>
            <param name="inputImage">图像</param>
            <param name="watermarkFont">水印文字使用的字体</param>
            <returns>返回水印矩形区域</returns>
        </member>
        <member name="P:Macrosage.Utility.Imaging.TextWatermarkFilter.Text">
            <summary>
            水印文字
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:Macrosage.Utility.Mapper.Assist.IMappingTrigger">
            <summary>
            数据映射触发接口
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Mapper.Assist.IObjectAccessor">
            <summary>
            对象访问器
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Assist.IObjectAccessor.Create">
            <summary>
            创建一个实体对象
            </summary>
            <returns></returns>
        </member>
        <member name="P:Macrosage.Utility.Mapper.Assist.IObjectAccessor.Item(System.String)">
            <summary>
            获取对象指定成员对象的属性读写器
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="P:Macrosage.Utility.Mapper.Assist.IObjectAccessor.Item(System.Int32)">
            <summary>
            获取对象指定成员对象的属性读写器
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Macrosage.Utility.Mapper.Assist.IObjectAccessor.MetaInfo">
            <summary>
            对象元数据
            </summary>
            <returns></returns>
        </member>
        <member name="P:Macrosage.Utility.Mapper.Assist.IObjectAccessor.InstanceType">
            <summary>
            实例类型
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Mapper.Assist.IObjectAccessor`1">
            <summary>
            对象访问器
            </summary>
            <typeparam name="T">实体类型</typeparam>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Assist.IObjectAccessor`1.Create">
            <summary>
            创建一个类型为实体对象
            </summary>
            <returns></returns>
        </member>
        <member name="P:Macrosage.Utility.Mapper.Assist.IObjectAccessor`1.Item(System.String)">
            <summary>
            获取对象指定成员对象的值
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="P:Macrosage.Utility.Mapper.Assist.IObjectAccessor`1.Item(System.Int32)">
            <summary>
            获取对象指定成员对象的属性读写器
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Macrosage.Utility.Mapper.Assist.IPropertyAccessor">
            <summary>
            实体对象的取值或赋值
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Assist.IPropertyAccessor.SetValue(System.Object,System.Object)">
            <summary>
            向对象的目标属性赋值
            </summary>
            <param name="handler">引用的对象</param>
            <param name="value">将<paramref name="value"/>赋值给对象的属性</param>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Assist.IPropertyAccessor.GetValue(System.Object)">
            <summary>
            获取对象的目标属性的值
            </summary>
            <param name="handler">引用的对象</param>
            <returns></returns>
        </member>
        <member name="T:Macrosage.Utility.Mapper.Assist.IPropertyAccessor`1">
            <summary>
            实体对象的取值或赋值
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Assist.IPropertyAccessor`1.SetValue(`0,System.Object)">
            <summary>
            向对象的目标属性赋值
            </summary>
            <param name="handler">引用的对象</param>
            <param name="value">将<paramref name="value"/>赋值给对象的属性</param>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Assist.IPropertyAccessor`1.GetValue(`0)">
            <summary>
            获取对象的目标属性的值
            </summary>
            <param name="handler">引用的对象</param>
            <returns></returns>
        </member>
        <member name="T:Macrosage.Utility.Mapper.Assist.MapperException">
            <summary>
            数据对象映射异常
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Assist.MapperException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Assist.MapperException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Assist.MapperException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Macrosage.Utility.Mapper.Assist.ObjectAccessor`1">
            <summary>
            对象访问器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Assist.ObjectAccessor`1.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Assist.ObjectAccessor`1.#ctor(System.String)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Assist.ObjectAccessor`1.#ctor(Macrosage.Utility.Mapper.Metadata.IMetaInfo)">
            <summary>
            初始化
            </summary>
            <param name="metaInfo">元数据</param>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Assist.ObjectAccessor`1.AppendProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            添加需要映射的属性成员。
            </summary>
            <param name="propertyExp"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Assist.ObjectAccessor`1.AppendProperty(Macrosage.Utility.Mapper.Metadata.IMetaPropertyInfo)">
            <summary>
            添加需要映射的属性成员。
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Assist.ObjectAccessor`1.AutoAppendProperty">
            <summary>
            自动映射实体属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Assist.ObjectAccessor`1.Complete">
            <summary>
            完成映射（生命周期内只能调用一次）。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Assist.ObjectAccessor`1.Complete(System.Func{Macrosage.Utility.Mapper.Assist.ObjectAccessor{`0},System.Type})">
            <summary>
            完成映射（生命周期内只能调用一次）。
            </summary>
            <param name="builder">自定义类型<typeparamref name="T"/>的实例化。</param>
            <returns></returns>
        </member>
        <member name="T:Macrosage.Utility.Mapper.Assist.ObjectAccessorFinder">
            <summary>
            映射对象搜索器
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Assist.ObjectAccessorFinder.AddFinder(Macrosage.Utility.Mapper.Assist.ObjectAccessorFinder)">
            <summary>
            新增一个映射对象搜索器
            </summary>
            <param name="finder"></param>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Assist.ObjectAccessorFinder.ResetLastFinder(Macrosage.Utility.Mapper.Assist.ObjectAccessorFinder)">
            <summary>
            重置默认的映射对象搜索器
            </summary>
            <param name="finder"></param>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Assist.ObjectAccessorFinder.FindObjAccessor``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Assist.ObjectAccessorFinder.FindAccessor``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:Macrosage.Utility.Mapper.Assist.MapperException"></exception>
        </member>
        <member name="T:Macrosage.Utility.Mapper.Assist.PropertyAccessor`1">
            <summary>
            实体对象内部的取值或赋值实现。
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>此对象通过Lambda表达示树编译成委托实现对象属性的取值或赋值。</remarks>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Assist.PropertyAccessor`1.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            
            </summary>
            <param name="propertyInfo"></param>
        </member>
        <member name="T:Macrosage.Utility.Mapper.Assist.PropertyExpression">
            <summary>
            实体属性（lambda）表达式。
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Assist.PropertyExpression.ExtractMemberExpression``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            获取表达未成员类型信息
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Assist.PropertyExpression.ExtractMemberExpression(System.Linq.Expressions.Expression)">
            <summary>
            获取表达未成员类型信息
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="T:Macrosage.Utility.Mapper.DataSource.DataReaderSourceProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Mapper.DataSource.IDataSourceReader.Ordinal(System.String[])">
            <summary>
            fields成员映射到数据的下标，如果fields中的成员不被数据源包含，则下标为-1。
            </summary>
            <param name="fields">数据成员</param>
            <returns>依据fields的顺序，返回各个成员在数据源中的下标</returns>
        </member>
        <member name="M:Macrosage.Utility.Mapper.DataSource.IDataSourceReader.Read">
            <summary>
            读取数据
            </summary>
            <returns>依据ordinal的顺序返回data，没有数据和元素用null标记。</returns>
        </member>
        <member name="P:Macrosage.Utility.Mapper.DataSource.IDataSourceReader.Count">
            <summary>
            获取数据中数据集合的数量
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Mapper.Entity.DataState">
            <summary>
            数据状态
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Mapper.Entity.DataState.New">
            <summary>
            数据为新建状态，在执行保存操作时只会插入的方式
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Mapper.Entity.DataState.Modify">
            <summary>
            数据为修改状态，在执行保存操作时只会修改的方式，此状态下要求对象必须拥有主键值
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Mapper.Entity.DataState.NewOrModify">
            <summary>
            新建或修改状态，在执行保存时会在数据库中判断数据（主键）如果存在则更新数据，否则插入数据。
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Mapper.Metadata.IMetaPropertyInfo">
            <summary>
            元数据属性描述
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Mapper.Metadata.IMetaPropertyInfo.MetaInfo">
            <summary>
            <see cref="T:Macrosage.Utility.Mapper.Metadata.IMetaInfo"/>实例
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Mapper.Metadata.IMetaPropertyInfo.PropertyName">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Mapper.Metadata.IMetaPropertyInfo.PropertyInfo">
            <summary>
            映射的对象属性
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Mapper.Entity.IDbIncrementMetaPropertyInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Mapper.Metadata.IMetaInfo">
            <summary>
            元数据描述
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Metadata.IMetaInfo.IndexOf(System.String)">
            <summary>
            获取指定属性的下标
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Metadata.IMetaInfo.GetPropertyNames">
            <summary>
            所有属性名称
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Metadata.IMetaInfo.GetProperties">
            <summary>
            获取所有的属性
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Metadata.IMetaInfo.AddPropertyInfo(Macrosage.Utility.Mapper.Metadata.IMetaPropertyInfo)">
            <summary>
            添加属性
            </summary>
            <param name="metaPropertyInfo"></param>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Metadata.IMetaInfo.RemovePropertyInfo(Macrosage.Utility.Mapper.Metadata.IMetaPropertyInfo)">
            <summary>
            移除属性
            </summary>
            <param name="metaPropertyInfo"></param>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Metadata.IMetaInfo.MakeReadonly">
            <summary>
            元数据标记为只读
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Mapper.Metadata.IMetaInfo.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Mapper.Metadata.IMetaInfo.EntityType">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Mapper.Metadata.IMetaInfo.PropertyCount">
            <summary>
            属性个数
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Mapper.Metadata.IMetaInfo.Item(System.Int32)">
            <summary>
            获取指定的属性
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Macrosage.Utility.Mapper.Metadata.IMetaInfo.Item(System.String)">
            <summary>
            获取指定的属性
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="P:Macrosage.Utility.Mapper.Metadata.IMetaInfo.Item(System.Reflection.PropertyInfo)">
            <summary>
            获取指定的属性
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Metadata.MetaInfo.SafeList">
            <summary>
            获取propertyList是一个线程访问安全的集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Entity.IDbMetaInfo.IsKey(System.String)">
            <summary>
            验证是否为主键主字段
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Entity.IDbMetaInfo.GetKeys">
            <summary>
            获取所有的主键字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Entity.IDbMetaInfo.GetColumnNames">
            <summary>
            获取所有的字段
            </summary>
            <returns></returns>
        </member>
        <member name="P:Macrosage.Utility.Mapper.Entity.IDbMetaInfo.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Mapper.Entity.IDbMetaInfo.Increment">
            <summary>
            自动增长序列
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Mapper.Entity.IDbMetaInfo.KeyCount">
            <summary>
            表中主键的数量
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Mapper.Entity.IDbMetaInfo.ColumnCount">
            <summary>
            表中字段的数量
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Mapper.Entity.EntityBuilder">
            <summary>
            实体生成器。
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Entity.EntityBuilder.ResetCreater(System.Func{Macrosage.Utility.Mapper.Entity.EntityBuilder})">
            <summary>
            设置新的实例化方法
            </summary>
            <param name="creater"></param>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Entity.EntityBuilder.BuildEntityClass(System.Type,Macrosage.Utility.Mapper.Metadata.IMetaInfo)">
            <summary>
            生成一个实体的继承类，重写实体中属性成员，并继承IEntity接口。
            </summary>
            <param name="baseType"></param>
            <param name="metaInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Entity.EntityBuilder.BuildEntityType(System.Type,Macrosage.Utility.Mapper.Metadata.IMetaInfo)">
            <summary>
            生成一个继承自实体的类
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Entity.EntityBuilder.GenerateCode(System.CodeDom.CodeCompileUnit)">
            <summary>
            生成C#语法代码(文本)
            </summary>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="T:Macrosage.Utility.Mapper.Entity.FieldFlag">
            <summary>
            用于记录成员字段是否被修改过。成员字段有一个下标编号，这是一个在编译时确定从零开始的编码。
            <remarks>这种做法有利于节省空间，带来性能上的提高(内部采用位运算实现)。依据字段的多少来空间的开销（计算方法：(int)Math.Ceiling((double)size / 8)），此公式可以计算出成员字段需用多少个字节来做记录。</remarks>
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Mapper.Entity.FieldFlag.ItemSize">
            <summary>
            数组中的一个对象只存31个比特位。
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Entity.FieldFlag.#ctor(System.Int32)">
            <summary>
            初始化一个可以存放大数据量的数组。
            </summary>
            <param name="size">二进制位大小，size = 32 * 返回值数组长度。因为int占用8个字节，所有二进制位大小为32。</param>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Entity.FieldFlag.BitCompute(System.Int32,System.Int32@)">
            <summary>
            计算<paramref name="index"/>在数组中的比特位，并返回<paramref name="index"/>对应的比特位。
            </summary>
            <param name="index">比特位的下标。</param>
            <param name="arrayIndex">数组下标。一个很大的值需要拆分成一个数组保存，如：参数<paramref name="index"/>等于 9 它大于8了，所以这个值会放在数组下标为1的byte中的第0个比特位。</param>
            <returns>计算出的这个比特位的值</returns>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Entity.FieldFlag.HasMarked">
            <summary>
            检查指定比特位的标记。
            </summary>
            <returns>任意比特位已被标记时返回true，false则表示所有比特位均未被标记。</returns>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Entity.FieldFlag.HasMarked(System.Int32)">
            <summary>
            检查指定比特位的标记。
            </summary>
            <param name="index">比特位</param>
            <returns>指定比特位已被标记时返回true，false则表示未被标记。</returns>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Entity.FieldFlag.IndexArray">
            <summary>
            获取所有被标记的比特位的位置下标。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Entity.FieldFlag.Mark(System.Int32)">
            <summary>
            在指定的比特位，将其值标记为 1。
            </summary>
            <param name="index">比特位位置。</param>
            <remarks>
            下标为3（第4个比特位）
            00000000000000000000000000001000
            </remarks>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Entity.FieldFlag.UnMark(System.Int32)">
            <summary>
            在指定的比特位，将其值标记为 0（取消标记）。
            </summary>
            <param name="index">比特位位置。</param>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Entity.FieldFlag.Clean">
            <summary>
            清除所有比特位标记。
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Mapper.Entity.FieldFlag.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Mapper.Entity.FieldFlag.MarkedCount">
            <summary>
            比特位上值为 1 的个数
            </summary>
            <returns></returns>
        </member>
        <member name="T:Macrosage.Utility.Mapper.Entity.IEntity">
            <summary>
            数据实体映射接口
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Entity.IEntity.IsSetted(System.Int32)">
            <summary>
            验证成员字段是否过赋值操作
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Entity.IEntity.AnySetted">
            <summary>
            检测任意一个成员字段是否有赋值操作
            </summary>
            <returns></returns>
        </member>
        <member name="P:Macrosage.Utility.Mapper.Entity.IEntity.OperationState">
            <summary>
            实体状态
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Mapper.Entity.IEntity.EntityType">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Entity.ObjectAccessorExtenssions.Create``1">
            <summary>
            新建一个<see cref="T:Macrosage.Utility.Mapper.Assist.IObjectAccessor"/>对象。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Entity.ObjectAccessorExtenssions.Create``1(System.String)">
            <summary>
            新建一个<see cref="T:Macrosage.Utility.Mapper.Assist.IObjectAccessor"/>对象。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Entity.ObjectAccessorExtenssions.AppendProperty``1(Macrosage.Utility.Mapper.Assist.ObjectAccessor{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Boolean)">
            <summary>
            添加属性与表字段的映射
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataMapper"></param>
            <param name="propertyExp"></param>
            <param name="propertyName"></param>
            <param name="isKey"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Entity.ObjectAccessorExtenssions.Increment``1(Macrosage.Utility.Mapper.Assist.ObjectAccessor{``0})">
            <summary>
            标识当前添加的字段为自动增长标识
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataMapper"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Entity.ObjectAccessorExtenssions.Increment``1(Macrosage.Utility.Mapper.Assist.ObjectAccessor{``0},System.String)">
            <summary>
            标识当前添加的字段为自动增长标识
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataMapper"></param>
            <param name="incrementName"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Entity.ObjectAccessorExtenssions.Increment``1(Macrosage.Utility.Mapper.Assist.ObjectAccessor{``0},System.String,System.Int32)">
            <summary>
            标识当前添加的字段为自动增长标识
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataMapper"></param>
            <param name="incrementName"></param>
            <param name="startVal"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Mapper.Entity.ObjectAccessorExtenssions.CompleteWithEntity``1(Macrosage.Utility.Mapper.Assist.ObjectAccessor{``0})">
            <summary>
            完成映射，生成一个继承于<typeparamref name="T"/>和<see cref="T:Macrosage.Utility.Mapper.Entity.IEntity"/>的子类。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataMapper"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Mapper.MapGetAccessor.GetAccessor(System.Type)">
            <summary>
            
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.Mapper.MapGetAccessor.GetAccessor``1">
            <summary>
            获取IMapper&lt;<typeparamref name="T"/>&gt;
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Macrosage.Utility.Mapper.Timestamp">
            <summary>
            基于格林威志的Unix时间截
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Mapper.TypeMappers.CollectionTypeMaper`1._instanceType">
            <summary>
            创建集合实例的类型描述
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Mapper.TypeMappers.CollectionTypeMaper`1._iCollectionType">
            <summary>
            集合接口类型描述
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Mapper.TypeMappers.CollectionTypeMaper`1._genericCollectionConvert">
            <summary>
            适用于泛型的集合转换
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Mapper.TypeMappers.DictionaryTypeMapperBase`1">
            <summary>
            字典转换的基类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Macrosage.Utility.Mapper.TypeMappers.DictionaryTypeMapper`2">
            <summary>
            针对<see cref="T:System.Collections.Generic.Dictionary`2"/>转换的优化
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Macrosage.Utility.Mapper.TypeMappers.HashtableTypeMapper">
            <summary>
            针对<see cref="T:System.Collections.Hashtable"/>转换的优化
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Mapper.TypeMappers.CommonDictionaryTypeMapper`1">
            <summary>
            通用字典的转换（包括支持<see cref="T:Macrosage.Utility.Mapper.TypeMappers.HashtableTypeMapper"/>/<see cref="T:Macrosage.Utility.Mapper.TypeMappers.DictionaryTypeMapper`2"/>所支持的）
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Macrosage.Utility.Mapper.TypeMappers.CommonDictionaryTypeMapper`1.iDicType">
            <summary>
            字典接口信息描述
            </summary>
        </member>
        <member name="F:Macrosage.Utility.Mapper.TypeMappers.CommonDictionaryTypeMapper`1.genericDicConvert">
            <summary>
            适用于泛型的集合的初始化
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Models.CropPicture.CaptureImageModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.CropPicture.CaptureImageModel.ClientId">
            <summary>
            客户端唯一标示，建议guid，便于服务器执行完可通知客户端
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.CropPicture.CaptureImageModel.Height">
            <summary>
            缩略图高度
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.CropPicture.CaptureImageModel.Width">
            <summary>
            缩略图宽度
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.CropPicture.CaptureImageModel.AnnexName">
            <summary>
            上传文件名
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Models.EditorUpload.UploadConfigModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.EditorUpload.UploadConfigModel.PathFormat">
            <summary>
            文件命名规则
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.EditorUpload.UploadConfigModel.UploadFieldName">
            <summary>
            上传表单域名称
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.EditorUpload.UploadConfigModel.SizeLimit">
            <summary>
            上传大小限制
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.EditorUpload.UploadConfigModel.AllowExtensions">
            <summary>
            上传允许的文件格式
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.EditorUpload.UploadConfigModel.Base64">
            <summary>
            文件是否以 Base64 的形式上传
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.EditorUpload.UploadConfigModel.Base64Filename">
            <summary>
            Base64 字符串所表示的文件名
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.EditorUpload.UploadConfigModel.IsCrop">
            <summary>
            是否裁剪
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.EditorUpload.UploadConfigModel.IsSingle">
            <summary>
            是否单个对象
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.EditorUpload.UploadConfigModel.CropList">
            <summary>
            裁剪集合
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Models.EditorUpload.CropModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.EditorUpload.CropModel.ImageWidth">
            <summary>
            原图高
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.EditorUpload.CropModel.ImageHeight">
            <summary>
            原图宽
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.EditorUpload.CropModel.ImageX">
            <summary>
            选择 X 轴
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.EditorUpload.CropModel.ImageY">
            <summary>
            选择 Y 轴
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.EditorUpload.CropModel.DescWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.EditorUpload.CropModel.DescHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.EditorUpload.CropModel.ImageSrc">
            <summary>
            客户端提交图片网络路径
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.EditorUpload.CropModel.CropFileName">
            <summary>
            裁剪后生成文件名
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Models.EditorUpload.UploadResultModel">
            <summary>
            
            </summary>
        </member>
        <member name="M:Macrosage.Utility.Models.EditorUpload.UploadResultModel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Models.EditorUpload.ResultState">
            <summary>
            
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Models.EditorUpload.UploadState">
            <summary>
            
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Models.Ftp.UploadFileModel">
            <summary>
            上传文件实体
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.Ftp.UploadFileModel.AnnexName">
            <summary>
            上传文件名，赋值后自动得到 AnnexExt 属性值
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.Ftp.UploadFileModel.AnnexExt">
            <summary>
            上传文件后缀名，先给AnnexName赋值，成功后自动获取文件后缀，直接调用Get获取即可
            <para>返回值：null 或 小写的准确后缀名</para>
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.Ftp.UploadFileModel.FileExtType">
            <summary>
            文件后缀所属类型
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.Ftp.UploadFileModel.Size">
            <summary>
            文件大小 kb
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.Ftp.UploadFileModel.DataUrl">
            <summary>
            返回原图存入数据库路径
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.Ftp.UploadFileModel.WebUrl">
            <summary>
            返回原图网络可访问路径
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.Ftp.UploadFileModel.UploadTime">
            <summary>
            上传耗时，为空则不返回
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.Ftp.UploadFileModel.ClientId">
            <summary>
            客户端唯一标示，为空则不返回，建议guid，便于服务器执行完可通知客户端
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.Ftp.UploadFileModel.Height">
            <summary>
            图片高度，为空则不返回
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.Ftp.UploadFileModel.Width">
            <summary>
            图片宽度，为空则不返回
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.Ftp.UploadFileModel.ResizedDataUrl">
            <summary>
            返回缩略图存入数据库路径
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.Ftp.UploadFileModel.ResizedWebUrl">
            <summary>
            返回缩略图网络可访问路径
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.Ftp.UploadFileModel.ResizedHeight">
            <summary>
            缩略图图片高度，为空则不返回
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.Ftp.UploadFileModel.ResizedWidth">
            <summary>
            缩略图图片宽度，为空则不返回
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.Ftp.UploadFileModel.ResizedAnnexName">
            <summary>
            缩略图名称
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Models.Ftp.UploadImageBase64Model">
            <summary>
            上传图片base64实体
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.Ftp.UploadImageBase64Model.AnnexName">
            <summary>
            上传文件名，赋值后自动得到 AnnexExt 属性值
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.Ftp.UploadImageBase64Model.ClientId">
            <summary>
            客户端唯一标示，为空则不返回，建议guid，便于服务器执行完可通知客户端
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.Ftp.UploadImageBase64Model.ImageBase64">
            <summary>
            图片的base64字符串
            </summary>
        </member>
        <member name="T:Macrosage.Utility.Models.ResultJsonModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.ResultJsonModel.Result">
            <summary>
            json返回值
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.ResultJsonModel.Msg">
            <summary>
            json返回消息
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.ResultJsonModel.Data">
            <summary>
            json返回数据
            </summary>
        </member>
        <member name="P:Macrosage.Utility.Models.ResultJsonModel.EnumType">
            <summary>
            枚举对象
            <para>对其进行赋值时，自动将枚举值覆盖 Result 原有值上。</para>
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.Extensions.ChecksumExtension">
            <summary>
            Retrieve checksum of file on the server
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.Extensions.ChecksumExtension.GetChecksum(System.Net.FtpClient.FtpClient,System.String)">
            <summary>
            Retrieves a checksum of the given file using a checksumming method
            that the server supports, if any. The algorithm used goes in this order:
            1. HASH command; server preferred algorithm. See FtpClient.SetHashAlgorithm()
            2. MD5 / XMD5 commands
            3. XSHA1 command
            4. XSHA256 command
            5. XSHA512 command
            6. XCRC command
            </summary>
            <param name="client">FtpClient Object</param>
            <param name="path">Full or relative path of the file to checksum</param>
            <returns>FtpHash object containing the value and algorithm. Use the IsValid property to
            determine if this command was successfull. FtpCommandException's can be thrown from
            the underlying calls.</returns>
            <example><code source="..\Examples\GetChecksum.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.Extensions.ChecksumExtension.BeginGetChecksum(System.Net.FtpClient.FtpClient,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronusly retrieve a checksum of the specified file. This feature
            is non-standard.
            </summary>
            <param name="client">FtpClient Object</param>
            <param name="path">Full or relative path to remote file</param>
            <param name="callback">AsyncCallback</param>
            <param name="state">State Object</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:System.Net.FtpClient.Extensions.ChecksumExtension.EndGetChecksum(System.IAsyncResult)">
            <summary>
            Ends an asynchronous call to BeginGetChecksum()
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetChecksum()</param>
            <returns>FtpHash object containing the value and algorithm. Use the IsValid property to
            determine if this command was successfull. FtpCommandException's can be thrown from
            the underlying calls.</returns>
        </member>
        <member name="T:System.Net.FtpClient.Extensions.MD5">
            <summary>
            Implementation of the non-standard MD5 command
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.Extensions.MD5.GetMD5(System.Net.FtpClient.FtpClient,System.String)">
            <summary>
            Gets the MD5 hash of the specified file using MD5. This is a non-standard extension
            to the protocol and may or may not work. A FtpCommandException will be
            thrown if the command fails.
            </summary>
            <param name="client">FtpClient Object</param>
            <param name="path">Full or relative path to remote file</param>
            <returns>Server response, presumably the MD5 hash.</returns>
        </member>
        <member name="M:System.Net.FtpClient.Extensions.MD5.BeginGetMD5(System.Net.FtpClient.FtpClient,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronusly retrieve a MD5 hash. The MD5 command is non-standard
            and not guaranteed to work.
            </summary>
            <param name="client">FtpClient Object</param>
            <param name="path">Full or relative path to remote file</param>
            <param name="callback">AsyncCallback</param>
            <param name="state">State Object</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:System.Net.FtpClient.Extensions.MD5.EndGetMD5(System.IAsyncResult)">
            <summary>
            Ends an asynchronous call to BeginGetMD5()
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetMD5()</param>
            <returns>The MD5 hash of the specified file.</returns>
        </member>
        <member name="T:System.Net.FtpClient.Extensions.XCRC">
            <summary>
            Implementation of the non-standard XCRC command
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.Extensions.XCRC.GetXCRC(System.Net.FtpClient.FtpClient,System.String)">
            <summary>
            Get the CRC value of the specified file. This is a non-standard extension of the protocol 
            and may throw a FtpCommandException if the server does not support it.
            </summary>
            <param name="client">FtpClient object</param>
            <param name="path">The path of the file you'd like the server to compute the CRC value for.</param>
            <returns>The response from the server, typically the CRC value. FtpCommandException thrown on error</returns>
        </member>
        <member name="M:System.Net.FtpClient.Extensions.XCRC.BeginGetXCRC(System.Net.FtpClient.FtpClient,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronusly retrieve a CRC hash. The XCRC command is non-standard
            and not guaranteed to work.
            </summary>
            <param name="client">FtpClient Object</param>
            <param name="path">Full or relative path to remote file</param>
            <param name="callback">AsyncCallback</param>
            <param name="state">State Object</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:System.Net.FtpClient.Extensions.XCRC.EndGetXCRC(System.IAsyncResult)">
            <summary>
            Ends an asynchronous call to BeginGetXCRC()
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetXCRC()</param>
            <returns>The CRC hash of the specified file.</returns>
        </member>
        <member name="T:System.Net.FtpClient.Extensions.XMD5">
            <summary>
            Implementation of non-standard XMD5 command.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.Extensions.XMD5.GetXMD5(System.Net.FtpClient.FtpClient,System.String)">
            <summary>
            Gets the MD5 hash of the specified file using XMD5. This is a non-standard extension
            to the protocol and may or may not work. A FtpCommandException will be
            thrown if the command fails.
            </summary>
            <param name="client">FtpClient Object</param>
            <param name="path">Full or relative path to remote file</param>
            <returns>Server response, presumably the MD5 hash.</returns>
        </member>
        <member name="M:System.Net.FtpClient.Extensions.XMD5.BeginGetXMD5(System.Net.FtpClient.FtpClient,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronusly retrieve a MD5 hash. The XMD5 command is non-standard
            and not guaranteed to work.
            </summary>
            <param name="client">FtpClient Object</param>
            <param name="path">Full or relative path to remote file</param>
            <param name="callback">AsyncCallback</param>
            <param name="state">State Object</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:System.Net.FtpClient.Extensions.XMD5.EndGetXMD5(System.IAsyncResult)">
            <summary>
            Ends an asynchronous call to BeginGetXMD5()
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetXMD5()</param>
            <returns>The MD5 hash of the specified file.</returns>
        </member>
        <member name="T:System.Net.FtpClient.Extensions.XSHA1">
            <summary>
            Implementation of the non-standard XSHA1 command
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.Extensions.XSHA1.GetXSHA1(System.Net.FtpClient.FtpClient,System.String)">
            <summary>
            Gets the SHA-1 hash of the specified file using XSHA1. This is a non-standard extension
            to the protocol and may or may not work. A FtpCommandException will be
            thrown if the command fails.
            </summary>
            <param name="client">FtpClient Object</param>
            <param name="path">Full or relative path to remote file</param>
            <returns>Server response, presumably the SHA-1 hash.</returns>
        </member>
        <member name="M:System.Net.FtpClient.Extensions.XSHA1.BeginGetXSHA1(System.Net.FtpClient.FtpClient,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronusly retrieve a SHA1 hash. The XSHA1 command is non-standard
            and not guaranteed to work.
            </summary>
            <param name="client">FtpClient Object</param>
            <param name="path">Full or relative path to remote file</param>
            <param name="callback">AsyncCallback</param>
            <param name="state">State Object</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:System.Net.FtpClient.Extensions.XSHA1.EndGetXSHA1(System.IAsyncResult)">
            <summary>
            Ends an asynchronous call to BeginGetXSHA1()
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetXSHA1()</param>
            <returns>The SHA-1 hash of the specified file.</returns>
        </member>
        <member name="T:System.Net.FtpClient.Extensions.XSHA256">
            <summary>
            Implementation of the non-standard XSHA256 command
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.Extensions.XSHA256.GetXSHA256(System.Net.FtpClient.FtpClient,System.String)">
            <summary>
            Gets the SHA-256 hash of the specified file using XSHA256. This is a non-standard extension
            to the protocol and may or may not work. A FtpCommandException will be
            thrown if the command fails.
            </summary>
            <param name="client">FtpClient Object</param>
            <param name="path">Full or relative path to remote file</param>
            <returns>Server response, presumably the SHA-256 hash.</returns>
        </member>
        <member name="M:System.Net.FtpClient.Extensions.XSHA256.BeginGetXSHA256(System.Net.FtpClient.FtpClient,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronusly retrieve a SHA256 hash. The XSHA256 command is non-standard
            and not guaranteed to work.
            </summary>
            <param name="client">FtpClient Object</param>
            <param name="path">Full or relative path to remote file</param>
            <param name="callback">AsyncCallback</param>
            <param name="state">State Object</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:System.Net.FtpClient.Extensions.XSHA256.EndGetXSHA256(System.IAsyncResult)">
            <summary>
            Ends an asynchronous call to BeginGetXSHA256()
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetXSHA256()</param>
            <returns>The SHA-256 hash of the specified file.</returns>
        </member>
        <member name="T:System.Net.FtpClient.Extensions.XSHA512">
            <summary>
            Implementation of the non-standard XSHA512 command
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.Extensions.XSHA512.GetXSHA512(System.Net.FtpClient.FtpClient,System.String)">
            <summary>
            Gets the SHA-512 hash of the specified file using XSHA512. This is a non-standard extension
            to the protocol and may or may not work. A FtpCommandException will be
            thrown if the command fails.
            </summary>
            <param name="client">FtpClient Object</param>
            <param name="path">Full or relative path to remote file</param>
            <returns>Server response, presumably the SHA-512 hash.</returns>
        </member>
        <member name="M:System.Net.FtpClient.Extensions.XSHA512.BeginGetXSHA512(System.Net.FtpClient.FtpClient,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronusly retrieve a SHA512 hash. The XSHA512 command is non-standard
            and not guaranteed to work.
            </summary>
            <param name="client">FtpClient Object</param>
            <param name="path">Full or relative path to remote file</param>
            <param name="callback">AsyncCallback</param>
            <param name="state">State Object</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:System.Net.FtpClient.Extensions.XSHA512.EndGetXSHA512(System.IAsyncResult)">
            <summary>
            Ends an asynchronous call to BeginGetXSHA512()
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetXSHA512()</param>
            <returns>The SHA-512 hash of the specified file.</returns>
        </member>
        <member name="T:System.Net.FtpClient.FtpSslValidation">
            <summary>
            Event is fired when a ssl certificate needs to be validated
            </summary>
            <param name="control">The contol connection that triggered the event</param>
            <param name="e">Event args</param>
        </member>
        <member name="T:System.Net.FtpClient.FtpClient">
            <summary>
            FTP Control Connection. Speaks the FTP protocol with the server and
            provides facilities for performing basic transactions.
            
            Debugging problems with FTP transactions is much easier to do when
            you can see exactly what is sent to the server and the reply 
            System.Net.FtpClient gets in return. Please review the Debug example
            below for information on how to add TraceListeners for capturing
            the convorsation between System.Net.FtpClient and the server.
            </summary>
            <example>The following example illustrates how to assist in debugging
            System.Net.FtpClient by getting a transaction log from the server.
            <code source="..\Examples\Debug.cs" lang="cs" />
            </example>
            <example>The following example demonstrates adding a custom file
            listing parser in the event that you encounter a list format
            not already supported.
            <code source="..\Examples\CustomParser.cs" lang="cs" />
            </example>
            <example>The following example demonstrates how to validate
            a SSL certificate when using SSL/TLS.
            <code source="..\Examples\ValidateCertificate.cs" lang="cs" />
            </example>
            <example>The following example demonsrates how to download a file.
            <code source="..\Examples\OpenRead.cs" lang="cs" />
            </example>
            <example>The following example demonstrates how to download a file
            using a URI object.
            <code source="..\Examples\OpenReadURI.cs" lang="cs" />
            </example>
            <example>The following example demonstrates how to upload a file.
            <code source="..\Examples\OpenWrite.cs" lang="cs" />
            </example>
            <example>The following example demonstrates how to upload a file
            using a URI object.
            <code source="..\Examples\OpenWriteURI.cs" lang="cs" />
            </example>
            <example>The following example demonstrates how to append to a file.
            <code source="..\Examples\OpenAppend.cs" lang="cs" />
            </example>
            <example>The following example demonstrates how to append to a file
            using a URI object.
            <code source="..\Examples\OpenAppendURI.cs" lang="cs" />
            </example>
            <example>The following example demonstrates how to get a file
            listing from the server.
            <code source="..\Examples\GetListing.cs" lang="cs" />
            </example>
        </member>
        <member name="T:System.Net.FtpClient.IFtpClient">
            <summary>
            FTP Control Connection. Speaks the FTP protocol with the server and
            provides facilities for performing basic transactions.
            
            Debugging problems with FTP transactions is much easier to do when
            you can see exactly what is sent to the server and the reply 
            System.Net.FtpClient gets in return. Please review the Debug example
            below for information on how to add TraceListeners for capturing
            the convorsation between System.Net.FtpClient and the server.
            </summary>
            <example>The following example illustrates how to assist in debugging
            System.Net.FtpClient by getting a transaction log from the server.
            <code source="..\Examples\Debug.cs" lang="cs" />
            </example>
            <example>The following example demonstrates adding a custom file
            listing parser in the event that you encounter a list format
            not already supported.
            <code source="..\Examples\CustomParser.cs" lang="cs" />
            </example>
            <example>The following example demonstrates how to validate
            a SSL certificate when using SSL/TLS.
            <code source="..\Examples\ValidateCertificate.cs" lang="cs" />
            </example>
            <example>The following example demonsrates how to download a file.
            <code source="..\Examples\OpenRead.cs" lang="cs" />
            </example>
            <example>The following example demonstrates how to download a file
            using a URI object.
            <code source="..\Examples\OpenReadURI.cs" lang="cs" />
            </example>
            <example>The following example demonstrates how to upload a file.
            <code source="..\Examples\OpenWrite.cs" lang="cs" />
            </example>
            <example>The following example demonstrates how to upload a file
            using a URI object.
            <code source="..\Examples\OpenWriteURI.cs" lang="cs" />
            </example>
            <example>The following example demonstrates how to append to a file.
            <code source="..\Examples\OpenAppend.cs" lang="cs" />
            </example>
            <example>The following example demonstrates how to append to a file
            using a URI object.
            <code source="..\Examples\OpenAppendURI.cs" lang="cs" />
            </example>
            <example>The following example demonstrates how to get a file
            listing from the server.
            <code source="..\Examples\GetListing.cs" lang="cs" />
            </example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.HasFeature(System.Net.FtpClient.FtpCapability)">
            <summary>
            Performs a bitwise and to check if the specified
            flag is set on the Capabilities enum property.
            </summary>
            <param name="cap">The capability to check for</param>
            <returns>True if the feature was found</returns>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.Execute(System.String,System.Object[])">
            <summary>
            Executes a command
            </summary>
            <param name="command">The command to execute with optional format place holders</param>
            <param name="args">Format parameters to the command</param>
            <returns>The servers reply to the command</returns>
            <example><code source="..\Examples\Execute.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.Execute(System.String)">
            <summary>
            Executes a command
            </summary>
            <param name="command">The command to execute</param>
            <returns>The servers reply to the command</returns>
            <example><code source="..\Examples\Execute.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginExecute(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Performs an asynchronouse execution of the specified command
            </summary>
            <param name="command">The command to execute</param>
            <param name="callback">The AsyncCallback method</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginExecute.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndExecute(System.IAsyncResult)">
            <summary>
            Ends an asynchronous command
            </summary>
            <param name="ar">IAsyncResult returned from BeginExecute</param>
            <returns>FtpReply object (never null).</returns>
            <example><code source="..\Examples\BeginExecute.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.Connect">
            <summary>
            Connect to the server. Throws ObjectDisposedException if this object has been disposed.
            </summary>
            <example><code source="..\Examples\Connect.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginConnect(System.AsyncCallback,System.Object)">
            <summary>
            Initiates a connection to the server
            </summary>
            <param name="callback">AsyncCallback method</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginConnect.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndConnect(System.IAsyncResult)">
            <summary>
            Ends an asynchronous connection attempt to the server
            </summary>
            <param name="ar">IAsyncResult returned from BeginConnect()</param>
            <example><code source="..\Examples\BeginConnect.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.Disconnect">
            <summary>
            Disconnect from the server
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginDisconnect(System.AsyncCallback,System.Object)">
            <summary>
            Initiates a disconnection on the server
            </summary>
            <param name="callback">AsyncCallback method</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginDisconnect.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndDisconnect(System.IAsyncResult)">
            <summary>
            Ends a call to BeginDisconnect
            </summary>
            <param name="ar">IAsyncResult returned from BeginDisconnect</param>
            <example><code source="..\Examples\BeginConnect.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.OpenRead(System.String)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <returns>A stream for reading the file on the server</returns>
            <example><code source="..\Examples\OpenRead.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.OpenRead(System.String,System.Net.FtpClient.FtpDataType)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="type">ASCII/Binary</param>
            <returns>A stream for reading the file on the server</returns>
            <example><code source="..\Examples\OpenRead.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.OpenRead(System.String,System.Int64)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="restart">Resume location</param>
            <returns>A stream for reading the file on the server</returns>
            <example><code source="..\Examples\OpenRead.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.OpenRead(System.String,System.Net.FtpClient.FtpDataType,System.Int64)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="type">ASCII/Binary</param>
            <param name="restart">Resume location</param>
            <returns>A stream for reading the file on the server</returns>
            <example><code source="..\Examples\OpenRead.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginOpenRead(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenRead.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginOpenRead(System.String,System.Net.FtpClient.FtpDataType,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="type">ASCII/Binary</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenRead.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginOpenRead(System.String,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="restart">Resume location</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenRead.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginOpenRead(System.String,System.Net.FtpClient.FtpDataType,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="type">ASCII/Binary</param>
            <param name="restart">Resume location</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenRead.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndOpenRead(System.IAsyncResult)">
            <summary>
            Ends a call to BeginOpenRead()
            </summary>
            <param name="ar">IAsyncResult returned from BeginOpenRead()</param>
            <returns>A readable stream</returns>
            <example><code source="..\Examples\BeginOpenRead.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.OpenWrite(System.String)">
            <summary>
            Opens the specified file for writing
            </summary>
            <param name="path">Full or relative path of the file</param>
            <returns>A stream for writing to the file on the server</returns>
            <example><code source="..\Examples\OpenWrite.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.OpenWrite(System.String,System.Net.FtpClient.FtpDataType)">
            <summary>
            Opens the specified file for writing
            </summary>
            <param name="path">Full or relative path of the file</param>
            <param name="type">ASCII/Binary</param>
            <returns>A stream for writing to the file on the server</returns>
            <example><code source="..\Examples\OpenWrite.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginOpenWrite(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for writing
            </summary>
            <param name="path">Full or relative path of the file</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenWrite.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginOpenWrite(System.String,System.Net.FtpClient.FtpDataType,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for writing
            </summary>
            <param name="path">Full or relative path of the file</param>
            <param name="type">ASCII/Binary</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenWrite.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndOpenWrite(System.IAsyncResult)">
            <summary>
            Ends a call to BeginOpenWrite()
            </summary>
            <param name="ar">IAsyncResult returned from BeginOpenWrite()</param>
            <returns>A writable stream</returns>
            <example><code source="..\Examples\BeginOpenWrite.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.OpenAppend(System.String)">
            <summary>
            Opens the specified file to be appended to
            </summary>
            <param name="path">The full or relative path to the file to be opened</param>
            <returns>A stream for writing to the file on the server</returns>
            <example><code source="..\Examples\OpenAppend.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.OpenAppend(System.String,System.Net.FtpClient.FtpDataType)">
            <summary>
            Opens the specified file to be appended to
            </summary>
            <param name="path">The full or relative path to the file to be opened</param>
            <param name="type">ASCII/Binary</param>
            <returns>A stream for writing to the file on the server</returns>
            <example><code source="..\Examples\OpenAppend.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginOpenAppend(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for writing
            </summary>
            <param name="path">Full or relative path of the file</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenAppend.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginOpenAppend(System.String,System.Net.FtpClient.FtpDataType,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for writing
            </summary>
            <param name="path">Full or relative path of the file</param>
            <param name="type">ASCII/Binary</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenAppend.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndOpenAppend(System.IAsyncResult)">
            <summary>
            Ends a call to BeginOpenAppend()
            </summary>
            <param name="ar">IAsyncResult returned from BeginOpenWrite()</param>
            <returns>A writable stream</returns>
            <example><code source="..\Examples\BeginOpenAppend.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.DereferenceLink(System.Net.FtpClient.FtpListItem)">
            <summary>
            Recursively dereferences a symbolic link. See the
            MaximumDereferenceCount property for controlling
            how deep this method will recurse before giving up.
            </summary>
            <param name="item">The symbolic link</param>
            <returns>FtpListItem, null if the link can't be dereferenced</returns>
            <example><code source="..\Examples\DereferenceLink.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.DereferenceLink(System.Net.FtpClient.FtpListItem,System.Int32)">
            <summary>
            Recursively dereferences a symbolic link
            </summary>
            <param name="item">The symbolic link</param>
            <param name="recMax">The maximum depth of recursion that can be performed before giving up.</param>
            <returns>FtpListItem, null if the link can't be dereferenced</returns>
            <example><code source="..\Examples\DereferenceLink.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginDereferenceLink(System.Net.FtpClient.FtpListItem,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Derefence a FtpListItem object asynchronously
            </summary>
            <param name="item">The item to derefence</param>
            <param name="recMax">Maximum recursive calls</param>
            <param name="callback">AsyncCallback</param>
            <param name="state">State Object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginDereferenceLink.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginDereferenceLink(System.Net.FtpClient.FtpListItem,System.AsyncCallback,System.Object)">
            <summary>
            Derefence a FtpListItem object asynchronously. See the
            MaximumDereferenceCount property for controlling
            how deep this method will recurse before giving up.
            </summary>
            <param name="item">The item to derefence</param>
            <param name="callback">AsyncCallback</param>
            <param name="state">State Object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginDereferenceLink.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndDereferenceLink(System.IAsyncResult)">
            <summary>
            Ends a call to BeginDereferenceLink
            </summary>
            <param name="ar">IAsyncResult</param>
            <returns>FtpListItem, null if the link can't be dereferenced</returns>
            <example><code source="..\Examples\BeginDereferenceLink.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.GetObjectInfo(System.String)">
            <summary>
            Returns information about a file system object. You should check the Capabilities
            flags for the FtpCapability.MLSD flag before calling this method. Failing to do
            so will result in an InvalidOperationException being thrown when the server
            does not support machine listings. Returns null if the server response can't
            be parsed or the server returns a failure completion code. The error for a failure
            is logged with FtpTrace. No exception is thrown on error because that would negate
            the usefullness of this method for checking for the existence of an object.
            </summary>
            <param name="path">The path of the object to retrieve information about</param>
            <returns>A FtpListItem object</returns>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginGetObjectInfo(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Returns information about a file system object. You should check the Capabilities
            flags for the FtpCapability.MLSD flag before calling this method. Failing to do
            so will result in an InvalidOperationException being thrown when the server
            does not support machine listings. Returns null if the server response can't
            be parsed or the server returns a failure completion code. The error for a failure
            is logged with FtpTrace. No exception is thrown on error because that would negate
            the usefullness of this method for checking for the existence of an object.
            </summary>
            <param name="path">Path of the item to retrieve information about</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndGetObjectInfo(System.IAsyncResult)">
            <summary>
            Ends a call to BeginGetObjectInfo
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetObjectInfo</param>
            <returns>FtpListItem if the command succeeded, null if there was a problem.</returns>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.GetListing">
            <summary>
            Gets a file listing from the server. Each FtpListItem object returned
            contains information about the file that was able to be retrieved. If
            a DateTime property is equal to DateTime.MinValue then it means the 
            date in question was not able to be retrieved. If the Size property
            is equal to 0 then it means the size of the object could also not
            be retrieved.
            </summary>
            <returns>An array of FtpListItem objects</returns>
            <example><code source="..\Examples\GetListing.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.GetListing(System.String)">
            <summary>
            Gets a file listing from the server. Each FtpListItem object returned
            contains information about the file that was able to be retrieved. If
            a DateTime property is equal to DateTime.MinValue then it means the 
            date in question was not able to be retrieved. If the Size property
            is equal to 0 then it means the size of the object could also not
            be retrieved.
            </summary>
            <param name="path">The path of the directory to list</param>
            <returns>An array of FtpListItem objects</returns>
            <example><code source="..\Examples\GetListing.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.GetListing(System.String,System.Net.FtpClient.FtpListOption)">
            <summary>
            Gets a file listing from the server. Each FtpListItem object returned
            contains information about the file that was able to be retrieved. If
            a DateTime property is equal to DateTime.MinValue then it means the 
            date in question was not able to be retrieved. If the Size property
            is equal to 0 then it means the size of the object could also not
            be retrieved.
            </summary>
            <param name="path">The path of the directory to list</param>
            <param name="options">Options that dictacte how a list is performed and what information is gathered.</param>
            <returns>An array of FtpListItem objects</returns>
            <example><code source="..\Examples\GetListing.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginGetListing(System.AsyncCallback,System.Object)">
            <summary>
            Gets a file listing from the server asynchronously
            </summary>
            <param name="callback">AsyncCallback method</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetListing.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginGetListing(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Gets a file listing from the server asynchronously
            </summary>
            <param name="path">The path to list</param>
            <param name="callback">AsyncCallback method</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetListing.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginGetListing(System.String,System.Net.FtpClient.FtpListOption,System.AsyncCallback,System.Object)">
            <summary>
            Gets a file listing from the server asynchronously
            </summary>
            <param name="path">The path to list</param>
            <param name="options">Options that dictate how the list operation is performed</param>
            <param name="callback">AsyncCallback method</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetListing.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndGetListing(System.IAsyncResult)">
            <summary>
            Ends an asynchronous file listing
            </summary>
            <param name="ar">IAsyncResult return from BeginGetListing()</param>
            <returns>An array of items retrieved in the listing</returns>
            <example><code source="..\Examples\BeginGetListing.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.GetNameListing">
            <summary>
            Returns a file/directory listing using the NLST command.
            </summary>
            <returns>A string array of file and directory names if any were returned.</returns>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.GetNameListing(System.String)">
            <summary>
            Returns a file/directory listing using the NLST command.
            </summary>
            <param name="path">The path of the directory to list</param>
            <returns>A string array of file and directory names if any were returned.</returns>
            <example><code source="..\Examples\GetNameListing.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginGetNameListing(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously gets a list of file and directory names for the specified path.
            </summary>
            <param name="path">The path of the directory to list</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetNameListing.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginGetNameListing(System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously gets a list of file and directory names for the specified path.
            </summary>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetNameListing.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndGetNameListing(System.IAsyncResult)">
            <summary>
            Ends a call to BeginGetNameListing()
            </summary>
            <param name="ar">IAsyncResult object returned from BeginGetNameListing</param>
            <returns>An array of file and directory names if any were returned.</returns>
            <example><code source="..\Examples\BeginGetNameListing.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.SetWorkingDirectory(System.String)">
            <summary>
            Sets the work directory on the server
            </summary>
            <param name="path">The path of the directory to change to</param>
            <example><code source="..\Examples\SetWorkingDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginSetWorkingDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously changes the working directory on the server
            </summary>
            <param name="path">The directory to change to</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginSetWorkingDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndSetWorkingDirectory(System.IAsyncResult)">
            <summary>
            Ends asynchronous directory change
            </summary>
            <param name="ar">IAsyncResult returned from BeginSetWorkingDirectory</param>
            <example><code source="..\Examples\BeginSetWorkingDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.GetWorkingDirectory">
            <summary>
            Gets the current working directory
            </summary>
            <returns>The current working directory, ./ if the response couldn't be parsed.</returns>
            <example><code source="..\Examples\GetWorkingDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginGetWorkingDirectory(System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously retrieves the working directory
            </summary>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetWorkingDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndGetWorkingDirectory(System.IAsyncResult)">
            <summary>
            Ends an asynchronous call to retrieve the working directory
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetWorkingDirectory</param>
            <returns>The current working directory</returns>
            <example><code source="..\Examples\BeginGetWorkingDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.GetFileSize(System.String)">
            <summary>
            Gets the size of the file
            </summary>
            <param name="path">The full or relative path of the file</param>
            <returns>-1 if the command fails, otherwise the file size</returns>
            <example><code source="..\Examples\GetFileSize.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginGetFileSize(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously retrieve the size of the specified file
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetFileSize.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndGetFileSize(System.IAsyncResult)">
            <summary>
            Ends a call to BeginGetFileSize()
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetFileSize</param>
            <returns>The size of the file, -1 if there was a problem.</returns>
            <example><code source="..\Examples\BeginGetFileSize.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.GetModifiedTime(System.String)">
            <summary>
            Gets the modified time of the file
            </summary>
            <param name="path">The full path to the file</param>
            <returns>The modified time, DateTime.MinValue if there was a problem</returns>
            <example><code source="..\Examples\GetModifiedTime.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginGetModifiedTime(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Gets the modified time of the file
            </summary>
            <param name="path">The full path to the file</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetModifiedTime.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndGetModifiedTime(System.IAsyncResult)">
            <summary>
            Ends a call to BeginGetModifiedTime()
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetModifiedTime()</param>
            <returns>The modified time, DateTime.MinValue if there was a problem</returns>
            <example><code source="..\Examples\BeginGetModifiedTime.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.DeleteFile(System.String)">
            <summary>
            Deletes a file on the server
            </summary>
            <param name="path">The full or relative path to the file</param>
            <example><code source="..\Examples\DeleteFile.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginDeleteFile(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously deletes a file from the server
            </summary>
            <param name="path">The full or relative path to the file</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginDeleteFile.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndDeleteFile(System.IAsyncResult)">
            <summary>
            Ends a call to BeginDeleteFile
            </summary>
            <param name="ar">IAsyncResult returned from BeginDeleteFile</param>
            <example><code source="..\Examples\BeginDeleteFile.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.DeleteDirectory(System.String)">
            <summary>
            Deletes the specified directory on the server.
            </summary>
            <param name="path">The full or relative path of the directory to delete</param>
            <example><code source="..\Examples\DeleteDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Delets the specified directory on the server
            </summary>
            <param name="path">The full or relative path of the directory to delete</param>
            <param name="force">If the directory is not empty, remove its contents</param>
            <example><code source="..\Examples\DeleteDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.DeleteDirectory(System.String,System.Boolean,System.Net.FtpClient.FtpListOption)">
            <summary>
            Deletes the specified directory on the server
            </summary>
            <param name="path">The full or relative path of the directory to delete</param>
            <param name="force">If the directory is not empty, remove its contents</param>
            <param name="options">FtpListOptions for controlling how the directory
            contents are retrieved with the force option is true. If you experience problems
            the file listing can be fine tuned through this parameter.</param>
            <example><code source="..\Examples\DeleteDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginDeleteDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously removes a directory from the server
            </summary>
            <param name="path">The full or relative path of the directory to delete</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginDeleteDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginDeleteDirectory(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously removes a directory from the server
            </summary>
            <param name="path">The full or relative path of the directory to delete</param>
            <param name="force">If the directory is not empty, remove its contents</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginDeleteDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginDeleteDirectory(System.String,System.Boolean,System.Net.FtpClient.FtpListOption,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously removes a directory from the server
            </summary>
            <param name="path">The full or relative path of the directory to delete</param>
            <param name="force">If the directory is not empty, remove its contents</param>
            <param name="options">FtpListOptions for controlling how the directory
            contents are retrieved with the force option is true. If you experience problems
            the file listing can be fine tuned through this parameter.</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginDeleteDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndDeleteDirectory(System.IAsyncResult)">
            <summary>
            Ends a call to BeginDeleteDirectory()
            </summary>
            <param name="ar">IAsyncResult returned from BeginDeleteDirectory</param>
            <example><code source="..\Examples\BeginDeleteDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.DirectoryExists(System.String)">
            <summary>
            Tests if the specified directory exists on the server. This
            method works by trying to change the working directory to
            the path specified. If it succeeds, the directory is changed
            back to the old working directory and true is returned. False
            is returned otherwise and since the CWD failed it is assumed
            the working directory is still the same.
            </summary>
            <param name="path">The path of the directory</param>
            <returns>True if it exists, false otherwise.</returns>
            <example><code source="..\Examples\DirectoryExists.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginDirectoryExists(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Checks if a directory exists on the server asynchronously.
            </summary>
            <returns>IAsyncResult</returns>
            <param name='path'>The full or relative path of the directory to check for</param>
            <param name='callback'>Async callback</param>
            <param name='state'>State object</param>
            <example><code source="..\Examples\BeginDirectoryExists.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndDirectoryExists(System.IAsyncResult)">
            <summary>
            Ends a call to BeginDirectoryExists
            </summary>
            <param name="ar">IAsyncResult returned from BeginDirectoryExists</param>
            <returns>True if the directory exists. False otherwise.</returns>
            <example><code source="..\Examples\BeginDirectoryExists.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.FileExists(System.String)">
            <summary>
            Checks if a file exsts on the server by taking a 
            file listing of the parent directory in the path
            and comparing the results the path supplied.
            </summary>
            <param name="path">The full or relative path to the file</param>
            <returns>True if the file exists</returns>
            <example><code source="..\Examples\FileExists.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.FileExists(System.String,System.Net.FtpClient.FtpListOption)">
            <summary>
            Checks if a file exsts on the server by taking a 
            file listing of the parent directory in the path
            and comparing the results the path supplied.
            </summary>
            <param name="path">The full or relative path to the file</param>
            <param name="options">Options for controling the file listing used to
            determine if the file exists.</param>
            <returns>True if the file exists</returns>
            <example><code source="..\Examples\FileExists.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginFileExists(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Checks if a file exsts on the server by taking a 
            file listing of the parent directory in the path
            and comparing the results the path supplied.
            </summary>
            <param name="path">The full or relative path to the file</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginFileExists.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginFileExists(System.String,System.Net.FtpClient.FtpListOption,System.AsyncCallback,System.Object)">
            <summary>
            Checks if a file exsts on the server by taking a 
            file listing of the parent directory in the path
            and comparing the results the path supplied.
            </summary>
            <param name="path">The full or relative path to the file</param>
            <param name="options">Options for controling the file listing used to
            determine if the file exists.</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginFileExists.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndFileExists(System.IAsyncResult)">
            <summary>
            Ends a call to BeginFileExists
            </summary>
            <param name="ar">IAsyncResult returned from BeginFileExists</param>
            <returns>True if the file exists</returns>
            <example><code source="..\Examples\BeginFileExists.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.CreateDirectory(System.String)">
            <summary>
            Creates a directory on the server. If the preceding
            directories do not exist they are created.
            </summary>
            <param name="path">The full or relative path to the new directory</param>
            <example><code source="..\Examples\CreateDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.CreateDirectory(System.String,System.Boolean)">
            <summary>
            Creates a directory on the server
            </summary>
            <param name="path">The full or relative path to the directory to create</param>
            <param name="force">Try to force all non-existant pieces of the path to be created</param>
            <example><code source="..\Examples\CreateDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginCreateDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Creates a directory asynchronously
            </summary>
            <param name="path">The full or relative path to the directory to create</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginCreateDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginCreateDirectory(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Creates a directory asynchronously
            </summary>
            <param name="path">The full or relative path to the directory to create</param>
            <param name="force">Try to create the whole path if the preceding directories do not exist</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginCreateDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndCreateDirectory(System.IAsyncResult)">
            <summary>
            Ends a call to BeginCreateDirectory
            </summary>
            <param name="ar">IAsyncResult returned from BeginCreateDirectory</param>
            <example><code source="..\Examples\BeginCreateDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.Rename(System.String,System.String)">
            <summary>
            Renames an object on the remote file system.
            </summary>
            <param name="path">The full or relative path to the object</param>
            <param name="dest">The old or new full or relative path including the new name of the object</param>
            <example><code source="..\Examples\Rename.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginRename(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously renames an object on the server
            </summary>
            <param name="path">The full or relative path to the object</param>
            <param name="dest">The old or new full or relative path including the new name of the object</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginRename.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndRename(System.IAsyncResult)">
            <summary>
            Ends a call to BeginRename
            </summary>
            <param name="ar">IAsyncResult returned from BeginRename</param>
            <example><code source="..\Examples\BeginRename.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.GetHashAlgorithm">
            <summary>
            Gets the currently selected hash algorith for the HASH
            command. This feature is experimental. See this link
            for details:
            http://tools.ietf.org/html/draft-bryan-ftpext-hash-02
            </summary>
            <returns>The FtpHashType flag or FtpHashType.NONE if there was a problem.</returns>
            <example><code source="..\Examples\GetHashAlgorithm.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginGetHashAlgorithm(System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously get the hash algorithm being used by the HASH command.
            </summary>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndGetHashAlgorithm(System.IAsyncResult)">
            <summary>
            Ends a call to BeginGetHashAlgorithm
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetHashAlgorithm</param>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.SetHashAlgorithm(System.Net.FtpClient.FtpHashAlgorithm)">
            <summary>
            Tells the server which hash algorith to use
            for the HASH command. If you specifiy an 
            algorithm not listed in FtpClient.HashTypes
            a NotImplemented() exectpion will be thrown
            so be sure to query that list of Flags before
            selecting a hash algorithm. Support for the
            HASH command is experimental. Please see
            the following link for more details:
            http://tools.ietf.org/html/draft-bryan-ftpext-hash-02
            </summary>
            <param name="type">Hash Algorithm</param>
            <example><code source="..\Examples\SetHashAlgorithm.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginSetHashAlgorithm(System.Net.FtpClient.FtpHashAlgorithm,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously sets the hash algorithm type to be used with the HASH command.
            </summary>
            <param name="type">Hash algorithm to use</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndSetHashAlgorithm(System.IAsyncResult)">
            <summary>
            Ends an asynchronous call to BeginSetHashAlgorithm
            </summary>
            <param name="ar">IAsyncResult returned from BeginSetHashAlgorithm</param>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.GetHash(System.String)">
            <summary>
            Gets the hash of an object on the server using the
            currently selected hash algorithm. Supported
            algorithms, if any, are available in the HashAlgorithms
            property. You should confirm that it's not equal
            to FtpHashAlgorithm.NONE before calling this method
            otherwise the server trigger a FtpCommandException()
            due to a lack of support for the HASH command. You can
            set the algorithm using the SetHashAlgorithm() method and
            you can query the server for the current hash algorithm
            using the GetHashAlgorithm() method.
            
            This feature is experimental and based on the following draft:
            http://tools.ietf.org/html/draft-bryan-ftpext-hash-02
            </summary>
            <param name="path">Full or relative path of the object to compute the hash for.</param>
            <returns>The hash of the file.</returns>
            <example><code source="..\Examples\GetHash.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginGetHash(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously retrieves the hash for the specified file
            </summary>
            <param name="path">The file you want the server to compute the hash for</param>
            <param name="callback">AsyncCallback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndGetHash(System.IAsyncResult)">
            <summary>
            Ends an asynchronous call to BeginGetHash
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetHash</param>
        </member>
        <member name="M:System.Net.FtpClient.IFtpClient.DisableUTF8">
            <summary>
            Disables UTF8 support and changes the Encoding property
            back to ASCII. If the server returns an error when trying
            to turn UTF8 off a FtpCommandException will be thrown.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpClient.IsDisposed">
            <summary>
            Gets a value indicating if this object has already been disposed.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpClient.InternetProtocolVersions">
            <summary>
            Flags specifying which versions of the internet protocol to
            support when making a connection. All addresses returned during
            name resolution are tried until a successful connection is made.
            You can fine tune which versions of the internet protocol to use
            by adding or removing flags here. I.e., setting this property
            to FtpIpVersion.IPv4 will cause the connection process to
            ignore IPv6 addresses. The default value is ANY version.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpClient.SocketPollInterval">
            <summary>
            Gets or sets the length of time in miliseconds
            that must pass since the last socket activity
            before calling Poll() on the socket to test for
            connectivity. Setting this interval too low will
            have a negative impact on perfomance. Setting this
            interval to 0 disables Poll()'ing all together.
            The default value is 15 seconds.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpClient.StaleDataCheck">
            <summary>
            Gets or sets a value indicating whether a test should be performed to
            see if there is stale (unrequested data) sitting on the socket. In some
            cases the control connection may time out but before the server closes
            the connection it might send a 4xx response that was unexpected and
            can cause synchronization errors with transactions. To avoid this
            problem the Execute() method checks to see if there is any data
            available on the socket before executing a command. On Azure hosting
            platforms this check can cause an exception to be thrown. In order
            to work around the exception you can set this property to false
            which will skip the test entirely however doing so eliminates the
            best effort attempt of detecting such scenarios. See this thread
            for more details about the Azure problem:
            https://netftp.codeplex.com/discussions/535879
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpClient.IsConnected">
            <summary>
            Gets a value indicating if the connection is alive
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpClient.EnableThreadSafeDataConnections">
            <summary>
            When this value is set to true (default) the control connection
            is cloned and a new connection the server is established for the
            data channel operation. This is a thread safe approach to make
            asynchronous operations on a single control connection transparent
            to the developer.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpClient.Encoding">
            <summary>
            Gets or sets the text encoding being used when talking with the server. The default
            value is Encoding.ASCII however upon connection, the client checks
            for UTF8 support and if it's there this property is switched over to
            Encoding.UTF8. Manually setting this value overrides automatic detection
            based on the FEAT list; if you change this value it's always used
            regardless of what the server advertises, if anything.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpClient.Host">
            <summary>
            The server to connect to
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpClient.Port">
            <summary>
            The port to connect to. If this value is set to 0 (Default) the port used
            will be determined by the type of SSL used or if no SSL is to be used it 
            will automatically connect to port 21.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpClient.Credentials">
            <summary>
            Credentials used for authentication
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpClient.MaximumDereferenceCount">
            <summary>
            Gets or sets a value that controls the maximum depth
            of recursion that DereferenceLink() will follow symbolic
            links before giving up. You can also specify the value
            to be used as one of the overloaded parameters to the
            DereferenceLink() method. The default value is 20. Specifying
            -1 here means inifinitly try to resolve a link. This is
            not recommended for obvious reasons (stack overflow).
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpClient.ClientCertificates">
            <summary>
            Client certificates to be used in SSL authentication process
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpClient.DataConnectionType">
            <summary>
            Data connection type, default is AutoPassive which tries
            a connection with EPSV first and if it fails then tries
            PASV before giving up. If you know exactly which kind of
            connection you need you can slightly increase performance
            by defining a speicific type of passive or active data
            connection here.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpClient.UngracefullDisconnection">
            <summary>
            Disconnect from the server without sending QUIT. This helps
            work around IOExceptions caused by buggy connection resets
            when closing the control connection.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpClient.ConnectTimeout">
            <summary>
            Gets or sets the length of time in miliseconds to wait for a connection 
            attempt to succeed before giving up. Default is 15000 (15 seconds).
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpClient.ReadTimeout">
            <summary>
            Gets or sets the length of time wait in miliseconds for data to be
            read from the underlying stream. The default value is 15000 (15 seconds).
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpClient.DataConnectionConnectTimeout">
            <summary>
            Gets or sets the length of time in miliseconds for a data connection
            to be established before giving up. Default is 15000 (15 seconds).
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpClient.DataConnectionReadTimeout">
            <summary>
            Gets or sets the length of time in miliseconds the data channel
            should wait for the server to send data. Default value is 
            15000 (15 seconds).
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpClient.SocketKeepAlive">
            <summary>
            Gets or sets a value indicating if SocketOption.KeepAlive should be set on 
            the underlying stream's socket. If the connection is alive, the option is
            adjusted in real-time. The value is stored and the KeepAlive option is set
            accordingly upon any new connections. The value set here is also applied to
            all future data streams. It has no affect on cloned control connections or
            data connections already in progress. The default value is false.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpClient.Capabilities">
            <summary>
            Gets the server capabilties represented by flags
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpClient.HashAlgorithms">
            <summary>
            Get the hash types supported by the server, if any. This
            is a recent extension to the protocol that is not fully
            standardized and is not guarateed to work. See here for
            more details:
            http://tools.ietf.org/html/draft-bryan-ftpext-hash-02
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpClient.EncryptionMode">
            <summary>
            Type of SSL to use, or none. Default is none. Explicit is TLS, Implicit is SSL.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpClient.DataConnectionEncryption">
            <summary>
            Indicates if data channel transfers should be encrypted. Only valid if EncryptionMode
            property is not equal to FtpSslMode.None.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpClient.SystemType">
            <summary>
            Gets the type of system/server that we're
            connected to.
            </summary>
        </member>
        <member name="E:System.Net.FtpClient.IFtpClient.ValidateCertificate">
            <summary>
            Event is fired to validate SSL certificates. If this event is
            not handled and there are errors validating the certificate
            the connection will be aborted.
            </summary>
            <example><code source="..\Examples\ValidateCertificate.cs" lang="cs" /></example>
        </member>
        <member name="F:System.Net.FtpClient.FtpClient.m_lock">
            <summary>
            Used for internally syncrhonizing access to this
            object from multiple threads
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpClient.m_asyncmethods">
            <summary>
            A list of asynchronoous methods that are in progress
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpClient.m_stream">
            <summary>
            Control connection socket stream
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.HasFeature(System.Net.FtpClient.FtpCapability)">
            <summary>
            Performs a bitwise and to check if the specified
            flag is set on the Capabilities enum property.
            </summary>
            <param name="cap">The capability to check for</param>
            <returns>True if the feature was found</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OnValidateCertficate(System.Net.FtpClient.FtpSslValidationEventArgs)">
            <summary>
            Fires the SSL validation event
            </summary>
            <param name="e">Event Args</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetAsyncDelegate``1(System.IAsyncResult)">
            <summary>
            Retretieves the delegate for the specified IAsyncResult and removes
            it from the m_asyncmethods collection if the operation is successfull
            </summary>
            <typeparam name="T">Type of delegate to retrieve</typeparam>
            <param name="ar">The IAsyncResult to retrieve the delegate for</param>
            <returns>The delegate that generated the specified IAsyncResult</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.CloneConnection">
            <summary>
            Clones the control connection for opening multipe data streams
            </summary>
            <returns>A new control connection with the same property settings as this one</returns>
            <example><code source="..\Examples\CloneConnection.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetReply">
            <summary>
            Retreives a reply from the server. Do not execute this method
            unless you are sure that a reply has been sent, i.e., you
            executed a command. Doing so will cause the code to hang
            indefinitely waiting for a server reply that is never comming.
            </summary>
            <returns>FtpReply representing the response from the server</returns>
            <example><code source="..\Examples\BeginGetReply.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Execute(System.String,System.Object[])">
            <summary>
            Executes a command
            </summary>
            <param name="command">The command to execute with optional format place holders</param>
            <param name="args">Format parameters to the command</param>
            <returns>The servers reply to the command</returns>
            <example><code source="..\Examples\Execute.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Execute(System.String)">
            <summary>
            Executes a command
            </summary>
            <param name="command">The command to execute</param>
            <returns>The servers reply to the command</returns>
            <example><code source="..\Examples\Execute.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginExecute(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Performs an asynchronouse execution of the specified command
            </summary>
            <param name="command">The command to execute</param>
            <param name="callback">The AsyncCallback method</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginExecute.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.EndExecute(System.IAsyncResult)">
            <summary>
            Ends an asynchronous command
            </summary>
            <param name="ar">IAsyncResult returned from BeginExecute</param>
            <returns>FtpReply object (never null).</returns>
            <example><code source="..\Examples\BeginExecute.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Connect">
            <summary>
            Connect to the server. Throws ObjectDisposedException if this object has been disposed.
            </summary>
            <example><code source="..\Examples\Connect.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Authenticate">
            <summary>
            Performs a login on the server. This method is overridable so
            that the login procedure can be changed to support, for example,
            a FTP proxy.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetFeatures(System.Net.FtpClient.FtpReply)">
            <summary>
            Populates the capabilities flags based on capabilities
            supported by this server. This method is overridable
            so that new features can be supported
            </summary>
            <param name="reply">The reply object from the FEAT command. The InfoMessages property will
            contain a list of the features the server supported delimited by a new line '\n' character.</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginConnect(System.AsyncCallback,System.Object)">
            <summary>
            Initiates a connection to the server
            </summary>
            <param name="callback">AsyncCallback method</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginConnect.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.EndConnect(System.IAsyncResult)">
            <summary>
            Ends an asynchronous connection attempt to the server
            </summary>
            <param name="ar">IAsyncResult returned from BeginConnect()</param>
            <example><code source="..\Examples\BeginConnect.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.FireValidateCertficate(System.Net.FtpClient.FtpSocketStream,System.Net.FtpClient.FtpSslValidationEventArgs)">
            <summary>
            Catches the socket stream ssl validation event and fires the event handlers
            attached to this object for validating SSL certificates
            </summary>
            <param name="stream">The stream that fired the event</param>
            <param name="e">The event args used to validate the certficate</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Disconnect">
            <summary>
            Disconnect from the server
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginDisconnect(System.AsyncCallback,System.Object)">
            <summary>
            Initiates a disconnection on the server
            </summary>
            <param name="callback">AsyncCallback method</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginDisconnect.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.EndDisconnect(System.IAsyncResult)">
            <summary>
            Ends a call to BeginDisconnect
            </summary>
            <param name="ar">IAsyncResult returned from BeginDisconnect</param>
            <example><code source="..\Examples\BeginConnect.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenPassiveDataStream(System.Net.FtpClient.FtpDataConnectionType,System.String,System.Int64)">
            <summary>
            Opens the specified type of passive data stream
            </summary>
            <param name="type">Type of passive data stream to open</param>
            <param name="command">The command to execute that requires a data stream</param>
            <param name="restart">Restart location in bytes for file transfer</param>
            <returns>A data stream ready to be used</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenActiveDataStream(System.Net.FtpClient.FtpDataConnectionType,System.String,System.Int64)">
            <summary>
            Opens the specified type of active data stream
            </summary>
            <param name="type">Type of passive data stream to open</param>
            <param name="command">The command to execute that requires a data stream</param>
            <param name="restart">Restart location in bytes for file transfer</param>
            <returns>A data stream ready to be used</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenDataStream(System.String,System.Int64)">
            <summary>
            Opens a data stream.
            </summary>
            <param name='command'>The command to execute that requires a data stream</param>
            <param name="restart">Restart location in bytes for file transfer</param>
            <returns>The data stream.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.CloseDataStream(System.Net.FtpClient.FtpDataStream)">
            <summary>
            Disconnects a data stream
            </summary>
            <param name="stream">The data stream to close</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenRead(System.String)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <returns>A stream for reading the file on the server</returns>
            <example><code source="..\Examples\OpenRead.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenRead(System.String,System.Net.FtpClient.FtpDataType)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="type">ASCII/Binary</param>
            <returns>A stream for reading the file on the server</returns>
            <example><code source="..\Examples\OpenRead.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenRead(System.String,System.Int64)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="restart">Resume location</param>
            <returns>A stream for reading the file on the server</returns>
            <example><code source="..\Examples\OpenRead.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenRead(System.String,System.Net.FtpClient.FtpDataType,System.Int64)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="type">ASCII/Binary</param>
            <param name="restart">Resume location</param>
            <returns>A stream for reading the file on the server</returns>
            <example><code source="..\Examples\OpenRead.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginOpenRead(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenRead.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginOpenRead(System.String,System.Net.FtpClient.FtpDataType,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="type">ASCII/Binary</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenRead.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginOpenRead(System.String,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="restart">Resume location</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenRead.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginOpenRead(System.String,System.Net.FtpClient.FtpDataType,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="type">ASCII/Binary</param>
            <param name="restart">Resume location</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenRead.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.EndOpenRead(System.IAsyncResult)">
            <summary>
            Ends a call to BeginOpenRead()
            </summary>
            <param name="ar">IAsyncResult returned from BeginOpenRead()</param>
            <returns>A readable stream</returns>
            <example><code source="..\Examples\BeginOpenRead.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenWrite(System.String)">
            <summary>
            Opens the specified file for writing
            </summary>
            <param name="path">Full or relative path of the file</param>
            <returns>A stream for writing to the file on the server</returns>
            <example><code source="..\Examples\OpenWrite.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenWrite(System.String,System.Net.FtpClient.FtpDataType)">
            <summary>
            Opens the specified file for writing
            </summary>
            <param name="path">Full or relative path of the file</param>
            <param name="type">ASCII/Binary</param>
            <returns>A stream for writing to the file on the server</returns>
            <example><code source="..\Examples\OpenWrite.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginOpenWrite(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for writing
            </summary>
            <param name="path">Full or relative path of the file</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenWrite.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginOpenWrite(System.String,System.Net.FtpClient.FtpDataType,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for writing
            </summary>
            <param name="path">Full or relative path of the file</param>
            <param name="type">ASCII/Binary</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenWrite.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.EndOpenWrite(System.IAsyncResult)">
            <summary>
            Ends a call to BeginOpenWrite()
            </summary>
            <param name="ar">IAsyncResult returned from BeginOpenWrite()</param>
            <returns>A writable stream</returns>
            <example><code source="..\Examples\BeginOpenWrite.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenAppend(System.String)">
            <summary>
            Opens the specified file to be appended to
            </summary>
            <param name="path">The full or relative path to the file to be opened</param>
            <returns>A stream for writing to the file on the server</returns>
            <example><code source="..\Examples\OpenAppend.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenAppend(System.String,System.Net.FtpClient.FtpDataType)">
            <summary>
            Opens the specified file to be appended to
            </summary>
            <param name="path">The full or relative path to the file to be opened</param>
            <param name="type">ASCII/Binary</param>
            <returns>A stream for writing to the file on the server</returns>
            <example><code source="..\Examples\OpenAppend.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginOpenAppend(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for writing
            </summary>
            <param name="path">Full or relative path of the file</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenAppend.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginOpenAppend(System.String,System.Net.FtpClient.FtpDataType,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for writing
            </summary>
            <param name="path">Full or relative path of the file</param>
            <param name="type">ASCII/Binary</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenAppend.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.EndOpenAppend(System.IAsyncResult)">
            <summary>
            Ends a call to BeginOpenAppend()
            </summary>
            <param name="ar">IAsyncResult returned from BeginOpenWrite()</param>
            <returns>A writable stream</returns>
            <example><code source="..\Examples\BeginOpenAppend.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.DereferenceLink(System.Net.FtpClient.FtpListItem)">
            <summary>
            Recursively dereferences a symbolic link. See the
            MaximumDereferenceCount property for controlling
            how deep this method will recurse before giving up.
            </summary>
            <param name="item">The symbolic link</param>
            <returns>FtpListItem, null if the link can't be dereferenced</returns>
            <example><code source="..\Examples\DereferenceLink.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.DereferenceLink(System.Net.FtpClient.FtpListItem,System.Int32)">
            <summary>
            Recursively dereferences a symbolic link
            </summary>
            <param name="item">The symbolic link</param>
            <param name="recMax">The maximum depth of recursion that can be performed before giving up.</param>
            <returns>FtpListItem, null if the link can't be dereferenced</returns>
            <example><code source="..\Examples\DereferenceLink.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.DereferenceLink(System.Net.FtpClient.FtpListItem,System.Int32,System.Int32@)">
            <summary>
            Derefence a FtpListItem object
            </summary>
            <param name="item">The item to derefence</param>
            <param name="recMax">Maximum recursive calls</param>
            <param name="count">Counter</param>
            <returns>FtpListItem, null if the link can't be dereferenced</returns>
            <example><code source="..\Examples\DereferenceLink.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginDereferenceLink(System.Net.FtpClient.FtpListItem,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Derefence a FtpListItem object asynchronously
            </summary>
            <param name="item">The item to derefence</param>
            <param name="recMax">Maximum recursive calls</param>
            <param name="callback">AsyncCallback</param>
            <param name="state">State Object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginDereferenceLink.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginDereferenceLink(System.Net.FtpClient.FtpListItem,System.AsyncCallback,System.Object)">
            <summary>
            Derefence a FtpListItem object asynchronously. See the
            MaximumDereferenceCount property for controlling
            how deep this method will recurse before giving up.
            </summary>
            <param name="item">The item to derefence</param>
            <param name="callback">AsyncCallback</param>
            <param name="state">State Object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginDereferenceLink.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.EndDereferenceLink(System.IAsyncResult)">
            <summary>
            Ends a call to BeginDereferenceLink
            </summary>
            <param name="ar">IAsyncResult</param>
            <returns>FtpListItem, null if the link can't be dereferenced</returns>
            <example><code source="..\Examples\BeginDereferenceLink.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetObjectInfo(System.String)">
            <summary>
            Returns information about a file system object. You should check the Capabilities
            flags for the FtpCapability.MLSD flag before calling this method. Failing to do
            so will result in an InvalidOperationException being thrown when the server
            does not support machine listings. Returns null if the server response can't
            be parsed or the server returns a failure completion code. The error for a failure
            is logged with FtpTrace. No exception is thrown on error because that would negate
            the usefullness of this method for checking for the existence of an object.
            </summary>
            <param name="path">The path of the object to retrieve information about</param>
            <returns>A FtpListItem object</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginGetObjectInfo(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Returns information about a file system object. You should check the Capabilities
            flags for the FtpCapability.MLSD flag before calling this method. Failing to do
            so will result in an InvalidOperationException being thrown when the server
            does not support machine listings. Returns null if the server response can't
            be parsed or the server returns a failure completion code. The error for a failure
            is logged with FtpTrace. No exception is thrown on error because that would negate
            the usefullness of this method for checking for the existence of an object.
            </summary>
            <param name="path">Path of the item to retrieve information about</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.EndGetObjectInfo(System.IAsyncResult)">
            <summary>
            Ends a call to BeginGetObjectInfo
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetObjectInfo</param>
            <returns>FtpListItem if the command succeeded, null if there was a problem.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetListing">
            <summary>
            Gets a file listing from the server. Each FtpListItem object returned
            contains information about the file that was able to be retrieved. If
            a DateTime property is equal to DateTime.MinValue then it means the 
            date in question was not able to be retrieved. If the Size property
            is equal to 0 then it means the size of the object could also not
            be retrieved.
            </summary>
            <returns>An array of FtpListItem objects</returns>
            <example><code source="..\Examples\GetListing.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetListing(System.String)">
            <summary>
            Gets a file listing from the server. Each FtpListItem object returned
            contains information about the file that was able to be retrieved. If
            a DateTime property is equal to DateTime.MinValue then it means the 
            date in question was not able to be retrieved. If the Size property
            is equal to 0 then it means the size of the object could also not
            be retrieved.
            </summary>
            <param name="path">The path of the directory to list</param>
            <returns>An array of FtpListItem objects</returns>
            <example><code source="..\Examples\GetListing.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetListing(System.String,System.Net.FtpClient.FtpListOption)">
            <summary>
            Gets a file listing from the server. Each FtpListItem object returned
            contains information about the file that was able to be retrieved. If
            a DateTime property is equal to DateTime.MinValue then it means the 
            date in question was not able to be retrieved. If the Size property
            is equal to 0 then it means the size of the object could also not
            be retrieved.
            </summary>
            <param name="path">The path of the directory to list</param>
            <param name="options">Options that dictacte how a list is performed and what information is gathered.</param>
            <returns>An array of FtpListItem objects</returns>
            <example><code source="..\Examples\GetListing.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginGetListing(System.AsyncCallback,System.Object)">
            <summary>
            Gets a file listing from the server asynchronously
            </summary>
            <param name="callback">AsyncCallback method</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetListing.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginGetListing(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Gets a file listing from the server asynchronously
            </summary>
            <param name="path">The path to list</param>
            <param name="callback">AsyncCallback method</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetListing.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginGetListing(System.String,System.Net.FtpClient.FtpListOption,System.AsyncCallback,System.Object)">
            <summary>
            Gets a file listing from the server asynchronously
            </summary>
            <param name="path">The path to list</param>
            <param name="options">Options that dictate how the list operation is performed</param>
            <param name="callback">AsyncCallback method</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetListing.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.EndGetListing(System.IAsyncResult)">
            <summary>
            Ends an asynchronous file listing
            </summary>
            <param name="ar">IAsyncResult return from BeginGetListing()</param>
            <returns>An array of items retrieved in the listing</returns>
            <example><code source="..\Examples\BeginGetListing.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetNameListing">
            <summary>
            Returns a file/directory listing using the NLST command.
            </summary>
            <returns>A string array of file and directory names if any were returned.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetNameListing(System.String)">
            <summary>
            Returns a file/directory listing using the NLST command.
            </summary>
            <param name="path">The path of the directory to list</param>
            <returns>A string array of file and directory names if any were returned.</returns>
            <example><code source="..\Examples\GetNameListing.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginGetNameListing(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously gets a list of file and directory names for the specified path.
            </summary>
            <param name="path">The path of the directory to list</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetNameListing.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginGetNameListing(System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously gets a list of file and directory names for the specified path.
            </summary>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetNameListing.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.EndGetNameListing(System.IAsyncResult)">
            <summary>
            Ends a call to BeginGetNameListing()
            </summary>
            <param name="ar">IAsyncResult object returned from BeginGetNameListing</param>
            <returns>An array of file and directory names if any were returned.</returns>
            <example><code source="..\Examples\BeginGetNameListing.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.SetDataType(System.Net.FtpClient.FtpDataType)">
            <summary>
            Sets the data type of information sent over the data stream
            </summary>
            <param name="type">ASCII/Binary</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginSetDataType(System.Net.FtpClient.FtpDataType,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously sets the data type on the server
            </summary>
            <param name="type">ASCII/Binary</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.EndSetDataType(System.IAsyncResult)">
            <summary>
            Ends a call to BeginSetDataType()
            </summary>
            <param name="ar">IAsyncResult returned from BeginSetDataType()</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.SetWorkingDirectory(System.String)">
            <summary>
            Sets the work directory on the server
            </summary>
            <param name="path">The path of the directory to change to</param>
            <example><code source="..\Examples\SetWorkingDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginSetWorkingDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously changes the working directory on the server
            </summary>
            <param name="path">The directory to change to</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginSetWorkingDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.EndSetWorkingDirectory(System.IAsyncResult)">
            <summary>
            Ends asynchronous directory change
            </summary>
            <param name="ar">IAsyncResult returned from BeginSetWorkingDirectory</param>
            <example><code source="..\Examples\BeginSetWorkingDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetWorkingDirectory">
            <summary>
            Gets the current working directory
            </summary>
            <returns>The current working directory, ./ if the response couldn't be parsed.</returns>
            <example><code source="..\Examples\GetWorkingDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginGetWorkingDirectory(System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously retrieves the working directory
            </summary>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetWorkingDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.EndGetWorkingDirectory(System.IAsyncResult)">
            <summary>
            Ends an asynchronous call to retrieve the working directory
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetWorkingDirectory</param>
            <returns>The current working directory</returns>
            <example><code source="..\Examples\BeginGetWorkingDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetFileSize(System.String)">
            <summary>
            Gets the size of the file
            </summary>
            <param name="path">The full or relative path of the file</param>
            <returns>-1 if the command fails, otherwise the file size</returns>
            <example><code source="..\Examples\GetFileSize.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginGetFileSize(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously retrieve the size of the specified file
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetFileSize.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.EndGetFileSize(System.IAsyncResult)">
            <summary>
            Ends a call to BeginGetFileSize()
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetFileSize</param>
            <returns>The size of the file, -1 if there was a problem.</returns>
            <example><code source="..\Examples\BeginGetFileSize.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetModifiedTime(System.String)">
            <summary>
            Gets the modified time of the file
            </summary>
            <param name="path">The full path to the file</param>
            <returns>The modified time, DateTime.MinValue if there was a problem</returns>
            <example><code source="..\Examples\GetModifiedTime.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginGetModifiedTime(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Gets the modified time of the file
            </summary>
            <param name="path">The full path to the file</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetModifiedTime.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.EndGetModifiedTime(System.IAsyncResult)">
            <summary>
            Ends a call to BeginGetModifiedTime()
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetModifiedTime()</param>
            <returns>The modified time, DateTime.MinValue if there was a problem</returns>
            <example><code source="..\Examples\BeginGetModifiedTime.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.DeleteFile(System.String)">
            <summary>
            Deletes a file on the server
            </summary>
            <param name="path">The full or relative path to the file</param>
            <example><code source="..\Examples\DeleteFile.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginDeleteFile(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously deletes a file from the server
            </summary>
            <param name="path">The full or relative path to the file</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginDeleteFile.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.EndDeleteFile(System.IAsyncResult)">
            <summary>
            Ends a call to BeginDeleteFile
            </summary>
            <param name="ar">IAsyncResult returned from BeginDeleteFile</param>
            <example><code source="..\Examples\BeginDeleteFile.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.DeleteDirectory(System.String)">
            <summary>
            Deletes the specified directory on the server.
            </summary>
            <param name="path">The full or relative path of the directory to delete</param>
            <example><code source="..\Examples\DeleteDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Delets the specified directory on the server
            </summary>
            <param name="path">The full or relative path of the directory to delete</param>
            <param name="force">If the directory is not empty, remove its contents</param>
            <example><code source="..\Examples\DeleteDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.DeleteDirectory(System.String,System.Boolean,System.Net.FtpClient.FtpListOption)">
            <summary>
            Deletes the specified directory on the server
            </summary>
            <param name="path">The full or relative path of the directory to delete</param>
            <param name="force">If the directory is not empty, remove its contents</param>
            <param name="options">FtpListOptions for controlling how the directory
            contents are retrieved with the force option is true. If you experience problems
            the file listing can be fine tuned through this parameter.</param>
            <example><code source="..\Examples\DeleteDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginDeleteDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously removes a directory from the server
            </summary>
            <param name="path">The full or relative path of the directory to delete</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginDeleteDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginDeleteDirectory(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously removes a directory from the server
            </summary>
            <param name="path">The full or relative path of the directory to delete</param>
            <param name="force">If the directory is not empty, remove its contents</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginDeleteDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginDeleteDirectory(System.String,System.Boolean,System.Net.FtpClient.FtpListOption,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously removes a directory from the server
            </summary>
            <param name="path">The full or relative path of the directory to delete</param>
            <param name="force">If the directory is not empty, remove its contents</param>
            <param name="options">FtpListOptions for controlling how the directory
            contents are retrieved with the force option is true. If you experience problems
            the file listing can be fine tuned through this parameter.</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginDeleteDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.EndDeleteDirectory(System.IAsyncResult)">
            <summary>
            Ends a call to BeginDeleteDirectory()
            </summary>
            <param name="ar">IAsyncResult returned from BeginDeleteDirectory</param>
            <example><code source="..\Examples\BeginDeleteDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.DirectoryExists(System.String)">
            <summary>
            Tests if the specified directory exists on the server. This
            method works by trying to change the working directory to
            the path specified. If it succeeds, the directory is changed
            back to the old working directory and true is returned. False
            is returned otherwise and since the CWD failed it is assumed
            the working directory is still the same.
            </summary>
            <param name="path">The path of the directory</param>
            <returns>True if it exists, false otherwise.</returns>
            <example><code source="..\Examples\DirectoryExists.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginDirectoryExists(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Checks if a directory exists on the server asynchronously.
            </summary>
            <returns>IAsyncResult</returns>
            <param name='path'>The full or relative path of the directory to check for</param>
            <param name='callback'>Async callback</param>
            <param name='state'>State object</param>
            <example><code source="..\Examples\BeginDirectoryExists.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.EndDirectoryExists(System.IAsyncResult)">
            <summary>
            Ends a call to BeginDirectoryExists
            </summary>
            <param name="ar">IAsyncResult returned from BeginDirectoryExists</param>
            <returns>True if the directory exists. False otherwise.</returns>
            <example><code source="..\Examples\BeginDirectoryExists.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.FileExists(System.String)">
            <summary>
            Checks if a file exsts on the server by taking a 
            file listing of the parent directory in the path
            and comparing the results the path supplied.
            </summary>
            <param name="path">The full or relative path to the file</param>
            <returns>True if the file exists</returns>
            <example><code source="..\Examples\FileExists.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.FileExists(System.String,System.Net.FtpClient.FtpListOption)">
            <summary>
            Checks if a file exsts on the server by taking a 
            file listing of the parent directory in the path
            and comparing the results the path supplied.
            </summary>
            <param name="path">The full or relative path to the file</param>
            <param name="options">Options for controling the file listing used to
            determine if the file exists.</param>
            <returns>True if the file exists</returns>
            <example><code source="..\Examples\FileExists.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginFileExists(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Checks if a file exsts on the server by taking a 
            file listing of the parent directory in the path
            and comparing the results the path supplied.
            </summary>
            <param name="path">The full or relative path to the file</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginFileExists.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginFileExists(System.String,System.Net.FtpClient.FtpListOption,System.AsyncCallback,System.Object)">
            <summary>
            Checks if a file exsts on the server by taking a 
            file listing of the parent directory in the path
            and comparing the results the path supplied.
            </summary>
            <param name="path">The full or relative path to the file</param>
            <param name="options">Options for controling the file listing used to
            determine if the file exists.</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginFileExists.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.EndFileExists(System.IAsyncResult)">
            <summary>
            Ends a call to BeginFileExists
            </summary>
            <param name="ar">IAsyncResult returned from BeginFileExists</param>
            <returns>True if the file exists</returns>
            <example><code source="..\Examples\BeginFileExists.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.CreateDirectory(System.String)">
            <summary>
            Creates a directory on the server. If the preceding
            directories do not exist they are created.
            </summary>
            <param name="path">The full or relative path to the new directory</param>
            <example><code source="..\Examples\CreateDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.CreateDirectory(System.String,System.Boolean)">
            <summary>
            Creates a directory on the server
            </summary>
            <param name="path">The full or relative path to the directory to create</param>
            <param name="force">Try to force all non-existant pieces of the path to be created</param>
            <example><code source="..\Examples\CreateDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginCreateDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Creates a directory asynchronously
            </summary>
            <param name="path">The full or relative path to the directory to create</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginCreateDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginCreateDirectory(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Creates a directory asynchronously
            </summary>
            <param name="path">The full or relative path to the directory to create</param>
            <param name="force">Try to create the whole path if the preceding directories do not exist</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginCreateDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.EndCreateDirectory(System.IAsyncResult)">
            <summary>
            Ends a call to BeginCreateDirectory
            </summary>
            <param name="ar">IAsyncResult returned from BeginCreateDirectory</param>
            <example><code source="..\Examples\BeginCreateDirectory.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Rename(System.String,System.String)">
            <summary>
            Renames an object on the remote file system.
            </summary>
            <param name="path">The full or relative path to the object</param>
            <param name="dest">The old or new full or relative path including the new name of the object</param>
            <example><code source="..\Examples\Rename.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginRename(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously renames an object on the server
            </summary>
            <param name="path">The full or relative path to the object</param>
            <param name="dest">The old or new full or relative path including the new name of the object</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginRename.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.EndRename(System.IAsyncResult)">
            <summary>
            Ends a call to BeginRename
            </summary>
            <param name="ar">IAsyncResult returned from BeginRename</param>
            <example><code source="..\Examples\BeginRename.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetHashAlgorithm">
            <summary>
            Gets the currently selected hash algorith for the HASH
            command. This feature is experimental. See this link
            for details:
            http://tools.ietf.org/html/draft-bryan-ftpext-hash-02
            </summary>
            <returns>The FtpHashType flag or FtpHashType.NONE if there was a problem.</returns>
            <example><code source="..\Examples\GetHashAlgorithm.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginGetHashAlgorithm(System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously get the hash algorithm being used by the HASH command.
            </summary>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.EndGetHashAlgorithm(System.IAsyncResult)">
            <summary>
            Ends a call to BeginGetHashAlgorithm
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetHashAlgorithm</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.SetHashAlgorithm(System.Net.FtpClient.FtpHashAlgorithm)">
            <summary>
            Tells the server which hash algorith to use
            for the HASH command. If you specifiy an 
            algorithm not listed in FtpClient.HashTypes
            a NotImplemented() exectpion will be thrown
            so be sure to query that list of Flags before
            selecting a hash algorithm. Support for the
            HASH command is experimental. Please see
            the following link for more details:
            http://tools.ietf.org/html/draft-bryan-ftpext-hash-02
            </summary>
            <param name="type">Hash Algorithm</param>
            <example><code source="..\Examples\SetHashAlgorithm.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginSetHashAlgorithm(System.Net.FtpClient.FtpHashAlgorithm,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously sets the hash algorithm type to be used with the HASH command.
            </summary>
            <param name="type">Hash algorithm to use</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.EndSetHashAlgorithm(System.IAsyncResult)">
            <summary>
            Ends an asynchronous call to BeginSetHashAlgorithm
            </summary>
            <param name="ar">IAsyncResult returned from BeginSetHashAlgorithm</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetHash(System.String)">
            <summary>
            Gets the hash of an object on the server using the
            currently selected hash algorithm. Supported
            algorithms, if any, are available in the HashAlgorithms
            property. You should confirm that it's not equal
            to FtpHashAlgorithm.NONE before calling this method
            otherwise the server trigger a FtpCommandException()
            due to a lack of support for the HASH command. You can
            set the algorithm using the SetHashAlgorithm() method and
            you can query the server for the current hash algorithm
            using the GetHashAlgorithm() method.
            
            This feature is experimental and based on the following draft:
            http://tools.ietf.org/html/draft-bryan-ftpext-hash-02
            </summary>
            <param name="path">Full or relative path of the object to compute the hash for.</param>
            <returns>The hash of the file.</returns>
            <example><code source="..\Examples\GetHash.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginGetHash(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously retrieves the hash for the specified file
            </summary>
            <param name="path">The file you want the server to compute the hash for</param>
            <param name="callback">AsyncCallback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.EndGetHash(System.IAsyncResult)">
            <summary>
            Ends an asynchronous call to BeginGetHash
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetHash</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.DisableUTF8">
            <summary>
            Disables UTF8 support and changes the Encoding property
            back to ASCII. If the server returns an error when trying
            to turn UTF8 off a FtpCommandException will be thrown.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Dispose">
            <summary>
            Disconnects from the server, releases resources held by this
            object.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.#ctor">
            <summary>
            Creates a new isntance of FtpClient
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Connect(System.Uri,System.Boolean)">
            <summary>
            Connects to the specified URI. If the path specified by the URI ends with a
            / then the working directory is changed to the path specified.
            </summary>
            <param name="uri">The URI to parse</param>
            <param name="checkcertificate">Indicates if a ssl certificate should be validated when using FTPS schemes</param>
            <returns>FtpClient object</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Connect(System.Uri)">
            <summary>
            Connects to the specified URI. If the path specified by the URI ends with a
            / then the working directory is changed to the path specified.
            </summary>
            <param name="uri">The URI to parse</param>
            <returns>FtpClient object</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenRead(System.Uri,System.Boolean,System.Net.FtpClient.FtpDataType,System.Int64)">
            <summary>
            Opens a stream to the file specified by the URI
            </summary>
            <param name="uri">FTP/FTPS URI pointing at a file</param>
            <param name="checkcertificate">Indicates if a ssl certificate should be validated when using FTPS schemes</param>
            <param name="datatype">ASCII/Binary mode</param>
            <param name="restart">Restart location</param>
            <returns>Stream object</returns>
            <example><code source="..\Examples\OpenReadURI.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenRead(System.Uri,System.Boolean,System.Net.FtpClient.FtpDataType)">
            <summary>
            Opens a stream to the file specified by the URI
            </summary>
            <param name="uri">FTP/FTPS URI pointing at a file</param>
            <param name="checkcertificate">Indicates if a ssl certificate should be validated when using FTPS schemes</param>
            <param name="datatype">ASCII/Binary mode</param>
            <returns>Stream object</returns>
            <example><code source="..\Examples\OpenReadURI.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenRead(System.Uri,System.Boolean)">
            <summary>
            Opens a stream to the file specified by the URI
            </summary>
            <param name="uri">FTP/FTPS URI pointing at a file</param>
            <param name="checkcertificate">Indicates if a ssl certificate should be validated when using FTPS schemes</param>
            <returns>Stream object</returns>
            <example><code source="..\Examples\OpenReadURI.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenRead(System.Uri)">
            <summary>
            Opens a stream to the file specified by the URI
            </summary>
            <param name="uri">FTP/FTPS URI pointing at a file</param>
            <returns>Stream object</returns>
            <example><code source="..\Examples\OpenReadURI.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenWrite(System.Uri,System.Boolean,System.Net.FtpClient.FtpDataType)">
            <summary>
            Opens a stream to the file specified by the URI
            </summary>
            <param name="uri">FTP/FTPS URI pointing at a file</param>
            <param name="checkcertificate">Indicates if a ssl certificate should be validated when using FTPS schemes</param>
            <param name="datatype">ASCII/Binary mode</param> 
            <returns>Stream object</returns>
            <example><code source="..\Examples\OpenWriteURI.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenWrite(System.Uri,System.Boolean)">
            <summary>
            Opens a stream to the file specified by the URI
            </summary>
            <param name="uri">FTP/FTPS URI pointing at a file</param>
            <param name="checkcertificate">Indicates if a ssl certificate should be validated when using FTPS schemes</param>
            <returns>Stream object</returns>
            <example><code source="..\Examples\OpenWriteURI.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenWrite(System.Uri)">
            <summary>
            Opens a stream to the file specified by the URI
            </summary>
            <param name="uri">FTP/FTPS URI pointing at a file</param>
            <returns>Stream object</returns>
            <example><code source="..\Examples\OpenWriteURI.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenAppend(System.Uri,System.Boolean,System.Net.FtpClient.FtpDataType)">
            <summary>
            Opens a stream to the file specified by the URI
            </summary>
            <param name="uri">FTP/FTPS URI pointing at a file</param>
            <param name="checkcertificate">Indicates if a ssl certificate should be validated when using FTPS schemes</param>
            <param name="datatype">ASCII/Binary mode</param>
            <returns>Stream object</returns>
            <example><code source="..\Examples\OpenAppendURI.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenAppend(System.Uri,System.Boolean)">
            <summary>
            Opens a stream to the file specified by the URI
            </summary>
            <param name="uri">FTP/FTPS URI pointing at a file</param>
            <param name="checkcertificate">Indicates if a ssl certificate should be validated when using FTPS schemes</param>
            <returns>Stream object</returns>
            <example><code source="..\Examples\OpenAppendURI.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenAppend(System.Uri)">
            <summary>
            Opens a stream to the file specified by the URI
            </summary>
            <param name="uri">FTP/FTPS URI pointing at a file</param>
            <returns>Stream object</returns>
            <example><code source="..\Examples\OpenAppendURI.cs" lang="cs" /></example>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.IsDisposed">
            <summary>
            Gets a value indicating if this object has already been disposed.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.BaseStream">
            <summary>
            Gets the base stream for talking to the server via
            the control connection.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.InternetProtocolVersions">
            <summary>
            Flags specifying which versions of the internet protocol to
            support when making a connection. All addresses returned during
            name resolution are tried until a successful connection is made.
            You can fine tune which versions of the internet protocol to use
            by adding or removing flags here. I.e., setting this property
            to FtpIpVersion.IPv4 will cause the connection process to
            ignore IPv6 addresses. The default value is ANY version.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.SocketPollInterval">
            <summary>
            Gets or sets the length of time in miliseconds
            that must pass since the last socket activity
            before calling Poll() on the socket to test for
            connectivity. Setting this interval too low will
            have a negative impact on perfomance. Setting this
            interval to 0 disables Poll()'ing all together.
            The default value is 15 seconds.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.StaleDataCheck">
            <summary>
            Gets or sets a value indicating whether a test should be performed to
            see if there is stale (unrequested data) sitting on the socket. In some
            cases the control connection may time out but before the server closes
            the connection it might send a 4xx response that was unexpected and
            can cause synchronization errors with transactions. To avoid this
            problem the Execute() method checks to see if there is any data
            available on the socket before executing a command. On Azure hosting
            platforms this check can cause an exception to be thrown. In order
            to work around the exception you can set this property to false
            which will skip the test entirely however doing so eliminates the
            best effort attempt of detecting such scenarios. See this thread
            for more details about the Azure problem:
            https://netftp.codeplex.com/discussions/535879
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.IsConnected">
            <summary>
            Gets a value indicating if the connection is alive
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.EnableThreadSafeDataConnections">
            <summary>
            When this value is set to true (default) the control connection
            is cloned and a new connection the server is established for the
            data channel operation. This is a thread safe approach to make
            asynchronous operations on a single control connection transparent
            to the developer.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.IsClone">
            <summary>
            Gets a value indicating if this control connection is a clone. This property
            is used with data streams to determine if the connection should be closed
            when the stream is closed. Servers typically only allow 1 data connection
            per control connection. If you try to open multiple data connections this
            object will be cloned for 2 or more resulting in N new connections to the
            server.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.Encoding">
            <summary>
            Gets or sets the text encoding being used when talking with the server. The default
            value is Encoding.ASCII however upon connection, the client checks
            for UTF8 support and if it's there this property is switched over to
            Encoding.UTF8. Manually setting this value overrides automatic detection
            based on the FEAT list; if you change this value it's always used
            regardless of what the server advertises, if anything.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.Host">
            <summary>
            The server to connect to
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.Port">
            <summary>
            The port to connect to. If this value is set to 0 (Default) the port used
            will be determined by the type of SSL used or if no SSL is to be used it 
            will automatically connect to port 21.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.Credentials">
            <summary>
            Credentials used for authentication
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.MaximumDereferenceCount">
            <summary>
            Gets or sets a value that controls the maximum depth
            of recursion that DereferenceLink() will follow symbolic
            links before giving up. You can also specify the value
            to be used as one of the overloaded parameters to the
            DereferenceLink() method. The default value is 20. Specifying
            -1 here means inifinitly try to resolve a link. This is
            not recommended for obvious reasons (stack overflow).
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.ClientCertificates">
            <summary>
            Client certificates to be used in SSL authentication process
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.DataConnectionType">
            <summary>
            Data connection type, default is AutoPassive which tries
            a connection with EPSV first and if it fails then tries
            PASV before giving up. If you know exactly which kind of
            connection you need you can slightly increase performance
            by defining a speicific type of passive or active data
            connection here.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.UngracefullDisconnection">
            <summary>
            Disconnect from the server without sending QUIT. This helps
            work around IOExceptions caused by buggy connection resets
            when closing the control connection.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.ConnectTimeout">
            <summary>
            Gets or sets the length of time in miliseconds to wait for a connection 
            attempt to succeed before giving up. Default is 15000 (15 seconds).
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.ReadTimeout">
            <summary>
            Gets or sets the length of time wait in miliseconds for data to be
            read from the underlying stream. The default value is 15000 (15 seconds).
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.DataConnectionConnectTimeout">
            <summary>
            Gets or sets the length of time in miliseconds for a data connection
            to be established before giving up. Default is 15000 (15 seconds).
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.DataConnectionReadTimeout">
            <summary>
            Gets or sets the length of time in miliseconds the data channel
            should wait for the server to send data. Default value is 
            15000 (15 seconds).
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.SocketKeepAlive">
            <summary>
            Gets or sets a value indicating if SocketOption.KeepAlive should be set on 
            the underlying stream's socket. If the connection is alive, the option is
            adjusted in real-time. The value is stored and the KeepAlive option is set
            accordingly upon any new connections. The value set here is also applied to
            all future data streams. It has no affect on cloned control connections or
            data connections already in progress. The default value is false.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.Capabilities">
            <summary>
            Gets the server capabilties represented by flags
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.HashAlgorithms">
            <summary>
            Get the hash types supported by the server, if any. This
            is a recent extension to the protocol that is not fully
            standardized and is not guarateed to work. See here for
            more details:
            http://tools.ietf.org/html/draft-bryan-ftpext-hash-02
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.EncryptionMode">
            <summary>
            Type of SSL to use, or none. Default is none. Explicit is TLS, Implicit is SSL.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.DataConnectionEncryption">
            <summary>
            Indicates if data channel transfers should be encrypted. Only valid if EncryptionMode
            property is not equal to FtpSslMode.None.
            </summary>
        </member>
        <member name="E:System.Net.FtpClient.FtpClient.ValidateCertificate">
            <summary>
            Event is fired to validate SSL certificates. If this event is
            not handled and there are errors validating the certificate
            the connection will be aborted.
            </summary>
            <example><code source="..\Examples\ValidateCertificate.cs" lang="cs" /></example>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.SystemType">
            <summary>
            Gets the type of system/server that we're
            connected to.
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpClient.FtpControlConnectionClone">
            <summary>
            Used internally to mark properties in the control connection that
            should be cloned when opening a data connection.
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpDataStream">
            <summary>
            Base class for data stream connections
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpSocketStream">
            <summary>
            Stream class used for talking to 
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpSocketStream.m_lastActivity">
            <summary>
            Used for tacking read/write activity on the socket
            to determine if Poll() should be used to test for
            socket conenctivity. The socket in this class will
            not know it has been disconnected if the remote host
            closes the connection first. Using Poll() avoids 
            the exception that would be thrown when trying to
            read or write to the disconnected socket.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.OnValidateCertificate(System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Fires the SSL certificate validation event
            </summary>
            <param name="certificate">Certificate being validated</param>
            <param name="chain">Certificate chain</param>
            <param name="errors">Policy errors if any</param>
            <returns>True if it was accepted, false otherwise</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Throws an InvalidOperationException
            </summary>
            <param name="offset">Ignored</param>
            <param name="origin">Ignored</param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.SetLength(System.Int64)">
            <summary>
            Throws an InvalidOperationException
            </summary>
            <param name="value">Ignored</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.Flush">
            <summary>
            Flushes the stream
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.RawSocketRead(System.Byte[])">
            <summary>
            Bypass the stream and read directly off the socket.
            </summary>
            <param name="buffer">The buffer to read into</param>
            <returns>The number of bytes read</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the stream
            </summary>
            <param name="buffer">Buffer to read into</param>
            <param name="offset">Where in the buffer to start</param>
            <param name="count">Number of bytes to be read</param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.ReadLine(System.Text.Encoding)">
            <summary>
            Reads a line from the socket
            </summary>
            <returns>A line from the stream, null if there is nothing to read</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the stream
            </summary>
            <param name="buffer">Buffer to write to stream</param>
            <param name="offset">Where in the buffer to start</param>
            <param name="count">Number of bytes to be read</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.WriteLine(System.Text.Encoding,System.String)">
            <summary>
            Writes a line to the stream using the specified encoding
            </summary>
            <param name="encoding">Encoding used for writing the line</param>
            <param name="buf">The data to write</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.Close">
            <summary>
            Disconnects from server
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)">
            <summary>
            Sets socket options on the underlying socket
            </summary>
            <param name="level">SocketOptionLevel</param>
            <param name="name">SocketOptionName</param>
            <param name="value">SocketOptionValue</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.Connect(System.String,System.Int32,System.Net.FtpClient.FtpIpVersion)">
            <summary>
            Connect to the specified host
            </summary>
            <param name="host">The host to connect to</param>
            <param name="port">The port to connect to</param>
            <param name="ipVersions">Internet Protocol versions to support durring the connection phase</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.ActivateEncryption(System.String)">
            <summary>
            Activates SSL on this stream. Fires the ValidateCertificate event. If this event is
            not handled and there are SslPolicyErrors present, the certificate will not be
            accepted.
            </summary>
            <param name="targethost">The host to authenticate the certiciate against</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.ActivateEncryption(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
            <summary>
            Activates SSL on this stream. Fires the ValidateCertificate event. If this event is
            not handled and there are SslPolicyErrors present, the certificate will not be
            accepted.
            </summary>
            <param name="targethost">The host to authenticate the certiciate against</param>
            <param name="clientCerts">A collection of client certificates to use when authenticating the SSL stream</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.Listen(System.Net.IPAddress,System.Int32)">
            <summary>
            Instructs this stream to listen for connections on the specified address and port
            </summary>
            <param name="address">The address to listen on</param>
            <param name="port">The port to listen on</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.Accept">
            <summary>
            Accepts a connection from a listening socket
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.BeginAccept(System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously accepts a connection from a listening socket
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.EndAccept(System.IAsyncResult)">
            <summary>
            Completes a BeginAccept() operation
            </summary>
            <param name="ar">IAsyncResult returned from BeginAccept</param>
        </member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.Socket">
            <summary>
            The socket used for talking
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.SocketPollInterval">
            <summary>
            Gets or sets the length of time in miliseconds
            that must pass since the last socket activity
            before calling Poll() on the socket to test for
            connectivity. Setting this interval too low will
            have a negative impact on perfomance. Setting this
            interval to 0 disables Poll()'ing all together.
            The default value is 15 seconds.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.SocketDataAvailable">
            <summary>
            Gets the number of available bytes on the socket, 0 if the
            socket has not been initalized. This property is used internally
            by FtpClient in an effort to detect disconnections and gracefully
            reconnect the control connection.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.IsConnected">
            <summary>
            Gets a value indicating if this socket stream is connected
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.IsEncrypted">
            <summary>
            Gets a value indicating if encryption is being used
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.NetworkStream">
            <summary>
            The non-encrypted stream
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.SslStream">
            <summary>
            The encrypted stream
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.BaseStream">
            <summary>
            Underlying stream, could be a NetworkStream or SslStream
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.CanRead">
            <summary>
            Gets a value indicating if this stream can be read
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.CanSeek">
            <summary>
            Gets a value indicating if this stream if seekable
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.CanWrite">
            <summary>
            Gets a value indicating if this stream can be written to
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.Length">
            <summary>
            Gets the length of the stream
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.Position">
            <summary>
            Gets the current position of the stream. Trying to
            set this property throws an InvalidOperationException()
            </summary>
        </member>
        <member name="E:System.Net.FtpClient.FtpSocketStream.ValidateCertificate">
            <summary>
            Event is fired when a SSL certificate needs to be validated
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.ReadTimeout">
            <summary>
            Gets or sets the amount of time to wait for a read operation to complete. Default
            value is Timeout.Infinite.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.ConnectTimeout">
            <summary>
            Gets or sets the length of time miliseconds to wait
            for a connection succeed before giving up. The default
            is 30000 (30 seconds).
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.LocalEndPoint">
            <summary>
            Gets the local end point of the socket
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.RemoteEndPoint">
            <summary>
            Gets the remote end point of the socket
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data off the stream
            </summary>
            <param name="buffer">The buffer to read into</param>
            <param name="offset">Where to start in the buffer</param>
            <param name="count">Number of bytes to read</param>
            <returns>The number of bytes read</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the stream
            </summary>
            <param name="buffer">The buffer to write to the stream</param>
            <param name="offset">Where to start in the buffer</param>
            <param name="count">The number of bytes to write to the buffer</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream
            </summary>
            <param name="value">Value to apply to the Length property</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataStream.SetPosition(System.Int64)">
            <summary>
            Sets the position of the stream. Inteneded to be used
            internally by FtpControlConnection.
            </summary>
            <param name="pos">The position</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataStream.Dispose(System.Boolean)">
            <summary>
            Disconnects (if necessary) and releases associated resources
            </summary>
            <param name="disposing">Disposing</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataStream.Close">
            <summary>
            Closes the connection and reads the server's reply
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataStream.#ctor(System.Net.FtpClient.FtpClient)">
            <summary>
            Creates a new data stream object
            </summary>
            <param name="conn">The control connection to be used for carrying out this operation</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataStream.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataStream.CommandStatus">
            <summary>
            Gets the status of the command that was used to open
            this data channel
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataStream.ControlConnection">
            <summary>
            Gets or sets the control connection for this data stream. Setting
            the control connection causes the object to be clonded and a new
            connection is made to the server to carry out the task. This ensures
            that multiple streams can be opened simultainously.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataStream.Length">
            <summary>
            Gets or sets the length of the stream. Only valid for file transfers
            and only valid on servers that support the Size command.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataStream.Position">
            <summary>
            Gets or sets the position of the stream
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpEncryptionMode">
            <summary>
            Defines the type of encryption to use
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpEncryptionMode.None">
            <summary>
            Plain text.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpEncryptionMode.Implicit">
            <summary>
            Encryption is used from the start of the connection, port 990
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpEncryptionMode.Explicit">
            <summary>
            Connection starts in plain text and encryption is enabled
            with the AUTH command immediately after the server greeting.
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpResponseType">
            <summary>
            The type of response the server responded with
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpResponseType.None">
            <summary>
            No response
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpResponseType.PositivePreliminary">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpResponseType.PositiveCompletion">
            <summary>
            Successs
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpResponseType.PositiveIntermediate">
            <summary>
            Succcess
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpResponseType.TransientNegativeCompletion">
            <summary>
            Temporary failure
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpResponseType.PermanentNegativeCompletion">
            <summary>
            Permanent failure
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpCapability">
            <summary>
            Server features
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.NONE">
            <summary>
            This server said it doesn't support anything!
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.MLSD">
            <summary>
            Supports the MLST command
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.SIZE">
            <summary>
            Supports the SIZE command
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.MDTM">
            <summary>
            Supports the MDTM command
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.REST">
            <summary>
            Supports download/upload stream resumes
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.UTF8">
            <summary>
            Supports UTF8
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.PRET">
            <summary>
            PRET Command used in distributed ftp server software DrFTPD
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.MFMT">
            <summary>
            Server supports the MFMT command for setting the
            modifid date of an object on the server
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.MFCT">
            <summary>
            Server supports the MFCT command for setting the
            created date of an object on the server
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.MFF">
            <summary>
            Server supports the MFF command for setting certain facts
            about file sytem objects. If you need this command, it would
            probably be handy to query FEAT your self and have a look at
            the FtpReply.InfoMessages property to see which facts the server
            allows you to modify.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.STAT">
            <summary>
            Server supports the STAT command
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.HASH">
            <summary>
            Support for the HASH command
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.MD5">
            <summary>
            Support for the non-standard MD5 command
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.XMD5">
            <summary>
            Support for the non-standard XMD5 command
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.XCRC">
            <summary>
            Support for the non-standard XCRC command
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.XSHA1">
            <summary>
            Support for the non-standard XSHA1 command
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.XSHA256">
            <summary>
            Support for the non-standard XSHA256 command
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.XSHA512">
            <summary>
            Support for the non-standard XSHA512 command
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpHashAlgorithm">
            <summary>
            Different types of hashing algorithms for computing checksums.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpHashAlgorithm.NONE">
            <summary>
            HASH command is not supported
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpHashAlgorithm.SHA1">
            <summary>
            SHA-1
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpHashAlgorithm.SHA256">
            <summary>
            SHA-256
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpHashAlgorithm.SHA512">
            <summary>
            SHA-512
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpHashAlgorithm.MD5">
            <summary>
            MD5
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpHashAlgorithm.CRC">
            <summary>
            CRC
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpIpVersion">
            <summary>
            IP Versions to allow when connecting
            to a server.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpIpVersion.IPv4">
            <summary>
            Internet Protocol Version 4
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpIpVersion.IPv6">
            <summary>
            Internet Protocol Version 6
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpIpVersion.ANY">
            <summary>
            Allow any supported version
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpDataConnectionType">
            <summary>
            Data connection type
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpDataConnectionType.AutoPassive">
            <summary>
            This type of data connection attempts to use the EPSV command
            and if the server does not support EPSV it falls back to the
            PASV command before giving up unless you are connected via IPv6
            in which case the PASV command is not supported.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpDataConnectionType.PASV">
            <summary>
            Passive data connection. EPSV is a better
            option if it's supported. Passive connections
            connect to the IP address dicated by the server
            which may or may not be accessible by the client
            for example a server behind a NAT device may
            give an IP address on its local network that
            is inaccessible to the client. Please note that IPv6
            does not support this type data connection. If you
            ask for PASV and are connected via IPv6 EPSV will
            automatically be used in its place.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpDataConnectionType.PASVEX">
            <summary>
            Same as PASV except the host supplied by the server is ignored
            and the data conncetion is made to the same address that the control
            connection is connected to. This is useful in scenarios where the
            server supplies a private/non-routable network address in the
            PASV response. It's functionally identical to EPSV except some
            servers may not implement the EPSV command. Please note that IPv6
            does not support this type data connection. If you
            ask for PASV and are connected via IPv6 EPSV will
            automatically be used in its place.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpDataConnectionType.EPSV">
            <summary>
            Extended passive data connection, recommended. Works
            the same as a PASV connection except the server
            does not dictate an IP address to connect to, instead
            the passive connection goes to the same address used
            in the control connection. This type of data connection
            supports IPv4 and IPv6.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpDataConnectionType.AutoActive">
            <summary>
            This type of data connection attempts to use the EPRT command
            and if the server does not support EPRT it falls back to the
            PORT command before giving up unless you are connected via IPv6
            in which case the PORT command is not supported.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpDataConnectionType.PORT">
            <summary>
            Active data connection, not recommended unless
            you have a specific reason for using this type.
            Creates a listening socket on the client which
            requires firewall exceptions on the client system
            as well as client network when connecting to a
            server outside of the client's network. In addition
            the IP address of the interface used to connect to the
            server is the address the server is told to connect to
            which, if behind a NAT device, may be inaccessible to
            the server. This type of data connection is not supported
            by IPv6. If you specify PORT and are connected via IPv6
            EPRT will automatically be used instead.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpDataConnectionType.EPRT">
            <summary>
            Extended active data connection, not recommended
            unless you have a specific reason for using this
            type. Creates a listening socket on the client
            which requires firewall exceptions on the client
            as well as client network when connecting to a 
            server outside of the client's network. The server
            connects to the IP address it sees the client comming
            from. This type of data connection supports IPv4 and IPv6.
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpDataType">
            <summary>
            Type of data transfer to do
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpDataType.ASCII">
            <summary>
            ASCII transfer
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpDataType.Binary">
            <summary>
            Binary transfer
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpFileSystemObjectType">
            <summary>
            Type of file system of object
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpFileSystemObjectType.File">
            <summary>
            A file
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpFileSystemObjectType.Directory">
            <summary>
            A directory
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpFileSystemObjectType.Link">
            <summary>
            A symbolic link
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpPermission">
            <summary>
            Types of file permissions
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpPermission.None">
            <summary>
            No access
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpPermission.Execute">
            <summary>
            Executable
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpPermission.Write">
            <summary>
            Writeable
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpPermission.Read">
            <summary>
            Readable
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpSpecialPermissions">
            <summary>
            Types of special UNIX permissions
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpSpecialPermissions.None">
            <summary>
            No special permissions are set
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpSpecialPermissions.Sticky">
            <summary>
            Sticky bit is set
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpSpecialPermissions.SetGroupID">
            <summary>
            SGID bit is set
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpSpecialPermissions.SetUserID">
            <summary>
            SUID bit is set
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpListOption">
            <summary>
            Flags that can dicate how a file listing is performed
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpListOption.Modify">
            <summary>
            Load the modify date using MDTM when it could not
            be parsed from the server listing. This only pertains
            to servers that do not implement the MLSD command.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpListOption.Size">
            <summary>
            Load the file size using the SIZE command when it
            could not be parsed from the server listing. This
            only pertains to servers that do not support the
            MLSD command.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpListOption.SizeModify">
            <summary>
            Combines the Modify and Size flags
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpListOption.AllFiles">
            <summary>
            Show hidden/dot files. This only pertains to servers
            that do not support the MLSD command. This option
            makes use the non standard -a parameter to LIST to
            tell the server to show hidden files. Since it's a
            non-standard option it may not always work. MLSD listings
            have no such option and whether or not a hidden file is
            shown is at the discretion of the server.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpListOption.ForceList">
            <summary>
            Force the use of the NLST command even if MLSD
            is supported by the server
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpListOption.NameList">
            <summary>
            Use the NLST command instead of LIST for a reliable file listing
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpListOption.ForceNameList">
            <summary>
            Combines the ForceList and NameList flags
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpListOption.DerefLinks">
            <summary>
            Try to dereference symbolic links
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpListOption.UseLS">
            <summary>
            Sets the ForceList flag and uses `LS' instead of `LIST' as the
            command for getting a directory listing. This option overrides
            ForceNameList and ignores the AllFiles flag.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpListOption.Recursive">
            <summary>
            Adds the -r option to the list command. Some servers may not
            support this feature.
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpException">
            <summary>
            FTP related error
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpException.#ctor(System.String)">
            <summary>
            Initializes the exception object
            </summary>
            <param name="message">The error message</param>
        </member>
        <member name="T:System.Net.FtpClient.FtpCommandException">
            <summary>
            Exception triggered on command failures
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandException.#ctor(System.String,System.String)">
            <summary>
            Initalizes a new instance of a FtpResponseException
            </summary>
            <param name="code">Status code</param>
            <param name="message">Associated message</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandException.#ctor(System.Net.FtpClient.FtpReply)">
            <summary>
            Initalizes a new instance of a FtpResponseException
            </summary>
            <param name="reply">The FtpReply to build the exception from</param>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandException.CompletionCode">
            <summary>
            Gets the completion code associated with the response
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandException.ResponseType">
            <summary>
            The type of response received from the last command executed
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpSecurityNotAvailableException">
            <summary>
            Exception is thrown when encryption could not be negotiated by the server
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpSecurityNotAvailableException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpSecurityNotAvailableException.#ctor(System.String)">
            <summary>
            Custom error message
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="T:System.Net.FtpClient.FtpExtensions">
            <summary>
            Extension methods related to FTP tasks
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpExtensions.GetFtpPath(System.String)">
            <summary>
            Converts the specified path into a valid FTP file system path
            </summary>
            <param name="path">The file system path</param>
            <returns>A path formatted for FTP</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpExtensions.GetFtpPath(System.String,System.String[])">
            <summary>
            Creates a valid FTP path by appending the specified segments to this string
            </summary>
            <param name="path">This string</param>
            <param name="segments">The path segments to append</param>
            <returns>A valid FTP path</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpExtensions.GetFtpDirectoryName(System.String)">
            <summary>
            Gets the directory name of a path formatted for a FTP server
            </summary>
            <param name="path">The path</param>
            <returns>The parent directory path</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpExtensions.GetFtpFileName(System.String)">
            <summary>
            Gets the file name from the path
            </summary>
            <param name="path">The full path to the file</param>
            <returns>The file name</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpExtensions.GetFtpDate(System.String,System.Globalization.DateTimeStyles)">
            <summary>
            Tries to convert the string FTP date representation  into a date time object
            </summary>
            <param name="date">The date</param>
            <param name="style">UTC/Local Time</param>
            <returns>A date time object representing the date, DateTime.MinValue if there was a problem</returns>
        </member>
        <member name="T:System.Net.FtpClient.FtpHash">
            <summary>
            Represents a computed hash of an object
            on the FTP server. See the following link
            for more information:
            http://tools.ietf.org/html/draft-bryan-ftpext-hash-02
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpHash.Verify(System.String)">
            <summary>
            Computes the hash for the specified file and compares
            it to the value in this object. CRC hashes are not supported 
            because there is no built-in support in the .net framework and
            a CRC implementation exceeds the scope of this project. If you
            attempt to Verify() a CRC hash a NotImplemented() exception will
            be thrown.
            </summary>
            <param name="file">The file to compute the hash for</param>
            <returns>True if the computed hash matches what's stored in this object.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpHash.Verify(System.IO.Stream)">
            <summary>
            Computes the hash for the specified stream and compares
            it to the value in this object. CRC hashes are not supported 
            because there is no built-in support in the .net framework and
            a CRC implementation exceeds the scope of this project. If you
            attempt to Verify() a CRC hash a NotImplemented() exception will
            be thrown.
            </summary>
            <param name="istream">The stream to compute the hash for</param>
            <returns>True if the computed hash matches what's stored in this object.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpHash.#ctor">
            <summary>
            Creates an empty instance.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpHash.Algorithm">
            <summary>
            Gets the algorithm that was used to compute the hash
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpHash.Value">
            <summary>
            Gets the computed hash returned by the server
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpHash.IsValid">
            <summary>
            Gets a value indicating if this object represents a
            valid hash response from the server.
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpListItem">
            <summary>
            Represents a file system object on the server
            </summary>
            <example><code source="..\Examples\CustomParser.cs" lang="cs" /></example>
        </member>
        <member name="T:System.Net.FtpClient.IFtpListItem">
            <summary>
            Represents a file system object on the server
            </summary>
            <example><code source="..\Examples\CustomParser.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.IFtpListItem.ToString">
            <summary>
            Returns a string representation of this object and its properties
            </summary>
            <returns>A string value</returns>
        </member>
        <member name="P:System.Net.FtpClient.IFtpListItem.Type">
            <summary>
            Gets the type of file system object. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpListItem.FullName">
            <summary>
            Gets the full path name to the object. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpListItem.Name">
            <summary>
            Gets the name of the object. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpListItem.LinkTarget">
            <summary>
            Gets the target a symbolic link points to. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpListItem.LinkObject">
            <summary>
            Gets the object the LinkTarget points to. This property is null unless pass the
            FtpListOption.DerefLink flag in which case GetListing() will try to resolve
            the target itself.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpListItem.Modified">
            <summary>
            Gets the last write time of the object. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpListItem.Created">
            <summary>
            Gets the created date of the object. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpListItem.Size">
            <summary>
            Gets the size of the object. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpListItem.SpecialPermissions">
            <summary>
            Gets special UNIX permissions such as Stiky, SUID and SGID. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpListItem.OwnerPermissions">
            <summary>
            Gets the owner permissions. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpListItem.GroupPermissions">
            <summary>
            Gets the group permissions. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpListItem.OthersPermissions">
            <summary>
            Gets the others permissions. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpListItem.Input">
            <summary>
            Gets the input string that was parsed to generate the
            values in this object. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpListItem.ToString">
            <summary>
            Returns a string representation of this object and its properties
            </summary>
            <returns>A string value</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpListItem.Parse(System.String,System.String,System.Net.FtpClient.FtpCapability)">
            <summary>
            Parses a line from a file listing using the first successful match in the Parsers collection.
            </summary>
            <param name="path">The source path of the file listing</param>
            <param name="buf">A line from the file listing</param>
            <param name="capabilities">Server capabilities</param>
            <returns>A FtpListItem object representing the parsed line, null if the line was
            unable to be parsed. If you have encountered an unsupported list type add a parser
            to the public static Parsers collection of FtpListItem.</returns>
        </member>
        <member name="F:System.Net.FtpClient.FtpListItem.m_parserLock">
            <summary>
            Used for synchronizing access to the Parsers collection
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpListItem.InitParsers">
            <summary>
            Initalizes the default list of parsers
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpListItem.AddParser(System.Net.FtpClient.FtpListItem.Parser)">
            <summary>
            Adds a custom parser
            </summary>
            <param name="parser">The parser delegate to add</param>
            <example><code source="..\Examples\CustomParser.cs" lang="cs" /></example>
        </member>
        <member name="M:System.Net.FtpClient.FtpListItem.ClearParsers">
            <summary>
            Removes all parser delegates
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpListItem.RemoveParser(System.Net.FtpClient.FtpListItem.Parser)">
            <summary>
            Removes the specified parser
            </summary>
            <param name="parser">The parser delegate to remove</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpListItem.ParseMachineList(System.String,System.Net.FtpClient.FtpCapability)">
            <summary>
            Parses MLS* format listings
            </summary>
            <param name="buf">A line from the listing</param>
            <param name="capabilities">Server capabilities</param>
            <returns>FtpListItem if the item is able to be parsed</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpListItem.ParseUnixList(System.String,System.Net.FtpClient.FtpCapability)">
            <summary>
            Parses LIST format listings
            </summary>
            <param name="buf">A line from the listing</param>
            <param name="capabilities">Server capabilities</param>
            <returns>FtpListItem if the item is able to be parsed</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpListItem.ParseDosList(System.String,System.Net.FtpClient.FtpCapability)">
            <summary>
            Parses IIS DOS format listings
            </summary>
            <param name="buf">A line from the listing</param>
            <param name="capabilities">Server capabilities</param>
            <returns>FtpListItem if the item is able to be parsed</returns>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.Type">
            <summary>
            Gets the type of file system object. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.FullName">
            <summary>
            Gets the full path name to the object. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.Name">
            <summary>
            Gets the name of the object. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.LinkTarget">
            <summary>
            Gets the target a symbolic link points to. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.LinkObject">
            <summary>
            Gets the object the LinkTarget points to. This property is null unless pass the
            FtpListOption.DerefLink flag in which case GetListing() will try to resolve
            the target itself.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.Modified">
            <summary>
            Gets the last write time of the object. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.Created">
            <summary>
            Gets the created date of the object. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.Size">
            <summary>
            Gets the size of the object. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.SpecialPermissions">
            <summary>
            Gets special UNIX permissions such as Stiky, SUID and SGID. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.OwnerPermissions">
            <summary>
            Gets the owner permissions. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.GroupPermissions">
            <summary>
            Gets the group permissions. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.OthersPermissions">
            <summary>
            Gets the others permissions. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.Input">
            <summary>
            Gets the input string that was parsed to generate the
            values in this object. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.Parsers">
            <summary>
            Collection of parsers. Each parser object contains
            a regex string that uses named groups, i.e., (?&lt;group_name&gt;foobar).
            The support group names are modify for last write time, size for the
            size and name for the name of the file system object. Each group name is
            optional, if they are present then those values are retrieved from a 
            successful match. In addition, each parser contains a Type property
            which gets set in the FtpListItem object to distinguish between different
            types of objects.
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpListItem.Parser">
            <summary>
            Ftp listing line parser
            </summary>
            <param name="line">The line from the listing</param>
            <param name="capabilities">The server capabilities</param>
            <returns>FtpListItem if the line can be parsed, null otherwise</returns>
        </member>
        <member name="T:System.Net.FtpClient.FtpReply">
            <summary>
            Represents a reply to an event on the server
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.IFtpReply">
            <summary>
            Represents a reply to an event on the server
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpReply.Type">
            <summary>
            The type of response received from the last command executed
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpReply.Code">
            <summary>
            The status code of the response
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpReply.Message">
            <summary>
            The message, if any, that the server sent with the response
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpReply.InfoMessages">
            <summary>
            Informational messages sent from the server
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpReply.Success">
            <summary>
            General success or failure of the last command executed
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.IFtpReply.ErrorMessage">
            <summary>
            Gets the error message including any informational output
            that was sent by the server. Sometimes the final response
            line doesn't contain anything informative as to what was going
            on with the server. Instead it may send information messages so
            in an effort to give as meaningful as a response as possible
            the informational messages will be included in the error.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpReply.Type">
            <summary>
            The type of response received from the last command executed
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpReply.Code">
            <summary>
            The status code of the response
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpReply.Message">
            <summary>
            The message, if any, that the server sent with the response
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpReply.InfoMessages">
            <summary>
            Informational messages sent from the server
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpReply.Success">
            <summary>
            General success or failure of the last command executed
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpReply.ErrorMessage">
            <summary>
            Gets the error message including any informational output
            that was sent by the server. Sometimes the final response
            line doesn't contain anything informative as to what was going
            on with the server. Instead it may send information messages so
            in an effort to give as meaningful as a response as possible
            the informational messages will be included in the error.
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpSocketStreamSslValidation">
            <summary>
            Event fired if a bad SSL certificate is encountered
            </summary>
            <param name="stream"></param>
            <param name="e"></param>
        </member>
        <member name="T:System.Net.FtpClient.FtpSslValidationEventArgs">
            <summary>
            Event args for the FtpSslValidationError delegate
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpSslValidationEventArgs.Certificate">
            <summary>
            The certificate to be validated
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpSslValidationEventArgs.Chain">
            <summary>
            The certificate chain
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpSslValidationEventArgs.PolicyErrors">
            <summary>
            Validation errors, if any.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpSslValidationEventArgs.Accept">
            <summary>
            Gets or sets a value indicating if this certificate should be accepted. The default
            value is false. If the certificate is not accepted, an AuthenticationException will
            be thrown.
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpTrace">
            <summary>
            Used for transaction logging and debug information.
            </summary>
            <example>The following example illustrates how to assist in debugging
            System.Net.FtpClient by getting a transaction log from the server.
            <code source="..\Examples\Debug.cs" lang="cs" />
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpTrace.AddListener(System.Diagnostics.TraceListener)">
            <summary>
            Add a TraceListner to the collection. You can use one of the predefined
            TraceListeners in the System.Diagnostics namespace, such as ConsoleTraceListener
            for logging to the console, or you can write your own deriving from 
            System.Diagnostics.TraceListener.
            </summary>
            <param name="listener">The TraceListener to add to the collection</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpTrace.RemoveListener(System.Diagnostics.TraceListener)">
            <summary>
            Remove the specified TraceListener from the collection
            </summary>
            <param name="listener">The TraceListener to remove from the collection.</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpTrace.Write(System.String,System.Object[])">
            <summary>
            Write to the TraceListeners.
            </summary>
            <param name="message">The message to write</param>
            <param name="args">Optional variables if using a format string similar to string.Format()</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpTrace.Write(System.String)">
            <summary>
            Write to the TraceListeners
            </summary>
            <param name="message">The message to write</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpTrace.WriteLine(System.String,System.Object[])">
            <summary>
            Write to the TraceListeners.
            </summary>
            <param name="message">The message to write</param>
            <param name="args">Optional variables if using a format string similar to string.Format()</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpTrace.WriteLine(System.String)">
            <summary>
            Write to the TraceListeners
            </summary>
            <param name="message">The message to write</param>
        </member>
        <member name="P:System.Net.FtpClient.FtpTrace.FlushOnWrite">
            <summary>
            Gets or sets whether the trace listeners should be flushed or not
            after writing to them. Default value is false.
            </summary>
        </member>
        <member name="T:Macrosage.Utility.UtilsBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Macrosage.Utility.UtilsBase.QrCode(System.String,System.Int32)">
            <summary>
            根据字符返回二维码
            </summary>
            <param name="data"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.UtilsBase.ImageToBase64(System.String,System.Boolean,System.Drawing.Imaging.ImageFormat)">
            <summary>
            根据图片转base64string
            </summary>
        </member>
        <member name="M:Macrosage.Utility.UtilsBase.ImageBase64ToStream(System.String)">
            <summary>
            根据 image base64 字符串转流
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.UtilsBase.ImageBase64ToBitmap(System.String)">
            <summary>
            根据 image base64 字符串转 Bitmap
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.UtilsBase.RandomNumber(System.Int32)">
            <summary>
            生成纯数字随机数
            </summary>
            <param name="length">待生成的位数</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.UtilsBase.RandomNumberChar(System.Int32)">
            <summary>
            生成字母、数字混合随机数
            </summary>
            <param name="length">待生成的位数</param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.UtilsBase.ShortUrl(System.String)">
            <summary>
            短网址生成(该方法会生成4组字符串,本项目默认采用数组第一个值)如：ShortUrl("abc")[0]
            </summary>
        </member>
        <member name="M:Macrosage.Utility.UtilsBase.MapPath(System.String)">
            <summary>
            获得当前绝对路径
            </summary>
            <param name="strPath">指定的路径</param>
            <returns>绝对路径</returns>
        </member>
        <member name="M:Macrosage.Utility.UtilsBase.FileSaveLocation(System.String)">
            <summary>
            
            </summary>
            <param name="strPath"></param>
            <returns></returns>
        </member>
        <member name="M:Macrosage.Utility.UtilsBase.GetIP">
            <summary>
            获得当前页面客户端的IP
            </summary>
            <returns>当前页面客户端的IP</returns>
        </member>
        <member name="P:Macrosage.Utility.UtilsBase.LoadTongJiCode">
            <summary>
            项目获取统计代码方法
            <para>详历项目组使用</para>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Macrosage.Utility.UtilsSupplementMethod">
            <summary>
            补充方法类
            </summary>
        </member>
        <member name="M:Macrosage.Utility.UtilsSupplementMethod.ToJosnByReplaceKeyChar(System.Object)">
            <summary>
            去除Josn中Html的转义
            <para>value 为空时则返回 null</para>
            </summary>
        </member>
        <member name="M:Macrosage.Utility.UtilsSupplementMethod.ToFormData(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            将字典数据转换为 formdata 数据
            </summary>
        </member>
        <member name="M:Macrosage.Utility.UtilsSupplementMethod.ToJsonData(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            将字典数据转换为 jsondata 数据
            </summary>
        </member>
        <member name="M:Macrosage.Utility.UtilsSupplementMethod.ToXmlData(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            将字典数据转换为 xmldata 数据
            </summary>
        </member>
        <member name="M:Macrosage.Utility.UtilsSupplementMethod.ToRequestFormData(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            将字典数据转换为 formdata 数据
            </summary>
        </member>
        <member name="M:Macrosage.Utility.UtilsSupplementMethod.ToRequestFormDataAuth(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            将字典数据转换为 formdata 数据
            <para>此方法追加授权信息参数</para>
            </summary>
        </member>
        <member name="M:Macrosage.Utility.UtilsSupplementMethod.ToRequestFormDataAuth(Newtonsoft.Json.Linq.JObject)">
            <summary>
            将 JObject 转换为 formdata 数据
            <para>此方法追加授权信息参数</para>
            </summary>
        </member>
        <member name="M:Macrosage.Utility.UtilsSupplementMethod.ToRequestJsonData(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            将字典数据转换为 jsondata 数据
            </summary>
        </member>
        <member name="M:Macrosage.Utility.UtilsSupplementMethod.ToRequestJsonDataAuth(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            将字典数据转换为 jsondata 数据
            <para>此方法追加授权信息参数</para>
            </summary>
        </member>
        <member name="M:Macrosage.Utility.UtilsSupplementMethod.ToRequestJsonDataAuth(Newtonsoft.Json.Linq.JObject)">
            <summary>
            组织后台 jsondata 提交数据
            <para>此方法追加授权信息参数</para>
            </summary>
        </member>
        <member name="M:Macrosage.Utility.UtilsSupplementMethod.ToRequestXmlData(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            将字典数据转换为 xmldata 数据
            </summary>
        </member>
        <member name="M:Macrosage.Utility.UtilsSupplementMethod.ToRequestXmlDataAuth(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            将字典数据转换为 xmldata 数据
            <para>此方法追加授权信息参数</para>
            </summary>
        </member>
        <member name="M:Macrosage.Utility.UtilsSupplementMethod.ToRequestXmlData(Newtonsoft.Json.Linq.JObject)">
            <summary>
            组织后台 xmldata 数据 [暂时无法使用]
            <para>此方法追加授权信息参数</para>
            </summary>
        </member>
        <member name="M:Macrosage.Utility.UtilsSupplementMethod.AppendRequestFormDataToken(System.String)">
            <summary>
            追加 formdata 授权信息
            <para>此方法追加授权信息参数</para>
            </summary>
        </member>
        <member name="M:Macrosage.Utility.UtilsSupplementMethod.GetAuthorize">
            <summary>
            返回授权信息集合
            </summary>
            <returns></returns>
        </member>
        <member name="T:Macrosage.Utility.MsCacheNameBase">
            <summary>
            
            </summary>
        </member>
        <member name="F:Macrosage.Utility.MsCacheNameBase.UsersOnlineData">
            <summary>
            个人登陆缓存总集合
            </summary>
        </member>
        <member name="F:Macrosage.Utility.MsCacheNameBase.UsersOnlineKey">
            <summary>
            映射邮箱与咕噜号缓存
            </summary>
        </member>
        <member name="F:Macrosage.Utility.MsCacheNameBase.GetOnlineUser">
            <summary>
            当前登录用户 缓存Key
            <para>GetOnlineUser_{唯一标示}_ByGuruCv</para>
            <para>实体CvLoginCacheModel</para>
            </summary>
        </member>
        <member name="F:Macrosage.Utility.MsCacheNameBase.GetOnlinePlatformData">
            <summary>
            平台信息
            <para>GetPlatformData</para>
            <para></para>
            </summary>
        </member>
        <member name="F:Macrosage.Utility.MsCacheNameBase.GetOnlineLastPlId">
            <summary>
            最后登陆平台编号
            <para>GetOnlineLastPlId_{唯一标示}</para>
            <para></para>
            </summary>
        </member>
        <member name="F:Macrosage.Utility.MsCacheNameBase.UserLoginErrorCount">
            <summary>
            记录用户登录出错次数
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:Macrosage.Utility.EnumHelperBase.CompanyNature">
            <summary>
            公司类型
            </summary>
        </member>
        <member name="P:Macrosage.Utility.EnumHelperBase.IndustryType">
            <summary>
            行业类型
            </summary>
        </member>
        <member name="P:Macrosage.Utility.EnumHelperBase.IndustryTypeForeign">
            <summary>
            行业类型
            </summary>
        </member>
        <member name="P:Macrosage.Utility.EnumHelperBase.CompanySize_Where">
            <summary>
            公司规模(只限用于简历筛选)
            </summary>
        </member>
        <member name="P:Macrosage.Utility.EnumHelperBase.CompanySize">
            <summary>
            公司规模
            </summary>
        </member>
        <member name="P:Macrosage.Utility.EnumHelperBase.AdminName">
            <summary>
            管理员类型
            </summary>
        </member>
        <member name="P:Macrosage.Utility.EnumHelperBase.Political">
            <summary>
            政治面貌
            </summary>
        </member>
        <member name="P:Macrosage.Utility.EnumHelperBase.StartingToWork_Where">
            <summary>
            工作年限(只用于简历筛选)
            </summary>
        </member>
        <member name="P:Macrosage.Utility.EnumHelperBase.StartingToWork">
            <summary>
            工作年限
            </summary>
        </member>
        <member name="P:Macrosage.Utility.EnumHelperBase.GoToWorkType">
            <summary>
            职业状态
            </summary>
        </member>
        <member name="P:Macrosage.Utility.EnumHelperBase.HighestEducation">
            <summary>
            教育阶段
            </summary>
        </member>
        <member name="P:Macrosage.Utility.EnumHelperBase.Admissions">
            <summary>
            招生类型
            </summary>
        </member>
        <member name="P:Macrosage.Utility.EnumHelperBase.SchoolRecord">
            <summary>
            学历
            </summary>
        </member>
        <member name="P:Macrosage.Utility.EnumHelperBase.SchoolRecordState">
            <summary>
            教育阶段状态
            </summary>
        </member>
        <member name="P:Macrosage.Utility.EnumHelperBase.HighSchoolType">
            <summary>
            学校类型是否是211,985
            </summary>
        </member>
        <member name="P:Macrosage.Utility.EnumHelperBase.PathwaysString">
            <summary>
            学习途径
            </summary>
        </member>
        <member name="P:Macrosage.Utility.EnumHelperBase.PostLevels">
            <summary>
            职位级别
            </summary>
        </member>
        <member name="P:Macrosage.Utility.EnumHelperBase.MaxSalary">
            <summary>
            期望月薪
            </summary>
        </member>
        <member name="P:Macrosage.Utility.EnumHelperBase.AuditonStatusByDictionary">
            <summary>
            面试通知阶段
            </summary>
        </member>
        <member name="P:Macrosage.Utility.EnumHelperBase.ResumeStatusByDictionary">
            <summary>
            招聘阶段
            </summary>
        </member>
        <member name="P:Macrosage.Utility.EnumHelperBase.ResumeStatusByDictionary_S">
            <summary>
            招聘阶段
            </summary>
        </member>
        <member name="P:Macrosage.Utility.EnumHelperBase.ResumeStatusByDictionary_OK">
            <summary>
            招聘阶段
            </summary>
        </member>
        <member name="P:Macrosage.Utility.EnumHelperBase.ExamTypeChinese">
            <summary>
            普通话
            </summary>
        </member>
        <member name="P:Macrosage.Utility.EnumHelperBase.ExamTypeJapanese">
            <summary>
            日语
            </summary>
            
        </member>
        <member name="P:Macrosage.Utility.EnumHelperBase.ExamTypeFrench">
            <summary>
            法语
            </summary>
        </member>
        <member name="P:Macrosage.Utility.EnumHelperBase.ExamTypeRussian">
            <summary>
            俄语
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.NationType">
            <summary>
            七大洲
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.NationType1">
             <summary>
            系统筛选条件
             </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.SocietyRelationType">
            <summary>
            社会关系
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.FellowshipType">
            <summary>
            交情程度
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.CityType">
            <summary>
            一级城市
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.LiquorType">
            <summary>
            酒量
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.HealthType">
            <summary>
            身体状况
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.SchoolType">
            <summary>
            办学类型
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.EthnicType">
            <summary>
            民族
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.ProcedureType">
            <summary>
            存储过程名称
            </summary>
        </member>
        <member name="F:Macrosage.Utility.EnumHelperBase.ProcedureType.Proc_Paging">
            <summary>
            分页查询通用存储过程
            </summary>
        </member>
        <member name="F:Macrosage.Utility.EnumHelperBase.ProcedureType.DataRecursive">
            <summary>
            树形结构查询通用存储过程
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.ClientControlType">
            <summary>
            html控件类型
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.JobType">
            <summary>
            用工类型
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.RecruitmentType">
            <summary>
            招聘类型
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.IsExaminationPapers">
            <summary>
            甄选模型
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.RecruitmentState">
            <summary>
            职位状态
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.DemandText">
            <summary>
            需求原因
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.IDType">
            <summary>
            证件类型
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.IsMarriage">
            <summary>
            婚姻状况
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.Gender">
            <summary>
            性别
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.IsFertility">
            <summary>
            生育情况
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.Religion">
            <summary>
            宗教信养
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.NatureOfWork">
            <summary>
            工作性质
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.GoToWorkTime">
            <summary>
            到岗时间
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.HealthVisionListen">
            <summary>
            身体状况,视力,听力
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.Liquor">
            <summary>
            酒量
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.GetQualification">
            <summary>
            学历(RmsV1 版本使用)
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.Degree">
            <summary>
            学位
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.ScholarshipLevelsType">
            <summary>
            奖学金级别
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.ScholarshipLevels">
            <summary>
            奖学金等级
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.Period">
            <summary>
            学习时段
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.Effects">
            <summary>
            学习效果
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.SkillsLevels">
            <summary>
            技能水平
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.LicenseType">
            <summary>
            驾照类型
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.Writing">
            <summary>
            写作能力
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.WritingGoodType">
            <summary>
            擅长类型
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.LanguageType">
            <summary>
            语言类别
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.LanguageLevels">
            <summary>
            语言水平 分听、说、读、写
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.ExamType">
            <summary>
            考试类型(英语)
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.MasterDegree">
            <summary>
            掌握程度
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.SuperiorJobs">
            <summary>
            上级职位
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.SubordinateJobs">
            <summary>
            下属职位
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.SuperiorRelation">
            <summary>
            职业认可时的 与之关系
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.Aim">
            <summary>
            出国目的
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.Identitys">
            <summary>
            在外身份
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.Funding">
            <summary>
            经费来源
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.ResultsType">
            <summary>
            成果类别
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.PublishChannel">
            <summary>
            发表渠道
            </summary>
             出版书籍改为 正式出版物
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.CreatePattern">
            <summary>
            创作模式
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.Certificate">
            <summary>
            证书类型
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.ResumeStatus">
            <summary>
            简历状态
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.MsShowType">
            <summary>
            天才秀分类
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.SourceType">
            <summary>
            数据来源
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.SourceType1">
            <summary>
            数据来源
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.ServicesRangeString">
            <summary>
            合作业务
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.EntStatus">
            <summary>
            企业状态
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.ArticleClassType">
            <summary>
            文章所述类别
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.MoveUpDown">
            <summary>
            列表上移下移
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.ServiceStatus">
            <summary>
            在职离职状态
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.ProjectInfoData">
            <summary>
            
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.Month">
            <summary>
            月份
            </summary>
        </member>
        <member name="F:Macrosage.Utility.EnumHelperBase.Month.Jan">
            <summary>
            一月 January
            </summary>
        </member>
        <member name="F:Macrosage.Utility.EnumHelperBase.Month.Feb">
            <summary>
            二月 February
            </summary>
        </member>
        <member name="F:Macrosage.Utility.EnumHelperBase.Month.Mar">
            <summary>
            三月 March
            </summary>
        </member>
        <member name="F:Macrosage.Utility.EnumHelperBase.Month.Apr">
            <summary>
            四月 April
            </summary>
        </member>
        <member name="F:Macrosage.Utility.EnumHelperBase.Month.May">
            <summary>
            五月 May
            </summary>
        </member>
        <member name="F:Macrosage.Utility.EnumHelperBase.Month.Jun">
            <summary>
            六月 June
            </summary>
        </member>
        <member name="F:Macrosage.Utility.EnumHelperBase.Month.Jul">
            <summary>
            七月 July
            </summary>
        </member>
        <member name="F:Macrosage.Utility.EnumHelperBase.Month.Aug">
            <summary>
            八月 August
            </summary>
        </member>
        <member name="F:Macrosage.Utility.EnumHelperBase.Month.Sep">
            <summary>
            九月September
            </summary>
        </member>
        <member name="F:Macrosage.Utility.EnumHelperBase.Month.Oct">
            <summary>
            十月 October
            </summary>
        </member>
        <member name="F:Macrosage.Utility.EnumHelperBase.Month.Nov">
            <summary>
            十一月November
            </summary>
        </member>
        <member name="F:Macrosage.Utility.EnumHelperBase.Month.Dec">
            <summary>
            十二月December
            </summary>
        </member>
        <member name="T:Macrosage.Utility.EnumHelperBase.ArticleType">
            <summary>
            主题类型
            </summary>
        </member>
    </members>
</doc>
